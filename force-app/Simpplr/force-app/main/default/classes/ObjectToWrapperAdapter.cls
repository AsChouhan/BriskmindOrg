public with sharing class ObjectToWrapperAdapter {	


	public static final String KEY_ANALYTICS_ORG_MONTHLY = 'in_app.notification.analytics.org.monthly';
	public static final String KEY_CAMPAIGN_ACCESS_GRANTED = 'in_app.notification.campaign.access_granted';
	public static final String KEY_CAMPAIGN_SHARED = 'in_app.notification.campaign.shared';
	public static final String KEY_CAMPAIGN_THIS_WEEK_SHARED = 'in_app.notification.campaign.this_week.shared';
    public static final String KEY_COMMENT_MENTION = 'in_app.notification.comment.mention';
	public static final String KEY_COMMENT_MENTION_RECOGNITION = 'in_app.notification.comment.recognition.mention';
    
    public static final String KEY_COMMENT_REPLY_1 = 'in_app.notification.comment.reply_1';
    public static final String KEY_COMMENT_REPLY_2 = 'in_app.notification.comment.reply_2';
    public static final String KEY_COMMENT_REPLY_3 = 'in_app.notification.comment.reply_3';
    public static final String KEY_COMMENT_REPLY_4 = 'in_app.notification.comment.reply_4';
    public static final String KEY_COMMENT_REPLY_N = 'in_app.notification.comment.reply_n';
    
    public static final String KEY_CONTENT_ALBUM_COMMENT_1 = 'in_app.notification.content.album.comment_1';
    public static final String KEY_CONTENT_ALBUM_COMMENT_2 = 'in_app.notification.content.album.comment_2';
    public static final String KEY_CONTENT_ALBUM_COMMENT_3 = 'in_app.notification.content.album.comment_3';
    public static final String KEY_CONTENT_ALBUM_COMMENT_4 = 'in_app.notification.content.album.comment_4';
    public static final String KEY_CONTENT_ALBUM_COMMENT_N = 'in_app.notification.content.album.comment_n';

    public static final String KEY_CONTENT_MANAGE_ALBUM_COMMENT_1 = 'in_app.notification.content.manage.album.comment_1';
    public static final String KEY_CONTENT_MANAGE_ALBUM_COMMENT_2 = 'in_app.notification.content.manage.album.comment_2';
    public static final String KEY_CONTENT_MANAGE_ALBUM_COMMENT_3 = 'in_app.notification.content.manage.album.comment_3';
    public static final String KEY_CONTENT_MANAGE_ALBUM_COMMENT_4 = 'in_app.notification.content.manage.album.comment_4';
    public static final String KEY_CONTENT_MANAGE_ALBUM_COMMENT_N = 'in_app.notification.content.manage.album.comment_n';

    public static final String KEY_CONTENT_ALBUM_LIKE_1 = 'in_app.notification.content.album.like_1';
    public static final String KEY_CONTENT_ALBUM_LIKE_2 = 'in_app.notification.content.album.like_2';
    public static final String KEY_CONTENT_ALBUM_LIKE_3 = 'in_app.notification.content.album.like_3';
    public static final String KEY_CONTENT_ALBUM_LIKE_4 = 'in_app.notification.content.album.like_4';
    public static final String KEY_CONTENT_ALBUM_LIKE_N = 'in_app.notification.content.album.like_n';

    public static final String KEY_CONTENT_MANAGE_ALBUM_LIKE_1 = 'in_app.notification.content.manage.album.like_1';
    public static final String KEY_CONTENT_MANAGE_ALBUM_LIKE_2 = 'in_app.notification.content.manage.album.like_2';
    public static final String KEY_CONTENT_MANAGE_ALBUM_LIKE_3 = 'in_app.notification.content.manage.album.like_3';
    public static final String KEY_CONTENT_MANAGE_ALBUM_LIKE_4 = 'in_app.notification.content.manage.album.like_4';
    public static final String KEY_CONTENT_MANAGE_ALBUM_LIKE_N = 'in_app.notification.content.manage.album.like_n';

    public static final String KEY_CONTENT_ALBUM_SHARE = 'in_app.notification.content.album.share';
    public static final String KEY_CONTENT_ALBUM_SHARE_1 = 'in_app.notification.content.album.share_1';
    public static final String KEY_CONTENT_ALBUM_SHARE_2 = 'in_app.notification.content.album.share_2';
    public static final String KEY_CONTENT_ALBUM_SHARE_3 = 'in_app.notification.content.album.share_3';
    public static final String KEY_CONTENT_ALBUM_SHARE_4 = 'in_app.notification.content.album.share_4';
    public static final String KEY_CONTENT_ALBUM_SHARE_N = 'in_app.notification.content.album.share_n';
    
    public static final String KEY_CONTENT_MANAGE_ALBUM_SHARE_1 = 'in_app.notification.content.manage.album.share_1';
    public static final String KEY_CONTENT_MANAGE_ALBUM_SHARE_2 = 'in_app.notification.content.manage.album.share_2';
    public static final String KEY_CONTENT_MANAGE_ALBUM_SHARE_3 = 'in_app.notification.content.manage.album.share_3';
    public static final String KEY_CONTENT_MANAGE_ALBUM_SHARE_4 = 'in_app.notification.content.manage.album.share_4';
    public static final String KEY_CONTENT_MANAGE_ALBUM_SHARE_N = 'in_app.notification.content.manage.album.share_n';

	public static final String KEY_MEDIA_TYPE_PHOTO = 'common.media_type.photo';
	public static final String KEY_MEDIA_TYPE_VIDEO = 'common.media_type.video';
	public static final String KEY_CONTENT_ALBUM_MEDIA_LIKED = 'in_app.notification.content.album.media.liked';
	public static final String KEY_CONTENT_ALBUM_MEDIA_SHARED = 'in_app.notification.content.album.media.shared';
	public static final String KEY_CONTENT_ALBUM_MEDIA_CONTRIBUTED_LIKED = 'in_app.notification.content.album.media.liked.your';
	public static final String KEY_CONTENT_ALBUM_MEDIA_CONTRIBUTED_SHARED = 'in_app.notification.content.album.media.shared.your';
	
	public static final String KEY_CONTENT_ALBUM_SUBMISSION_APPROVAL = 'in_app.notification.content.album.submission.approval';
    public static final String KEY_CONTENT_APPROVED = 'in_app.notification.content.approved';
    
    public static final String KEY_CONTENT_BLOG_POST_COMMENT_1 = 'in_app.notification.content.blog_post.comment_1';
    public static final String KEY_CONTENT_BLOG_POST_COMMENT_2 = 'in_app.notification.content.blog_post.comment_2';
    public static final String KEY_CONTENT_BLOG_POST_COMMENT_3 = 'in_app.notification.content.blog_post.comment_3';
    public static final String KEY_CONTENT_BLOG_POST_COMMENT_4 = 'in_app.notification.content.blog_post.comment_4';
    public static final String KEY_CONTENT_BLOG_POST_COMMENT_N = 'in_app.notification.content.blog_post.comment_n';

    public static final String KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_1 = 'in_app.notification.content.manage.blog_post.comment_1';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_2 = 'in_app.notification.content.manage.blog_post.comment_2';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_3 = 'in_app.notification.content.manage.blog_post.comment_3';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_4 = 'in_app.notification.content.manage.blog_post.comment_4';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_N = 'in_app.notification.content.manage.blog_post.comment_n';

    public static final String KEY_CONTENT_BLOG_POST_LIKE_1 = 'in_app.notification.content.blog_post.like_1';
    public static final String KEY_CONTENT_BLOG_POST_LIKE_2 = 'in_app.notification.content.blog_post.like_2';
    public static final String KEY_CONTENT_BLOG_POST_LIKE_3 = 'in_app.notification.content.blog_post.like_3';
    public static final String KEY_CONTENT_BLOG_POST_LIKE_4 = 'in_app.notification.content.blog_post.like_4';
    public static final String KEY_CONTENT_BLOG_POST_LIKE_N = 'in_app.notification.content.blog_post.like_n';

    public static final String KEY_CONTENT_MANAGE_BLOG_POST_LIKE_1 = 'in_app.notification.content.manage.blog_post.like_1';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_LIKE_2 = 'in_app.notification.content.manage.blog_post.like_2';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_LIKE_3 = 'in_app.notification.content.manage.blog_post.like_3';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_LIKE_4 = 'in_app.notification.content.manage.blog_post.like_4';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_LIKE_N = 'in_app.notification.content.manage.blog_post.like_n';

    public static final String KEY_CONTENT_BLOG_POST_SHARE_1 = 'in_app.notification.content.blog_post.share_1';
    public static final String KEY_CONTENT_BLOG_POST_SHARE_2 = 'in_app.notification.content.blog_post.share_2';
    public static final String KEY_CONTENT_BLOG_POST_SHARE_3 = 'in_app.notification.content.blog_post.share_3';
    public static final String KEY_CONTENT_BLOG_POST_SHARE_4 = 'in_app.notification.content.blog_post.share_4';
    public static final String KEY_CONTENT_BLOG_POST_SHARE_N = 'in_app.notification.content.blog_post.share_n';
    
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_SHARE_1 = 'in_app.notification.content.manage.blog_post.share_1';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_SHARE_2 = 'in_app.notification.content.manage.blog_post.share_2';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_SHARE_3 = 'in_app.notification.content.manage.blog_post.share_3';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_SHARE_4 = 'in_app.notification.content.manage.blog_post.share_4';
    public static final String KEY_CONTENT_MANAGE_BLOG_POST_SHARE_N = 'in_app.notification.content.manage.blog_post.share_n';

    public static final String KEY_CONTENT_COMMENT_LIKE_1 = 'in_app.notification.content.comment.like_1';
    public static final String KEY_CONTENT_COMMENT_LIKE_2 = 'in_app.notification.content.comment.like_2';
    public static final String KEY_CONTENT_COMMENT_LIKE_3 = 'in_app.notification.content.comment.like_3';
    public static final String KEY_CONTENT_COMMENT_LIKE_4 = 'in_app.notification.content.comment.like_4';
    public static final String KEY_CONTENT_COMMENT_LIKE_N = 'in_app.notification.content.comment.like_n';

    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_1 = 'in_app.notification.content.reply.like_1';
    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_2 = 'in_app.notification.content.reply.like_2';
    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_3 = 'in_app.notification.content.reply.like_3';
    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_4 = 'in_app.notification.content.reply.like_4';
    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_N = 'in_app.notification.content.reply.like_n';

    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_1 = 'in_app.notification.content.reply.like_no_text_1';
    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_2 = 'in_app.notification.content.reply.like_no_text_2';
    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_3 = 'in_app.notification.content.reply.like_no_text_3';
    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_4 = 'in_app.notification.content.reply.like_no_text_4';
    public static final String KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_N = 'in_app.notification.content.reply.like_no_text_n';

    public static final String KEY_CONTENT_EVENT_COMMENT_1 = 'in_app.notification.content.event.comment_1';
    public static final String KEY_CONTENT_EVENT_COMMENT_2 = 'in_app.notification.content.event.comment_2';
    public static final String KEY_CONTENT_EVENT_COMMENT_3 = 'in_app.notification.content.event.comment_3';
    public static final String KEY_CONTENT_EVENT_COMMENT_4 = 'in_app.notification.content.event.comment_4';
    public static final String KEY_CONTENT_EVENT_COMMENT_N = 'in_app.notification.content.event.comment_n';
    
    public static final String KEY_CONTENT_MANAGE_EVENT_COMMENT_1 = 'in_app.notification.content.manage.event.comment_1';
    public static final String KEY_CONTENT_MANAGE_EVENT_COMMENT_2 = 'in_app.notification.content.manage.event.comment_2';
    public static final String KEY_CONTENT_MANAGE_EVENT_COMMENT_3 = 'in_app.notification.content.manage.event.comment_3';
    public static final String KEY_CONTENT_MANAGE_EVENT_COMMENT_4 = 'in_app.notification.content.manage.event.comment_4';
    public static final String KEY_CONTENT_MANAGE_EVENT_COMMENT_N = 'in_app.notification.content.manage.event.comment_n';

    public static final String KEY_CONTENT_EVENT_INVITE = 'in_app.notification.content.event.invite';
    
    public static final String KEY_CONTENT_EVENT_LIKE_1 = 'in_app.notification.content.event.like_1';
    public static final String KEY_CONTENT_EVENT_LIKE_2 = 'in_app.notification.content.event.like_2';
    public static final String KEY_CONTENT_EVENT_LIKE_3 = 'in_app.notification.content.event.like_3';
    public static final String KEY_CONTENT_EVENT_LIKE_4 = 'in_app.notification.content.event.like_4';
    public static final String KEY_CONTENT_EVENT_LIKE_N = 'in_app.notification.content.event.like_n';

    public static final String KEY_CONTENT_MANAGE_EVENT_LIKE_1 = 'in_app.notification.content.manage.event.like_1';
    public static final String KEY_CONTENT_MANAGE_EVENT_LIKE_2 = 'in_app.notification.content.manage.event.like_2';
    public static final String KEY_CONTENT_MANAGE_EVENT_LIKE_3 = 'in_app.notification.content.manage.event.like_3';
    public static final String KEY_CONTENT_MANAGE_EVENT_LIKE_4 = 'in_app.notification.content.manage.event.like_4';
    public static final String KEY_CONTENT_MANAGE_EVENT_LIKE_N = 'in_app.notification.content.manage.event.like_n';

    public static final String KEY_CONTENT_EVENT_SHARE_1 = 'in_app.notification.content.event.share_1';
    public static final String KEY_CONTENT_EVENT_SHARE_2 = 'in_app.notification.content.event.share_2';
    public static final String KEY_CONTENT_EVENT_SHARE_3 = 'in_app.notification.content.event.share_3';
    public static final String KEY_CONTENT_EVENT_SHARE_4 = 'in_app.notification.content.event.share_4';
    public static final String KEY_CONTENT_EVENT_SHARE_N = 'in_app.notification.content.event.share_n';

    public static final String KEY_CONTENT_MANAGE_EVENT_SHARE_1 = 'in_app.notification.content.manage.event.share_1';
    public static final String KEY_CONTENT_MANAGE_EVENT_SHARE_2 = 'in_app.notification.content.manage.event.share_2';
    public static final String KEY_CONTENT_MANAGE_EVENT_SHARE_3 = 'in_app.notification.content.manage.event.share_3';
    public static final String KEY_CONTENT_MANAGE_EVENT_SHARE_4 = 'in_app.notification.content.manage.event.share_4';
    public static final String KEY_CONTENT_MANAGE_EVENT_SHARE_N = 'in_app.notification.content.manage.event.share_n';

    
    public static final String KEY_CONTENT_EVENT_SUBMISSION_APPROVAL = 'in_app.notification.content.event.submission.approval';
	public static final String KEY_CONTENT_FILE_POST = 'in_app.notification.content.file_post';
	public static final String KEY_CONTENT_LAST_MONTH_YOUR_MOST_POPULAR = 'in_app.notification.content.last_month.your_most_popular';
	public static final String KEY_CONTENT_MADE_YOU_AUTHOR = 'in_app.notification.content.made_you_author';
	public static final String KEY_CONTENT_PUBLISHED_ON_YOUR_BEHALF = 'in_app.notification.content.published_on_your_behalf';
	public static final String KEY_CONTENT_My_CONTENT_EDITED = 'in_app.notification.content.my_content_edited';
	public static final String KEY_CONTENT_CHANGED_AUTHOR = 'in_app.notification.content.changed_author';
	public static final String KEY_CONTENT_MUST_READ = 'in_app.notification.content.must_read';
	public static final String KEY_LAST_MONTH_APP_ANALYTICS = 'in_app.notification.analytics.last_month.user_logins';
	public static final String KEY_LAST_MONTH_REVIEW_ACTIVITY = 'in_app.notification.analytics.last_month.review_activity';
	public static final String KEY_CONTENT_NOT_USEFUL = 'in_app.notification.content.not_useful';
	public static final String KEY_CONTENT_OPEN_ALBUM_CONTENT_ADDED_SITE_MAN_CONTENT_OWNER = 'in_app.notification.content.open_album.content_added.site_man_content_owner';
	public static final String KEY_CONTENT_OPEN_ALBUM_CONTENT_ADDED_SITE_MAN_CONTENT_OWNER_PLURAL = 'in_app.notification.content.open_album.content_added.site_man_content_owner_plural';
	public static final String KEY_CONTENT_OPEN_ALBUM_CONTRIBUTED_LIKED = 'in_app.notification.content.open_album_contributed.liked';
    
    public static final String KEY_CONTENT_PAGE_COMMENT_1 = 'in_app.notification.content.page.comment_1';
    public static final String KEY_CONTENT_PAGE_COMMENT_2 = 'in_app.notification.content.page.comment_2';
    public static final String KEY_CONTENT_PAGE_COMMENT_3 = 'in_app.notification.content.page.comment_3';
    public static final String KEY_CONTENT_PAGE_COMMENT_4 = 'in_app.notification.content.page.comment_4';
    public static final String KEY_CONTENT_PAGE_COMMENT_N = 'in_app.notification.content.page.comment_n';
    
    public static final String KEY_CONTENT_MANAGE_PAGE_COMMENT = 'in_app.notification.content.manage.page.comment';
    public static final String KEY_CONTENT_MANAGE_PAGE_COMMENT_1 = 'in_app.notification.content.manage.page.comment_1';
    public static final String KEY_CONTENT_MANAGE_PAGE_COMMENT_2 = 'in_app.notification.content.manage.page.comment_2';
    public static final String KEY_CONTENT_MANAGE_PAGE_COMMENT_3 = 'in_app.notification.content.manage.page.comment_3';
    public static final String KEY_CONTENT_MANAGE_PAGE_COMMENT_4 = 'in_app.notification.content.manage.page.comment_4';
    public static final String KEY_CONTENT_MANAGE_PAGE_COMMENT_N = 'in_app.notification.content.manage.page.comment_n';

    public static final String KEY_CONTENT_PAGE_LIKE_1 = 'in_app.notification.content.page.like_1';
    public static final String KEY_CONTENT_PAGE_LIKE_2 = 'in_app.notification.content.page.like_2';
    public static final String KEY_CONTENT_PAGE_LIKE_3 = 'in_app.notification.content.page.like_3';
    public static final String KEY_CONTENT_PAGE_LIKE_4 = 'in_app.notification.content.page.like_4';
    public static final String KEY_CONTENT_PAGE_LIKE_N = 'in_app.notification.content.page.like_n';

    public static final String KEY_CONTENT_MANAGE_PAGE_LIKE_1 = 'in_app.notification.content.manage.page.like_1';
    public static final String KEY_CONTENT_MANAGE_PAGE_LIKE_2 = 'in_app.notification.content.manage.page.like_2';
    public static final String KEY_CONTENT_MANAGE_PAGE_LIKE_3 = 'in_app.notification.content.manage.page.like_3';
    public static final String KEY_CONTENT_MANAGE_PAGE_LIKE_4 = 'in_app.notification.content.manage.page.like_4';
    public static final String KEY_CONTENT_MANAGE_PAGE_LIKE_N = 'in_app.notification.content.manage.page.like_n';

    public static final String KEY_CONTENT_PAGE_SHARE_1 = 'in_app.notification.content.page.share_1';
    public static final String KEY_CONTENT_PAGE_SHARE_2 = 'in_app.notification.content.page.share_2';
    public static final String KEY_CONTENT_PAGE_SHARE_3 = 'in_app.notification.content.page.share_3';
    public static final String KEY_CONTENT_PAGE_SHARE_4 = 'in_app.notification.content.page.share_4';
    public static final String KEY_CONTENT_PAGE_SHARE_N = 'in_app.notification.content.page.share_n';

    public static final String KEY_CONTENT_MANAGE_PAGE_SHARE_1 = 'in_app.notification.content.manage.page.share_1';
    public static final String KEY_CONTENT_MANAGE_PAGE_SHARE_2 = 'in_app.notification.content.manage.page.share_2';
    public static final String KEY_CONTENT_MANAGE_PAGE_SHARE_3 = 'in_app.notification.content.manage.page.share_3';
    public static final String KEY_CONTENT_MANAGE_PAGE_SHARE_4 = 'in_app.notification.content.manage.page.share_4';
    public static final String KEY_CONTENT_MANAGE_PAGE_SHARE_N = 'in_app.notification.content.manage.page.share_n';


	public static final String KEY_CONTENT_PAGE_SUBMISSION_APPROVAL = 'in_app.notification.content.page.submission.approval';
	public static final String KEY_CONTENT_REJECTED = 'in_app.notification.content.rejected';
	public static final String KEY_CONTENT_PROMOTE_NOTIFICATION = 'in_app.content.promote.notification';
	public static final String KEY_EMAIL_NOTIFCATION_OVERWRITE = 'in_app.notification.email_notifcation_overwrite';
    
    public static final String KEY_FEED_POLL_LIKE = 'in_app.notification.feed.poll.like';
    public static final String KEY_FEED_POLL_LIKE_1 = 'in_app.notification.feed.poll.like_1';
    public static final String KEY_FEED_POLL_LIKE_2 = 'in_app.notification.feed.poll.like_2';
    public static final String KEY_FEED_POLL_LIKE_3 = 'in_app.notification.feed.poll.like_3';
    public static final String KEY_FEED_POLL_LIKE_4 = 'in_app.notification.feed.poll.like_4';
    public static final String KEY_FEED_POLL_LIKE_N = 'in_app.notification.feed.poll.like_n';
    
    public static final String KEY_FEED_POLL_REPLY_1 = 'in_app.notification.feed.poll.reply_1';
    public static final String KEY_FEED_POLL_REPLY_2 = 'in_app.notification.feed.poll.reply_2';
    public static final String KEY_FEED_POLL_REPLY_3 = 'in_app.notification.feed.poll.reply_3';
    public static final String KEY_FEED_POLL_REPLY_4 = 'in_app.notification.feed.poll.reply_4';
    public static final String KEY_FEED_POLL_REPLY_N = 'in_app.notification.feed.poll.reply_n';

	public static final String KEY_FEED_POSTED_TO_YOU = 'in_app.notification.feed.posted_to_you';
	public static final String KEY_FEED_NO_TEXT_POSTED_TO_YOU = 'in_app.notification.feed._no_text.posted_to_you';
	
	public static final String KEY_FEED_REPLIED_AFTER_1 = 'in_app.notification.feed.replied_after_1';
	public static final String KEY_FEED_REPLIED_AFTER_2 = 'in_app.notification.feed.replied_after_2';
	public static final String KEY_FEED_REPLIED_AFTER_3 = 'in_app.notification.feed.replied_after_3';
	public static final String KEY_FEED_REPLIED_AFTER_4 = 'in_app.notification.feed.replied_after_4';
	public static final String KEY_FEED_REPLIED_AFTER_N = 'in_app.notification.feed.replied_after_n';

	public static final String KEY_FEED_REPLIED_AFTER_OWN = 'in_app.notification.feed.replied_after_own';
    
    public static final String KEY_COMMENT_REPLIED_AFTER_1 = 'in_app.notification.content.comment.replied_after_1';
    public static final String KEY_COMMENT_REPLIED_AFTER_2 = 'in_app.notification.content.comment.replied_after_2';
    public static final String KEY_COMMENT_REPLIED_AFTER_3 = 'in_app.notification.content.comment.replied_after_3';
    public static final String KEY_COMMENT_REPLIED_AFTER_4 = 'in_app.notification.content.comment.replied_after_4';
    public static final String KEY_COMMENT_REPLIED_AFTER_N = 'in_app.notification.content.comment.replied_after_n';

	public static final String KEY_COMMENT_REPLIED_AFTER_OWN = 'in_app.notification.content.comment.replied_after_own';
	public static final String KEY_FEED_DEFAULT_OVERWRITE = 'in_app.notification.feed_default_overwrite';
	public static final String KEY_HOME_DEFAULT_OVERWRITE = 'in_app.notification.home_default_overwrite';
	public static final String KEY_HOME_DEFAULT_REMINDER = 'in_app.notification.home_default_reminder';
	public static final String KEY_NEWSLETTER_ALL_ORG_ACCESS_GRANTED = 'in_app.notification.newsletter.all_org_access.granted';
	public static final String KEY_NEWSLETTER_SCHEDULED_FAILED_TO_SEND = 'in_app.notification.newsletter.scheduled.failed_to_send';
	public static final String KEY_NEWSLETTER_SITE_LEVEL_ACCESS_GRANTED = 'in_app.notification.newsletter.site_level_access.granted';
	public static final String KEY_OVERWRITE_EMAIL_NOTIFICATION_DEFAULT = 'in_app.notification.overwrite.email_notification_default';
	public static final String KEY_MOBILE_APP_NOTIFICATION_OVERWRITE = 'in_app.notification.mobile_app_notification_overwrite';
	public static final String KEY_BROWSER_NOTIFICATION_OVERWRITE = 'in_app.notification.browser_notification_overwrite';
	public static final String KEY_SMS_NOTIFICATION_OVERWRITE = 'in_app.notification.sms_notification_overwrite';
	public static final String KEY_OVERWRITE_HOME_DEFAULT_REMINDER = 'in_app.notification.home_default_reminder';
    
    public static final String KEY_POST_LIKE_1 = 'in_app.notification.post.like_1';
    public static final String KEY_POST_LIKE_2 = 'in_app.notification.post.like_2';
    public static final String KEY_POST_LIKE_3 = 'in_app.notification.post.like_3';
    public static final String KEY_POST_LIKE_4 = 'in_app.notification.post.like_4';
    public static final String KEY_POST_LIKE_N = 'in_app.notification.post.like_n';

    public static final String KEY_POST_NO_TEXT_LIKE_1 = 'in_app.notification.post.no_text.like_1';
    public static final String KEY_POST_NO_TEXT_LIKE_2 = 'in_app.notification.post.no_text.like_2';
    public static final String KEY_POST_NO_TEXT_LIKE_3 = 'in_app.notification.post.no_text.like_3';
    public static final String KEY_POST_NO_TEXT_LIKE_4 = 'in_app.notification.post.no_text.like_4';
    public static final String KEY_POST_NO_TEXT_LIKE_N = 'in_app.notification.post.no_text.like_n';

	public static final String KEY_RECOGNITION_LIKE_1 = 'in_app.notification.recognition.like_1';
    public static final String KEY_RECOGNITION_LIKE_2 = 'in_app.notification.recognition.like_2';
    public static final String KEY_RECOGNITION_LIKE_3 = 'in_app.notification.recognition.like_3';
    public static final String KEY_RECOGNITION_LIKE_4 = 'in_app.notification.recognition.like_4';
    public static final String KEY_RECOGNITION_LIKE_N = 'in_app.notification.recognition.like_n';

    public static final String KEY_POST_REPLY_1 = 'in_app.notification.post.reply_1';
    public static final String KEY_POST_REPLY_2 = 'in_app.notification.post.reply_2';
    public static final String KEY_POST_REPLY_3 = 'in_app.notification.post.reply_3';
    public static final String KEY_POST_REPLY_4 = 'in_app.notification.post.reply_4';
    public static final String KEY_POST_REPLY_N = 'in_app.notification.post.reply_n';

	public static final String KEY_RECOGNITION_REPLY_1 = 'in_app.notification.recognition.reply_1';
    public static final String KEY_RECOGNITION_REPLY_2 = 'in_app.notification.recognition.reply_2';
    public static final String KEY_RECOGNITION_REPLY_3 = 'in_app.notification.recognition.reply_3';
    public static final String KEY_RECOGNITION_REPLY_4 = 'in_app.notification.recognition.reply_4';
    public static final String KEY_RECOGNITION_REPLY_N = 'in_app.notification.recognition.reply_n';
    
    public static final String KEY_POST_NO_TEXT_REPLY_1 = 'in_app.notification.post.no_text.reply_1';
    public static final String KEY_POST_NO_TEXT_REPLY_2 = 'in_app.notification.post.no_text.reply_2';
    public static final String KEY_POST_NO_TEXT_REPLY_3 = 'in_app.notification.post.no_text.reply_3';
    public static final String KEY_POST_NO_TEXT_REPLY_4 = 'in_app.notification.post.no_text.reply_4';
    public static final String KEY_POST_NO_TEXT_REPLY_N = 'in_app.notification.post.no_text.reply_n';    

	public static final String KEY_POST_SHARED_WITH_YOU_REPLY_1 = 'in_app.notification.post_shared_with_you.reply_1';
	public static final String KEY_POST_SHARED_WITH_YOU_REPLY_2 = 'in_app.notification.post_shared_with_you.reply_2';
	public static final String KEY_POST_SHARED_WITH_YOU_REPLY_3 = 'in_app.notification.post_shared_with_you.reply_3';
	public static final String KEY_POST_SHARED_WITH_YOU_REPLY_4 = 'in_app.notification.post_shared_with_you.reply_4';
	public static final String KEY_POST_SHARED_WITH_YOU_REPLY_N = 'in_app.notification.post_shared_with_you.reply_n';

	public static final String KEY_POST_REPLY_LIKE_1 = 'in_app.notification.feed.reply.like_1';
    public static final String KEY_POST_REPLY_LIKE_2 = 'in_app.notification.feed.reply.like_2';
    public static final String KEY_POST_REPLY_LIKE_3 = 'in_app.notification.feed.reply.like_3';
    public static final String KEY_POST_REPLY_LIKE_4 = 'in_app.notification.feed.reply.like_4';
    public static final String KEY_POST_REPLY_LIKE_N = 'in_app.notification.feed.reply.like_n';

    public static final String KEY_POST_REPLY_NO_TEXT_LIKE_1 = 'in_app.notification.feed.reply.no_text.like_1';
    public static final String KEY_POST_REPLY_NO_TEXT_LIKE_2 = 'in_app.notification.feed.reply.no_text.like_2';
    public static final String KEY_POST_REPLY_NO_TEXT_LIKE_3 = 'in_app.notification.feed.reply.no_text.like_3';
    public static final String KEY_POST_REPLY_NO_TEXT_LIKE_4 = 'in_app.notification.feed.reply.no_text.like_4';
    public static final String KEY_POST_REPLY_NO_TEXT_LIKE_N = 'in_app.notification.feed.reply.no_text.like_n';

    public static final String KEY_POST_SHARE_1 = 'in_app.notification.post.share_1';
    public static final String KEY_POST_SHARE_2 = 'in_app.notification.post.share_2';
    public static final String KEY_POST_SHARE_3 = 'in_app.notification.post.share_3';
    public static final String KEY_POST_SHARE_4 = 'in_app.notification.post.share_4';
    public static final String KEY_POST_SHARE_N = 'in_app.notification.post.share_n';

    public static final String KEY_POST_NO_TEXT_SHARE_1 = 'in_app.notification.post.no_text.share_1';
    public static final String KEY_POST_NO_TEXT_SHARE_2 = 'in_app.notification.post.no_text.share_2';
    public static final String KEY_POST_NO_TEXT_SHARE_3 = 'in_app.notification.post.no_text.share_3';
    public static final String KEY_POST_NO_TEXT_SHARE_4 = 'in_app.notification.post.no_text.share_4';
    public static final String KEY_POST_NO_TEXT_SHARE_N = 'in_app.notification.post.no_text.share_n';

	public static final String KEY_RECOGNITION_SHARE_1 = 'in_app.notification.recognition.share_1';
    public static final String KEY_RECOGNITION_SHARE_2 = 'in_app.notification.recognition.share_2';
    public static final String KEY_RECOGNITION_SHARE_3 = 'in_app.notification.recognition.share_3';
    public static final String KEY_RECOGNITION_SHARE_4 = 'in_app.notification.recognition.share_4';
    public static final String KEY_RECOGNITION_SHARE_N = 'in_app.notification.recognition.share_n';

	public static final String KEY_INITIAL = 'in_app.notification.survey.initial';
	public static final String KEY_REMINDER_ONE = 'in_app.notification.survey.reminder_one';
	public static final String KEY_REMINDER_TWO = 'in_app.notification.survey.reminder_two';
	public static final String KEY_ACTION_INSTANCE = 'in_app.notification.survey.action_instance';
	public static final String KEY_ACTION_SURVEY = 'in_app.notification.survey.action_survey';

	public static final String KEY_POSTED_TO_YOU_FILE_WITH_TEXT = 'in_app.notification.posted_to_you.file_with_text';
	public static final String KEY_POSTED_TO_YOU_FILE = 'in_app.notification.posted_to_you.file';
	public static final String KEY_POSTED_TO_YOU_LINK = 'in_app.notification.posted_to_you.link';
	public static final String KEY_POSTED_TO_YOU_POLL = 'in_app.notification.feed.poll.posted_to_you';
	public static final String KEY_PRIVATE_SITE_APPROVAL = 'in_app.notification.private_site.approval';
	public static final String KEY_PRIVILEGES_ALERT = 'in_app.notification.privileges.alert';
	public static final String KEY_PRIVILEGES_ANALYTICS = 'in_app.notification.privileges.analytics';
	public static final String KEY_PRIVILEGES_APP_MANAGER = 'in_app.notification.privileges.app_manager';
	public static final String KEY_PRIVILEGES_HOME_CONTROL = 'in_app.notification.privileges.home_control';
	public static final String KEY_PRIVILEGES_INFLUENCER = 'in_app.notification.privileges.influencer';
	public static final String KEY_PRIVILEGES_NEWSLETTER = 'in_app.notification.privileges.newsletter';
	public static final String KEY_PRIVILEGES_NEWSLETTER_SITE_ONLY = 'in_app.notification.privileges.newsletter_site_only';
	public static final String KEY_PRIVILEGES_SOCIAL_CAMPAIGNS = 'in_app.notification.privileges.social_campaigns';
	public static final String KEY_PROFILE_EXPERTISE_ENDORSE = 'in_app.notification.profile.expertise.endorse';
	public static final String KEY_PROFILE_FOLLOW = 'in_app.notification.profile.follow';
	public static final String KEY_REPLY_POST_YOU_LIKE = 'in_app.notification.reply.post_you_like';
	public static final String KEY_REPLY_NO_TEXT_POST_YOU_LIKE = 'in_app.notification.reply._no_text.post_you_like';
	public static final String KEY_REPLY_WITH_FILE = 'in_app.notification.reply.with_file';
	public static final String KEY_SHAREPOINT_UPGRADE = 'in_app.notification.sharepoint_upgrade';
	public static final String KEY_SEGMENT = 'in_app.notification.segment';
	public static final String KEY_MADE_SEGMENT_MANAGER = 'in_app.notification.segment.made_you_manager';
	public static final String KEY_SITE_LAST_MONTH_YOUR_MOST_POPULAR = 'in_app.notification.site.last_month.your_most_popular';
	public static final String KEY_SITE_MADE_YOU_MANAGER = 'in_app.notification.site.made_you_manager';
	public static final String KEY_SITE_MADE_YOU_CONTENT_MANAGER = 'in_app.notification.site.made_you_content_manager';
	public static final String KEY_SITE_MADE_YOU_OWNER = 'in_app.notification.site.made_you_owner';
	public static final String KEY_SITE_MADE_YOU_MEMBER = 'in_app.notification.site.made_you_member';
	public static final String KEY_SOCIAL_CAMPAIGN_SHARED_FEED = 'in_app.notification.social_campaign.shared.feed';
	public static final String KEY_SOCIAL_CAMPAIGN_READY = 'in_app.notification.social_campaign_ready';
	public static final String KEY_SUBSCRIPTION_APPROVED = 'in_app.notification.subscription.approved';
	public static final String KEY_SUBSCRIPTION_REJECTED = 'in_app.notification.subscription.rejected';
	public static final String KEY_SUBSCRIPTION_REQUIRES_ATTENTION = 'in_app.notification.subscription.requires_attention';
	public static final String KEY_SUBSCRIPTION_APPROVAL = 'in_app.notification.subscription_approval';
	public static final String KEY_SUBSCRIPTION_REJECTION = 'in_app.notification.subscription_rejection';
	public static final String KEY_SUMMARY_DIGEST_DAILY = 'in_app.notification.summary.digest.daily';
	public static final String KEY_SUMMARY_DIGEST_WEEKLY = 'in_app.notification.summary.digest.weekly';
	public static final String KEY_SUMMARY_TOP_STORIES_DAILY = 'in_app.notification.summary.top_stories.daily';
	public static final String KEY_SITE_APPROVAL = 'in_app.notification.site.request.approval';
	public static final String KEY_NEW_SITE_ONBOARDING_CONTENT = 'in_app.notification.site.added_to_onboarding_content';
	public static final String KEY_SITE_REQUEST_1 = 'in_app.notification.site.request';
	public static final String KEY_SITE_REQUEST_2 = 'in_app.notification.site.request_2';
	public static final String KEY_SITE_REQUEST_3 = 'in_app.notification.site.request_3';
	public static final String KEY_SITE_REQUEST_4 = 'in_app.notification.site.request_4';
	public static final String KEY_SITE_REQUEST_n = 'in_app.notification.site.request_n';
	public static final String KEY_SITE_AUTOAPPROVE = 'in_app.notification.site.request.auto_approve';
	public static final String KEY_SITE_AUTOAPPROVE_PLURAL = 'in_app.notification.site.request.auto_approve_plural';
	public static final String KEY_PROFILE_POST = 'in_app.notification.profile.post';

	public static final String KEY_SN_STATUS_CHANGE = 'in_app.notification.servicenow.ticket_status_change';
	public static final String KEY_SN_TICKET_UPDATED = 'in_app.notification.servicenow.ticket_updated';
	
	public static final String KEY_NL_ACCEESS = 'in_app.notification.newsletter.all_org_access.granted';
	public static final String KEY_ORG_LEVEL_ONBOARDING_ACCESS = 'in_app.notification.org_level_onboarding_access.granted';
	public static final String KEY_SITE_NL_ACCEESS = 'in_app.notification.newsletter.site_level_access.granted';
	public static final String KEY_CAMPAIGN_ACCESS = 'in_app.notification.privileges.social_campaigns';
	public static final String KEY_ADDED_IMAGE_TO_ALBUM_SINGULAR = 'in_app.notification.content.open_album.image_added.site_man_content_owner';
	public static final String KEY_ADDED_IMAGE_TO_ALBUM_PLURAL = 'in_app.notification.content.open_album.image_added.site_man_content_owner_plural';
	public static final String KEY_ADDED_VIDEO_TO_ALBUM_SINGULAR = 'in_app.notification.content.open_album.video_added.site_man_content_owner';
	public static final String KEY_ADDED_VIDEO_TO_ALBUM_PLURAL = 'in_app.notification.content.open_album.video_added.site_man_content_owner_plural';
	public static final String KEY_ADDED_IMAGE_VIDEO_TO_ALBUM_SINGULAR = 'in_app.notification.content.open_album.content_added.site_man_content_owner';
	public static final String KEY_ADDED_IMAGE_VIDEO_TO_ALBUM_PLURAL = 'in_app.notification.content.open_album.content_added.site_man_content_owner_plural';
	public static final String KEY_KEY_ADDED_IMAGE_VIDEO_TO_ALBUM_SINGULAR_PLURAL = 'in_app.notification.content.open_album.content_added.site_man_content_owner_singular_plural';
	public static final String KEY_KEY_ADDED_IMAGE_VIDEO_TO_ALBUM_PLURAL_SINGULAR = 'in_app.notification.content.open_album.content_added.site_man_content_owner_plural_singluar';
	
	public static final String KEY_REVIEW_REQD_SINGULAR = 'in_app.notification.knowledge.review.required';
	public static final String KEY_PAGE_EXPIRED_SINGULAR = 'in_app.notification.knowledge.expired';
	public static final String KEY_PAGE_EXPIRED_PLURAL = 'in_app.notification.knowledge.expired_plural';
	public static final String KEY_MOBILE_PROMOTION = 'in_app.notification.mobile_promotion';

	public static final String KEY_RSVP_REMOVED = 'in_app.notification.content.event.rsvp_removed';
	public static final String KEY_EVENT_DELETED = 'in_app.notification.content.event.deleted';
	public static final String KEY_EVENT_UPDATED  = 'in_app.notification.content.event.updated';
	public static final String KEY_EVENT_UNPUBLISHED = 'in_app.notification.content.event.unpublished';

	public static final String KEY_EVENT_MORE_THAN_2_RESPONDENT = 'in_app.notification.content.event.more_than_2_reponded_to_your_event';
	public static final String KEY_EVENT_2_RESPONDENT = 'in_app.notification.content.event.2_reponded_to_your_event';
	public static final String KEY_EVENT_1_RESPONDENT = 'in_app.notification.content.event.1_reponded_to_your_event';

	public static final String KEY_NEWSLETTER = 'in_app.notification.newsletter_shared';
	public static final String KEY_GRADUATION = 'in_app.notification.new_hire_graduated';

	public static final String KEY_CSV_DOWNLOAD_REQUEST = 'in_app.notification.csv_download_request';
	public static final String KEY_MUST_READ_HISTORY = 'in_app.notification.csv.must_read_history';
	public static final String KEY_ANALYTICS_CSV_DOWNLOAD_REQUEST = 'in_app.notification.csv.analytics.file.available';
	public static final String KEY_ADOPTION = 'in_app.notification.csv.adoption';
	public static final String KEY_ADOPTION_BEHAVIOR = 'in_app.notification.csv.adoption_behavior'; 
	public static final String KEY_PEOPLE = 'in_app.notification.csv.people'; 
	public static final String KEY_PEOPLE_FAVORITES_RECIEVED = 'in_app.notification.csv.people_favorites_received'; 
	public static final String KEY_PEOPLE_LIKES_MADE = 'in_app.notification.csv.people_likes_made'; 
	public static final String KEY_PEOPLE_LIKES_RECEIVED = 'in_app.notification.csv.people_likes_received'; 
	public static final String KEY_PEOPLE_FEED_POSTS = 'in_app.notification.csv.people_feed_posts'; 
	public static final String KEY_PEOPLE_REPLIES = 'in_app.notification.csv.people_replies'; 
	public static final String KEY_PEOPLE_REPLIES_FROM_OTHER_USERS = 'in_app.notification.csv.people_replies_from_other_users'; 
	public static final String KEY_PEOPLE_SHARES_RECEIVED = 'in_app.notification.csv.people_shares_received'; 
	public static final String KEY_PEOPLE_PROFILE_VIEWS = 'in_app.notification.csv.people_profile_views'; 
	public static final String KEY_PEOPLE_CONTENT_PUBLISHED = 'in_app.notification.csv.people_content_published'; 
	public static final String KEY_SITE_ANALYTICS = 'in_app.notification.csv.site_analytics'; 

	public static final String KEY_CNI_INITIATIVE_STARTS = 'in_app.notification.cni.initiative_starts';
	public static final String KEY_CNI_INITIATIVE_ENDS = 'in_app.notification.cni.initiative_ends';
	public static final String KEY_CNI_CAMPAIGN_NEW = 'in_app.notification.cni.new_campaign';
	public static final String KEY_CNI_CAMPAIGN_ENDS = 'in_app.notification.cni.campaign_ends';

	public static final String KEY_QNA_MENTION_QUESTION = 'in_app.notification.qna.question.mention';
	public static final String KEY_QNA_MENTION_ANSWER = 'in_app.notification.qna.answer.mention';
	public static final String KEY_QNA_ANSWER_VOTE_1 = 'in_app.notification.qna.answer.vote_1';
	public static final String KEY_QNA_ANSWER_VOTE_2 = 'in_app.notification.qna.answer.vote_2';
	public static final String KEY_QNA_ANSWER_VOTE_3 = 'in_app.notification.qna.answer.vote_3';
	public static final String KEY_QNA_ANSWER_VOTE_4 = 'in_app.notification.qna.answer.vote_4';
	public static final String KEY_QNA_ANSWER_VOTE_n = 'in_app.notification.qna.answer.vote_n';
	public static final String KEY_QNA_ANSWER_APPROVAL = 'in_app.notification.qna.answer.approval';
	public static final String KEY_QNA_NEW_ANSWER_1 = 'in_app.notification.qna.answer.new_1';
	public static final String KEY_QNA_NEW_ANSWER_2 = 'in_app.notification.qna.answer.new_2';
	public static final String KEY_QNA_NEW_ANSWER_3 = 'in_app.notification.qna.answer.new_3';
	public static final String KEY_QNA_NEW_ANSWER_4 = 'in_app.notification.qna.answer.new_4';
	public static final String KEY_QNA_NEW_ANSWER_n = 'in_app.notification.qna.answer.new_n';
	public static final String KEY_QNA_NEW_APPROVED_ANSWER = 'in_app.notification.qna.question.approved.answer';
	public static final String KEY_QNA_QUESTION_DUPLICATE = 'in_app.notification.qna.question.duplicate';
	public static final String KEY_QNA_NEW_QUESTION_1 = 'in_app.notification.qna.question.new_1';
	public static final String KEY_QNA_NEW_QUESTION_2 = 'in_app.notification.qna.question.new_2';
	public static final String KEY_QNA_NEW_QUESTION_3 = 'in_app.notification.qna.question.new_3';
	public static final String KEY_QNA_NEW_QUESTION_4 = 'in_app.notification.qna.question.new_4';
	public static final String KEY_QNA_NEW_QUESTION_n = 'in_app.notification.qna.question.new_n';
	public static final String KEY_QNA_NEW_QUESTION_IN_CONTENT_1 = 'in_app.notification.qna.question_in_content.new_1';
	public static final String KEY_QNA_NEW_QUESTION_IN_CONTENT_2 = 'in_app.notification.qna.question_in_content.new_2';
	public static final String KEY_QNA_NEW_QUESTION_IN_CONTENT_3 = 'in_app.notification.qna.question_in_content.new_3';
	public static final String KEY_QNA_NEW_QUESTION_IN_CONTENT_4 = 'in_app.notification.qna.question_in_content.new_4';
	public static final String KEY_QNA_NEW_QUESTION_IN_CONTENT_n = 'in_app.notification.qna.question_in_content.new_n';
	public static final String KEY_QNA_NEW_ANSWER_IN_CONTENT_1 = 'in_app.notification.qna.answer_in_content.new_1';
	public static final String KEY_QNA_NEW_ANSWER_IN_CONTENT_2 = 'in_app.notification.qna.answer_in_content.new_2';
	public static final String KEY_QNA_NEW_ANSWER_IN_CONTENT_3 = 'in_app.notification.qna.answer_in_content.new_3';
	public static final String KEY_QNA_NEW_ANSWER_IN_CONTENT_4 = 'in_app.notification.qna.answer_in_content.new_4';
	public static final String KEY_QNA_NEW_ANSWER_IN_CONTENT_n = 'in_app.notification.qna.answer_in_content.new_n';

	public static final String KEY_VIDEO_MANAGE = 'in_app.notification.video.manage';

	// recognition
	public static final String KEY_RECOGNITION = 'in_app.notification.recognition';
	public static final String KEY_NEW_AWARD_10_DAYS_BEFORE = '.nomination.delegate.new_award.10_days_before';
	public static final String KEY_EXISTING_AWARD_7_DAYS_BEFORE = '.nomination.delegate.existing_award.7_days_before_no_rpt_msg';
	public static final String KEY_NEW_AWARD_3_DAYS_BEFORE = '.nomination.delegate.new_award.3_days_before';
	public static final String KEY_DELEGATE_OPEN = '.nomination.delegate.open';
	public static final String KEY_LOW_PARTICIPATION = '.nomination.delegate.low_participation';
	public static final String KEY_DELEGATE_CLOSE = '.nomination.delegate.close';
	public static final String KEY_OVERDUE_NEXT_OPEN = '.delegate.overdue.next_open';
	public static final String KEY_OVERDUE_NEXT_CLOSE = '.delegate.overdue.next_close';
	public static final String KEY_OVERDUE_WARNING = '.manager.overdue.warning';
	public static final String KEY_OVERDUE_AWARDED = '.manager.overdue.awarded';
	public static final String KEY_AWARD_SKIPPED = '.manager.skipped';
	public static final String KEY_AWARD_MISSED = '.manager.missed';
	public static final String KEY_USER_OPEN = '.nomination.user.open';
	public static final String KEY_USER_OPEN_N_AWARDS = '.nomination.user.open_n_awards';
	public static final String KEY_AWARD_GRANTED = '.user.award_granted';
	public static final String KEY_AWARD_WINNER = '.user.award_winner';
	public static final String KEY_DIRECT_NEW_AWARD = '.direct.delegate.new_award';
	public static final String KEY_DIRECT_EXISTING_AWARD = '.direct.delegate.existing_award';
	public static final String KEY_AWARD_DUE = '.direct.delegate.award_due';
	public static final String KEY_AWARD_CHEER = '.award.cheer';
	public static final String KEY_RECOGNITION_CHEER = '.recognition.cheer';
	public static final String KEY_AWARD_COMMENT = '.award.comment';
	public static final String KEY_RECOGNITION_COMMENT = '.recognition.comment';
	public static final String KEY_RECOGNITION_COMMENT_LIKE = '.comment.like';
	public static final String KEY_RECOGNITION_MANAGER_NOTIFY_AWARD = '.manager_notify_award';
	public static final String KEY_RECOGNITION_MANAGER_NOTIFY_RECOGNITION = '.manager_notify_recognition';

	public class SiteStats{
		public Integer ownerAndManagerCount;
		public Integer memberCount;
		public Integer followerCount;
		public Integer requestCount;
		public Boolean isMember;
		public Boolean isFollower;
		public Boolean isOwner;
		public Boolean isManager;
		public Boolean isContentManager;
	}

  /**
	* 
	* Purpose:  [Explain what this method does to support the correct operation of its class, and how it does it.]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/
	
	public static SiteListingWrapper generateSiteWrapFromSiteAndCollGrp (Simpplr_Site__c siteObjArg, CollaborationGroup collGrpObjArg) {
		SiteListingWrapper siteWrapObj = new SiteListingWrapper();
		if(!UserContext.hasModifyAllDataPermission && collGrpObjArg.CollaborationType.equalsIgnoreCase('Private') && collGrpObjArg.GroupMembers.isEmpty()){
			siteWrapObj.canAccess = false;
		}else{
			siteWrapObj.canAccess = true;
		}
		siteWrapObj.chatterGroupId = siteObjArg.Chatter_Group_Id__c;
	 	siteWrapObj.id = siteObjArg.id;	 	
	 	if (siteObjArg.Bookmarked_Simpplr_Site__r.isEmpty()) {
	 		siteWrapObj.isFavorited  = false;
	 		
	 	} else {
	 		siteWrapObj.isFavorited  = true;
	 	}
	 	if('Unlisted'.equalsIgnoreCase(siteObjArg.Site_Type__c)){
	 		siteWrapObj.isListed  = false;
	 	} else {
	 		siteWrapObj.isListed  = true;
	 	}
	 	if(SimpplrContext.isSegmentsEnabled) {
	 		siteWrapObj.isFeatured = siteObjArg.Site_Segments__r.isEmpty() == false;
	 	} else {
	 		siteWrapObj.isFeatured = siteObjArg.Is_Featured__c;
	 	}
	 	
	 	siteWrapObj.isActivated = siteObjArg.Is_Active__c;
	 	siteWrapObj.ownerId = collGrpObjArg.OwnerId;
	 	siteWrapObj.isOwner = UserContext.id.equalsIgnoreCase(collGrpObjArg.OwnerId);	 	
	 	siteWrapObj.title = siteObjArg.Name;	 	
	 	if(String.isNotBlank(siteObjArg.Site_Category__c)) {
	 		siteWrapObj.category.id = siteObjArg.Site_Category__c;
	 		siteWrapObj.category.name = siteObjArg.Site_Category__r.Name__c;
	 		siteWrapObj.category.url = PageContext.getPageURL(Pages.app)+'?u=/sites/category&category='+siteObjArg.Site_Category__c;
	 	} else {
	 		siteWrapObj.category = null;
	 	}
 		
	 	siteWrapObj.informationTitle = collGrpObjArg.InformationTitle;
	 	siteWrapObj.memberCount = collGrpObjArg.MemberCount;
 		siteWrapObj.description = collGrpObjArg.Description;	 		
	 	if((UserContext.hasModifyAllDataPermission && !'Unlisted'.equalsIgnoreCase(siteObjArg.Site_Type__c)) 
	 		|| (UserContext.isUserAppModerator && 'Public'.equalsIgnoreCase(siteObjArg.Site_Type__c))
	 		|| (UserContext.hasManageUnlistedSitePermission && 'Unlisted'.equalsIgnoreCase(siteObjArg.Site_Type__c))){
	 		siteWrapObj.canEdit  = true;
	 	} else {
	 		siteWrapObj.canEdit  = false;
	 	}	 	
	 	if (!collGrpObjArg.GroupMembers.isEmpty()) {
	 		siteWrapObj.currentUserSubscriptionId = collGrpObjArg.GroupMembers[0].id;
	 		siteWrapObj.isMember = true;	 		
	 		if ('Admin'.equalsIgnoreCase(collGrpObjArg.GroupMembers[0].CollaborationRole)) {
			 	siteWrapObj.canEdit  = true;
	 			siteWrapObj.isManager = true;
	 			siteWrapObj.canEdit  = true; 			
	 		} else {
	 			siteWrapObj.isManager = false;
	 		}	 		
	 	} else {
	 		siteWrapObj.currentUserSubscriptionId = null;
	 		siteWrapObj.isMember = false;
	 		siteWrapObj.isManager = false;
	 	}
	 	if((siteWrapObj.canEdit) || ((UserContext.hasModifyAllDataPermission || UserContext.isUserAppModerator))){
		 	siteWrapObj.canActivateDeactivate = true;
	 	} else {
	 		siteWrapObj.canActivateDeactivate = false;
	 	}	
	 	if (siteObjArg.Site_Type__c.equalsIgnoreCase('Private')) {
			siteWrapObj.isPrivate = true;			
		} else {
			siteWrapObj.isPrivate = false;
		}
		if (collGrpObjArg.CollaborationType.equalsIgnoreCase('Public')) {
			siteWrapObj.isPublic = true;			
		} else {
			siteWrapObj.isPublic = false;
		}
		siteWrapObj.isAccessRequested = new SiteDao().isAccessRequested(siteObjArg,collGrpObjArg);			
		
		siteWrapObj.url = PageContext.getPageURL(Pages.app) +'?u=/site/' + siteObjArg.Id + '/' + siteObjArg.Landing_Page__c;
    	
    	if(siteWrapObj.isActivated) {
			siteWrapObj.aboutUrl = PageContext.getPageURL(Pages.app) +'?u=/site/' +  siteWrapObj.id + '/about';
		}
		siteWrapObj.editUrl = PageContext.getPageURL(Pages.app) +'?u=/manage/sites/' + siteWrapObj.id;
		
		if(String.isNotBlank(siteObjArg.Title_Content_Version__c)){
			siteWrapObj.img = Utility.getFileDownloadURLFor720By480(siteObjArg.Title_Content_Version__c);
 			siteWrapObj.imgThumbnail = Utility.getFileDownloadURLFor120BY90(siteObjArg.Title_Content_Version__c);
			siteWrapObj.imgFile = new FileListingWrapper();
			siteWrapObj.imgFile.url = PageContext.getPageURL(Pages.FileDetail, new Map<String, String>{'fileId' => siteObjArg.Title_Content_Document__c, 'siteId' => siteObjArg.id});
			siteWrapObj.imgFile.downloadUrl = Utility.getFileDownloadURL(siteObjArg.Title_Content_Version__c);
			siteWrapObj.imgFile.fileUrl = Utility.getFileDownloadURL(siteObjArg.Title_Content_Version__c);
			siteWrapObj.imgFile.id = siteObjArg.Title_Content_Document__c;
			siteWrapObj.imgFile.thumbnailImg = Utility.getFileDownloadURLFor240BY180(siteObjArg.Title_Content_Version__c);
		}
		if(siteObjArg.Slack_Url__c != null && SimpplrContext.slackIntegrationEnabled){
			SiteListingWrapper.slack slackObj = new SiteListingWrapper.Slack();
			slackObj.url = siteObjArg.Slack_Url__c+'messages/'+siteObjArg.Slack_Channel_Name__c;
			slackObj.name = siteObjArg.Slack_Channel_Name__c;
			siteWrapObj.slack = slackObj;
		}
	 	return siteWrapObj;
	}
	
	public static PeopleListingWrapper peopleToWrapper(People__c peopleObjArg) {
		PeopleListingWrapper  peopleWrapObj=new PeopleListingWrapper ();
		peopleWrapObj.id = peopleObjArg.Id;
		String name = Utility.buildName(peopleObjArg.First_Name__c,peopleObjArg.Last_Name__c);
		if(String.isNotBlank(name)){
			peopleWrapObj.name = name;
		}
		peopleWrapObj.title = peopleObjArg.Title__c;
		peopleWrapObj.department = peopleObjArg.Department__c;
		peopleWrapObj.city = peopleObjArg.City__c;
		peopleWrapObj.state = peopleObjArg.State__c;
		peopleWrapObj.country = peopleObjArg.Country__c;
		peopleWrapObj.location = Utility.buildLocation(peopleWrapObj.city, peopleWrapObj.state, peopleWrapObj.country);
		peopleWrapObj.email = peopleObjArg.Email__c;
		peopleWrapObj.phone = peopleObjArg.Phone__c;
		peopleWrapObj.mobile = peopleObjArg.mobile_phone__c;
		peopleWrapObj.phoneExtension = peopleObjArg.extension__c;
		peopleWrapObj.phoneExtension = peopleObjArg.extension__c;
		peopleWrapObj.designation = '';
		peopleWrapObj.img = peopleObjArg.user__r.FullPhotoURL.endsWith('005/F') ? null : peopleObjArg.user__r.FullPhotoURL;
		peopleWrapObj.sfUserId = peopleObjArg.User__c;
		peopleWrapObj.peopleId = peopleObjArg.id;
		peopleWrapObj.birthday = SimpplrContext.isPPBirthDateDisplay ? Utility.dateToDisplayString(peopleObjArg.Birth_Date__c,'MM-dd') : null;
		if(SimpplrContext.isPPJoiningDateDisplay) {
			peopleWrapObj.hireDate = Utility.dateToDisplayString(peopleObjArg.Joining_Date__c,'yyyy-MM-dd');
		}
		
		if (UserContext.usersIFollowIdSet.contains(peopleObjArg.User__c)) {
    		peopleWrapObj.isFollowing = true;
    		
    	} else {
    		peopleWrapObj.isFollowing = false;
    	}
    	
    	if (!peopleObjArg.Bookmark_Receiver_People__r.isEmpty()) {
    		peopleWrapObj.isFavorited = true;
    		
    	} else {
    		peopleWrapObj.isFavorited = false;
    	}
    	
		peopleWrapObj.isActive = peopleObjArg.User__r.isactive;
		peopleWrapObj.url = PageContext.getPageURL(Pages.app) + '?u=/people/' + peopleObjArg.id;
		
		if (UserContext.getCurrentUserInfo.Id == peopleObjArg.Id) {
			peopleWrapObj.canFollow = false;
			peopleWrapObj.canFavorite = false;
			
		} else {
			peopleWrapObj.canFollow = peopleObjArg.User__r.isactive;
			peopleWrapObj.canFavorite = peopleObjArg.User__r.isactive;
			
		} 
		
		return peopleWrapObj;
	}
	
	public static FileListingWrapper myFileToWrapper(ContentDocument contentDocObjArg) {
		FileListingWrapper fileWrapperObj = new FileListingWrapper();
		fileWrapperObj.title = contentDocObjArg.title;
		fileWrapperObj.id = contentDocObjArg.id;
		fileWrapperObj.contentDocumentId = contentDocObjArg.id;
		fileWrapperObj.contentVersionId = contentDocObjArg.LatestPublishedVersionId;
		
		fileWrapperObj.type = Utility.getFileType(contentDocObjArg.LatestPublishedVersion.fileType);
		String fileExtension = contentDocObjArg.LatestPublishedVersion.fileExtension;
		fileWrapperObj.fileExtension = fileExtension;
		fileWrapperObj.isImage = isImage(fileExtension);
		
		if(fileWrapperObj.isImage) {
			fileWrapperObj.thumbnailImg = Utility.getFileDownloadURLFor240BY180(contentDocObjArg.LatestPublishedVersionId);
		    fileWrapperObj.imgTHUMB240BY180URL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +contentDocObjArg.id+'/rendition?type=THUMB240BY180';
			fileWrapperObj.imgTHUMB720BY480URL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +contentDocObjArg.id+'/rendition?type=THUMB720BY480';
			fileWrapperObj.imgFullURL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +contentDocObjArg.id+'/content';
		}
		
		fileWrapperObj.owner.id = contentDocObjArg.Owner.id;
		fileWrapperObj.owner.name = PeopleDao.mapUserIdToPeopleName.containsKey(contentDocObjArg.Owner.id) ? PeopleDao.mapUserIdToPeopleName.get(contentDocObjArg.Owner.id) : contentDocObjArg.Owner.name;
		fileWrapperObj.pathOnClient = contentDocObjArg.LatestPublishedVersion.pathOnClient;
		fileWrapperObj.size = contentDocObjArg.LatestPublishedVersion.ContentSize;
		fileWrapperObj.owner.url = PageContext.getPageURL(Pages.app) + '?u=/redirect-to-profile/' + contentDocObjArg.Owner.id; 
		
		if(contentDocObjArg.LastModifiedDate != NULL) {
			fileWrapperObj.modifiedAt = contentDocObjArg.LastModifiedDate.format('yyyy-MM-dd\'T\'HH:mm:ss.SSSZ');
		}
		
		fileWrapperObj.modifiedAtDateTime = contentDocObjArg.LastModifiedDate;
		fileWrapperObj.url = PageContext.getPageURL(Pages.FileDetail, new Map<String, String>{'fileId' => contentDocObjArg.id});
		fileWrapperObj.downloadUrl = Utility.getFileDownloadURL(contentDocObjArg.LatestPublishedVersionId);
		fileWrapperObj.fileUrl = fileWrapperObj.downloadUrl;
    	
    	if(UserContext.hasModifyAllDataPermission || UserContext.id.equalsIgnoreCase(fileWrapperObj.Owner.id)) {
	    	fileWrapperObj.canDelete = true;
	    	if('C'.equalsIgnoreCase(contentDocObjArg.LatestPublishedVersion.Origin)) {
	    		fileWrapperObj.canCreateNewVersion = false;
	    	}
	    	else {
	    		fileWrapperObj.canCreateNewVersion = true;
	    	}
    	} else {
    		fileWrapperObj.canDelete = false;
			if('C'.equalsIgnoreCase(contentDocObjArg.LatestPublishedVersion.Origin)) {
	    		fileWrapperObj.canCreateNewVersion = false;
	    	}
	    	else {
	    		fileWrapperObj.canCreateNewVersion = checkUploadNewVersionPermission(contentDocObjArg.ContentDocumentLinks);
	    	}
    	}
    	fileWrapperObj.canCreatePublicShareLink = fileWrapperObj.canCreateNewVersion;
		fileWrapperObj.isDownloadableOniOS = Utility.isDownloadableOniOS(fileExtension, null);
    	if('C'.equalsIgnoreCase(contentDocObjArg.LatestPublishedVersion.Origin)) {
    		fileWrapperObj.context = 'crm';
    		fileWrapperObj.provider = 'crm';
    	}
    	else {
    		fileWrapperObj.context = 'intranet';
    		fileWrapperObj.provider = 'intranet';
    	}
	    return fileWrapperObj;
    }
    
    public static Set<Id> allPublicChatterGroupIdSet{
    	get{
	        if(allPublicChatterGroupIdSet == null){
	        	allPublicChatterGroupIdSet = Utility.getAllPublicCollaborationGroupMap().keySet();
	        }
	        return allPublicChatterGroupIdSet;
    	} private set;
    }
    
    public static Boolean checkUploadNewVersionPermission(List<ContentDocumentLink> listOfContentDocumentLinks) {
    	Boolean canUploadNewVersion = false;
    	
    	if (listOfContentDocumentLinks != null) {
    		for(ContentDocumentLink cdl : listOfContentDocumentLinks) {
	    		if('CollaborationGroup'.equalsIgnoreCase(cdl.LinkedEntity.type) && cdl.ShareType =='C') {
	    			if((!'none'.equalsIgnoreCase(SimpplrContext.allowFileUpload) && (UserContext.chatterGroupsIFollowIdSet.contains(cdl.LinkedEntityId) || 
	    			   allPublicChatterGroupIdSet.contains(cdl.LinkedEntityId))) ||
	    			   UserContext.hasModifyAllDataPermission) {
	    				canUploadNewVersion = true;
	    				break;
	    			}
	    		} else if(UserContext.Id.equalsIgnoreCase(cdl.LinkedEntityId) && (cdl.ShareType =='C' || cdl.ShareType =='I')) {
	    			canUploadNewVersion = true;
	    			break;
	    		} 
	    	}
    	}
    	
    	return canUploadNewVersion;
    }
    
    public static FileVersionHistoryWrapper contentVersionToFileListingWrapper(ContentVersion contentVersionObj) {
	    	FileVersionHistoryWrapper versionHistoryWrapperObj = new FileVersionHistoryWrapper();
	    	versionHistoryWrapperObj.versionNumber = contentVersionObj.versionNumber; 
	    	versionHistoryWrapperObj.createdAt = Utility.dateTimeToMomentJSDateTime(contentVersionObj.LastModifiedDate);
	    	versionHistoryWrapperObj.user.id = contentVersionObj.ContentModifiedById;
				versionHistoryWrapperObj.user.name = PeopleDao.mapUserIdToPeopleName.containsKey(contentVersionObj.ContentModifiedById) ? PeopleDao.mapUserIdToPeopleName.get(contentVersionObj.ContentModifiedById) : contentVersionObj.ContentModifiedBy.name;
				versionHistoryWrapperObj.user.url = PageContext.getPageURL(Pages.app) + '?u=/redirect-to-profile/' + contentVersionObj.ContentModifiedById;
	    	versionHistoryWrapperObj.downloadUrl = Utility.getFileDownloadURL(contentVersionObj.Id);
	    	return versionHistoryWrapperObj;
    }
    
    public static FileListingWrapper siteFileToWrapper(ContentDocument contentDocObjArg, String siteId, Boolean canRemove, Boolean canDelete, Boolean canMove) {
		FileListingWrapper fileWrapperObj = new FileListingWrapper();
		fileWrapperObj.title = contentDocObjArg.title;
		fileWrapperObj.id = contentDocObjArg.id;
		fileWrapperObj.contentDocumentId = contentDocObjArg.id;
		fileWrapperObj.contentVersionId = contentDocObjArg.LatestPublishedVersionId;
		fileWrapperObj.type = Utility.getFileType(contentDocObjArg.LatestPublishedVersion.fileType);
		fileWrapperObj.size = contentDocObjArg.LatestPublishedVersion.ContentSize;
		String fileExtension = contentDocObjArg.LatestPublishedVersion.fileExtension;
		fileWrapperObj.fileExtension = fileExtension;
		fileWrapperObj.pathOnClient = contentDocObjArg.LatestPublishedVersion.pathOnClient;
		fileWrapperObj.owner.id = contentDocObjArg.Owner.id;
		fileWrapperObj.owner.name = PeopleDao.mapUserIdToPeopleName.containsKey(contentDocObjArg.Owner.id) ? PeopleDao.mapUserIdToPeopleName.get(contentDocObjArg.Owner.id) : contentDocObjArg.Owner.name;
		fileWrapperObj.owner.url = PageContext.getPageURL(Pages.app) + '?u=/redirect-to-profile/' + contentDocObjArg.Owner.id; 
		if(contentDocObjArg.LastModifiedDate != NULL) {
			fileWrapperObj.modifiedAt = contentDocObjArg.LastModifiedDate.format('yyyy-MM-dd\'T\'HH:mm:ss.SSSZ');
		}
		fileWrapperObj.modifiedAtDateTime = contentDocObjArg.LastModifiedDate;
		fileWrapperObj.url = PageContext.getPageURL(Pages.FileDetail, new Map<String, String>{'fileId' => contentDocObjArg.id, 'siteId' => siteId});
    	fileWrapperObj.downloadUrl = Utility.getFileDownloadURL(contentDocObjArg.LatestPublishedVersionId);
    	fileWrapperObj.fileUrl = fileWrapperObj.downloadUrl;
		fileWrapperObj.isImage = isImage(fileExtension);
		// Added thumbnail image if the file is image
		if(fileWrapperObj.isImage) {
			fileWrapperObj.thumbnailImg = Utility.getFileDownloadURLFor240BY180(contentDocObjArg.LatestPublishedVersionId);
		}
		
		if('C'.equalsIgnoreCase(contentDocObjArg.LatestPublishedVersion.Origin)) {
    		fileWrapperObj.canCreateNewVersion = false;
    	}
    	else if(UserContext.hasModifyAllDataPermission || UserContext.id.equalsIgnoreCase(fileWrapperObj.Owner.id) ||
				(UserContext.sitesIManageIdSet.contains(siteId) && SiteContext.isPrivateSite)) {
	    	fileWrapperObj.canCreateNewVersion = true;
    	} else {
			fileWrapperObj.canCreateNewVersion = checkUploadNewVersionPermission(contentDocObjArg.ContentDocumentLinks);
    	}
    	
    	if(canMove && 
    		(fileWrapperObj.canCreateNewVersion || SiteContext.isCurrentUserSiteManager ||
    		 (UserContext.isUserAppModerator && SiteContext.isPublicSite))){
    		fileWrapperObj.canMove = true;	
    	} else {
    		fileWrapperObj.canMove = false;
    	}
    	
    	fileWrapperObj.canRemove = canRemove;
	    fileWrapperObj.canDelete = canDelete;
	    
	    fileWrapperObj.canCreatePublicShareLink = fileWrapperObj.canCreateNewVersion;
    	
		fileWrapperObj.isDownloadableOniOS = Utility.isDownloadableOniOS(fileExtension, null);
    	
    	return fileWrapperObj;
    }
    
    public static FileListingWrapper fileToWrapper(File__c fileObjArg) {   	
		FileListingWrapper fileWrapperObj = new FileListingWrapper();
		fileWrapperObj.id = fileObjArg.id;
		fileWrapperObj.description = fileObjArg.Description__c;
		fileWrapperObj.likeCount = Integer.valueOf(fileObjArg.Likes__c);
		fileWrapperObj.index = Integer.valueOf(fileObjArg.Order__c);
		fileWrapperObj.createdAt = Utility.dateTimeToMomentJSDateTime(fileObjArg.CreatedDate);
		if(!fileObjArg.Likes_Simpplr_File__r.isEmpty()){
				fileWrapperObj.isLiked = true;
		}
			
		if (fileObjArg.MIME_Type__c == 'video') {
			fileWrapperObj.isVideo = true;
			fileWrapperObj.img = fileObjArg.Thumbnail_URL__c;
			fileWrapperObj.thumbnailImg = fileObjArg.Thumbnail_URL__c;
			fileWrapperObj.videoStatus = fileObjArg.Video_Status__c  != null ? Integer.valueOf(fileObjArg.Video_Status__c) : 1;
			fileWrapperObj.videoId = fileObjArg.External_Id__c;
			fileWrapperObj.isCover = fileObjArg.Is_Title_Image__c;
			fileWrapperObj.url = fileObjArg.url__c;
			if(String.isNotBlank(fileObjArg.Video_Provider__c)) {
				fileWrapperObj.videoProvider = fileObjArg.Video_Provider__c;
				
			} else if (fileObjArg.Url__c.containsIgnoreCase('vidyard.com')){ 
				fileWrapperObj.videoProvider = 'vidyard';
				
			} else if (fileObjArg.Url__c.contains('vimeo.com')){
				fileWrapperObj.videoProvider = 'vimeo';
			
			} else if (fileObjArg.Url__c.containsIgnoreCase('vbrick.com')){
				fileWrapperObj.videoProvider = 'vbrick';
				
			} else if (fileObjArg.Url__c.contains('wistia.')){
				fileWrapperObj.videoProvider = 'wistia';
			
			} else if (fileObjArg.Url__c.containsIgnoreCase('microsoftstream.com')) {
				fileWrapperObj.videoProvider = 'microsoftStream';
				
			} else if (fileObjArg.Url__c.containsIgnoreCase('sharepoint.com')) {
				fileWrapperObj.videoProvider = 'office365';

			} else if (fileObjArg.Url__c.containsIgnoreCase('livestream.com')) {
				fileWrapperObj.videoProvider = 'livestream';

			} else if (fileObjArg.Url__c.containsIgnoreCase('brightcove.net')) {
				fileWrapperObj.videoProvider = 'brightcove';

			} else {
				fileWrapperObj.videoProvider = 'youtube';
			}
			fileWrapperObj.imgTHUMB240BY180URL = fileObjArg.Thumbnail_URL__c;
        	fileWrapperObj.imgFullURL = fileObjArg.Thumbnail_URL__c;
		} else {
			fileWrapperObj.isVideo = false;
			fileWrapperObj.img = Utility.getFileDownloadURL(fileObjArg.Content_Version__c);
			fileWrapperObj.downloadUrl = Utility.getFileDownloadURL(fileObjArg.Content_Version__c);
			fileWrapperObj.fileUrl = fileWrapperObj.downloadUrl;
			fileWrapperObj.videoProvider = '';
			fileWrapperObj.videoId = ''; 
			fileWrapperObj.thumbnailImg = Utility.getFileDownloadURLFor720By480(fileObjArg.Content_Version__c);
			fileWrapperObj.isCover =  fileObjArg.Is_Title_Image__c;
			fileWrapperObj.imgTHUMB720BY480URL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +fileObjArg.Content_Document__c+'/rendition?type=THUMB720BY480';
			fileWrapperObj.imgTHUMB240BY180URL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +fileObjArg.Content_Document__c+'/rendition?type=THUMB240BY180';
			fileWrapperObj.imgFullURL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +fileObjArg.Content_Document__c+'/content';
		}
		
		if(fileObjArg.Simpplr_Content__c != null) {
			fileWrapperObj.photoCount = (Integer)(fileObjArg.Simpplr_Content__r.Album_Image_Count__c);
			fileWrapperObj.videoCount = (Integer)(fileObjArg.Simpplr_Content__r.Album_Video_Count__c);
		} else {
			fileWrapperObj.photoCount = 0;
			fileWrapperObj.videoCount = 0;
		}
		
		fileWrapperObj.authoredBy = new PeopleLiteWrapper();
		fileWrapperObj.authoredBy.id = fileObjArg.Author__c;
		fileWrapperObj.authoredBy.name = fileObjArg.Author__r.name;
		fileWrapperObj.authoredBy.url = PageContext.getPageURL(Pages.app) + '?u=/people/' + fileObjArg.Author__c;
		fileWrapperObj.authoredBy.img = Utility.getProfilePhotoURL(fileObjArg.Author__r.User__r.SmallPhotoUrl);
		fileWrapperObj.authoredBy.sfUserId = fileObjArg.Author__r.User__c;
		fileWrapperObj.authoredBy.peopleId = fileObjArg.Author__c;
		
		if(ServiceConstants.VIDEO_PROVIDER_ZOOM.equalsIgnoreCase(SimpplrContext.PPVideoProvider)) {
			fileWrapperObj.authoredBy.videoCallUsername = fileObjArg.Author__r.Zoom_Id__c;
		} else if(ServiceConstants.VIDEO_PROVIDER_SKYPE.equalsIgnoreCase(SimpplrContext.PPVideoProvider)) {
			fileWrapperObj.authoredBy.videoCallUsername = fileObjArg.Author__r.Skype_Id__c;
		}
		fileWrapperObj.authoredBy.videoCallProvider = SimpplrContext.PPVideoProvider;
		
    	return fileWrapperObj;
    }
    
    public static FileListingWrapper folderToWrapper(Folder__c folderObjArg, Map<Id,String> mapOfSiteFolders) {
    	FileListingWrapper wrapperObj = new FileListingWrapper();
    	List<Folder__c> parentInfo;
    	String parentFolder;
    	if(mapOfSiteFolders != null){
	    	if(mapOfSiteFolders.containsKey(folderObjArg.Parent_Folder__c)){
	    		parentFolder = String.valueOf(mapOfSiteFolders.get(folderObjArg.Parent_Folder__c));
	    	}
    	}
     	wrapperObj.provider = folderObjArg.Type__c.toLowerCase();
     	if('googledrive'.equalsIgnoreCase(folderObjArg.type__c)) {
     		wrapperObj.id = folderObjArg.External_Folder_Id__c;
            wrapperObj.isMyDriveEnabled = SimpplrContext.myDriveEnabled;
			wrapperObj.driveType = folderObjArg.Drive_Type__c;
			
     	} else if('crm'.equalsIgnoreCase(folderObjArg.type__c) && folderObjArg.Is_System_Folder__c == false) {
     		wrapperObj.id = folderObjArg.External_Folder_Id__c;
     		
     	} else if('dropbox'.equalsIgnoreCase(folderObjArg.type__c)) {
     		wrapperObj.id = folderObjArg.Path__c;
		
		} else if('native_video'.equalsIgnoreCase(folderObjArg.type__c)) {
			wrapperObj.id = folderObjArg.Id;

     	} else if('Intranet'.equalsIgnoreCase(folderObjArg.type__c) || (String.isBlank(folderObjArg.parent_Folder__c) && !'gdrive'.equalsIgnoreCase(folderObjArg.type__c))) {
	     	wrapperObj.id = folderObjArg.Id;
    	
    	} else {
    		wrapperObj.id = folderObjArg.External_Folder_Id__c;
    	
    	}
    	if('read'.equalsIgnoreCase(folderObjArg.permissions__c)) {	 
 			wrapperObj.permissions = 'read';
    	} else {
    		wrapperObj.permissions = 'readwrite';
        }

        if('googledrive'.equalsIgnoreCase(folderObjArg.type__c)) {
            wrapperObj.permissions = null;
        }
    	
     	if(folderObjArg.Is_System_Folder__c){
     		wrapperObj.isSystemDir = true;
	     	wrapperObj.type = 'System Folder';
				wrapperObj.title = getSystemFolderName(wrapperObj.provider, folderObjArg.name__c);
     	}	else	{
     		wrapperObj.type = 'Folder';
				wrapperObj.title = folderObjArg.name__c;
     	}
     	wrapperObj.isDir = true;
     	if(String.isNotBlank(parentFolder)){
     		if('Albums'.equalsIgnoreCase(parentFolder)){
     			wrapperObj.canDelete = false;
     			wrapperObj.canMove = false;
     		}else if(folderObjArg.Is_System_Folder__c){
     			wrapperObj.canMove = false;
     			wrapperObj.canDelete = false;
     		}else{
     			wrapperObj.canDelete = UserContext.Id.equalsIgnoreCase(folderObjArg.Owner.id);
     			wrapperObj.canMove = UserContext.Id.equalsIgnoreCase(folderObjArg.Owner.id);
     		}
     	} else if(folderObjArg.Is_System_Folder__c){
     		wrapperObj.canDelete = false;
     		wrapperObj.canMove = false;
     	} else {
     		wrapperObj.canDelete = UserContext.Id.equalsIgnoreCase(folderObjArg.Owner.id) || SiteContext.isCurrentUserSiteManager;
		}
		if('googledrive'.equalsIgnoreCase(folderObjArg.type__c)) {
			 wrapperObj.canDelete = false;
		}
     	if(String.isNotBlank(folderObjArg.People__c)) {
			wrapperObj.owner.id = folderObjArg.People__c;
			wrapperObj.owner.name = folderObjArg.People__r.Full_Name__c;
			wrapperObj.owner.url = PageContext.getPageURL(Pages.app) + '?u=/people/' + folderObjArg.People__c;
		 } else {
			wrapperObj.owner.id = folderObjArg.Owner.id;
			wrapperObj.owner.name = PeopleDao.mapUserIdToPeopleName.containsKey(folderObjArg.Owner.id) ? PeopleDao.mapUserIdToPeopleName.get(folderObjArg.Owner.id) : folderObjArg.Owner.name;
			wrapperObj.owner.url = PageContext.getPageURL(Pages.app) + '?u=/redirect-to-profile/' + folderObjArg.Owner.id; 
		 }
     	
		if(folderObjArg.LastModifiedDate != NULL) {
			wrapperObj.modifiedAt = folderObjArg.LastModifiedDate.format('yyyy-MM-dd\'T\'HH:mm:ss.SSSZ');
		}
		wrapperObj.modifiedAtDateTime = folderObjArg.LastModifiedDate;
		wrapperObj.url = PageContext.getPageURL(Pages.app) +'?u=/site/' + folderObjArg.Site__c + '/files'  + '#directory=' + wrapperObj.id;
		
		Boolean canChangeFolderName = false;
		Boolean canModifyFolderProperties = false;
		if(String.isBlank(folderObjArg.id) || (mapOfSiteFolders != null && mapOfSiteFolders.containsKey(folderObjArg.id))){
    		canChangeFolderName = false;
    		canModifyFolderProperties = false;
    	} else {
    		Boolean isUserOwnerOrManager = (UserContext.sitesIManageMap.get(folderObjArg.Site__c) != null) ||
    		 								UserContext.Id.equalsIgnoreCase(folderObjArg.Owner.id);
    		if('readwrite'.equalsIgnoreCase(folderObjArg.permissions__c)) {
    			canChangeFolderName = true; 						
    		} else {
    			canChangeFolderName = isUserOwnerOrManager;
    		}
    		if( String.isNotBlank(folderObjArg.Parent_Folder__c) && (folderObjArg.Is_System_Folder__c == false) ) {
    			canModifyFolderProperties = false;	
    		} else {
    			canModifyFolderProperties = isUserOwnerOrManager;
    		}
		}
		
    	if('crm'.equalsIgnoreCase(folderObjArg.type__c) && folderObjArg.Is_System_Folder__c == false) {
    		wrapperObj.canChangeName = false;
    		wrapperObj.canDelete = false;    		
    	} else {
    		wrapperObj.canChangeName = canChangeFolderName;
    	}
    	
    	if('dropbox'.equalsIgnoreCase(folderObjArg.type__c)) {
    		if (SiteContext.isCurrentUserSiteOwner) {
    			wrapperObj.canSetPermissions = true;
    		} else {
    			wrapperObj.canSetPermissions = false;
    		}
		} else if(IntegrationConstants.INTEGRATION_TYPE_GOOGLE_DRIVE .equalsIgnoreCase(folderObjArg.type__c)) {
			wrapperObj.canSetPermissions = false;
			if(folderObjArg.Is_System_Folder__c) {
				wrapperObj.canUnlink = false;			
			} else {
				wrapperObj.canUnlink = SiteContext.canManage();				
			}

    	} else {
			if(folderObjArg.Is_System_Folder__c == false){
				wrapperObj.canSetPermissions = canModifyFolderProperties;
				wrapperObj.canUnlink = SiteContext.canManage() && ('intranet'.equalsIgnoreCase(folderObjArg.type__c) == false);	
			} else {
				wrapperObj.canSetPermissions = false;
				wrapperObj.canUnlink = false;
			}
			
    	}
		
		return wrapperObj;
    }

		private static final Map<String, String> SITE_FOLDERS_MAP_FOR_TRANSLATION = new Map<String, String>{
			'Content Files' => 'files.system_folder.content_files',
			'Question Files' => 'files.system_folder.question_files',
			'Site Videos' => 'files.system_folder.site_videos',
			'Feed Files' => 'files.system_folder.feed_files',
			'Images' => 'files.system_folder.images',
			'Videos' => 'files.system_folder.videos',
			'Files' => 'files.system_folder.files',
			'Albums' => 'files.system_folder.albums' 
		};

		public static String getSystemFolderName(String provider, String sysFolderName){
			String folderName;

			if('intranet'.equals(provider) || 'native_video'.equals(provider)) {
				folderName = LocaleContext.getLabel(UserContext.languageLocaleKey, SITE_FOLDERS_MAP_FOR_TRANSLATION.get(sysFolderName));

			} else {
				folderName = LocaleContext.getLabel(UserContext.languageLocaleKey, 'files.system_folder.' + provider + '_files');
			}

			return folderName;
		}

    
    /**
	* 
	* Purpose:  [Explain what this method does to support the correct operation of its class, and how it does it.]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/
	public static NotificationListingWrapper notificationToWrapper (App_Notification__c notificationObjArg, String origin) {
		Set<String> contentNameSet = new Set<String>{'Event','Page','Album','BlogPost'};
		NotificationListingWrapper notificationWrapObj = new NotificationListingWrapper();
        
        if( !String.isBlank(notificationObjArg.RAB_1__c) && String.isBlank(notificationObjArg.RAB_2__c)){
			if(String.isNotBlank(notificationObjArg.Sent_By__c)){
				notificationWrapObj.user = new NotificationListingWrapper.UserWrapper();
                notificationWrapObj.user = notificationUserWrap(notificationObjArg);
            }
            
        } else if (String.isBlank(notificationObjArg.RAB_1__c) && String.isBlank(notificationObjArg.RAB_2__c) && String.isBlank(notificationObjArg.RAB_3__c)){
            if(String.isNotBlank(notificationObjArg.Sent_By__c)){
                notificationWrapObj.user = new NotificationListingWrapper.UserWrapper();
                notificationWrapObj.user = notificationUserWrap(notificationObjArg);
            }
            
        } else if (notificationObjArg.RAB_1__c==notificationObjArg.RAB_2__c && String.isBlank(notificationObjArg.RAB_3__c)){
            notificationWrapObj.user = new NotificationListingWrapper.UserWrapper();
            notificationWrapObj.user = notificationUserWrap(notificationObjArg);
            
        } else {
			notificationWrapObj.listOfUser = new List<NotificationListingWrapper.UserWrapper>();
			if (String.isNotBlank(notificationObjArg.RAB_1__c) && 
					String.isNotBlank(notificationObjArg.RAB_2__c)) {
				NotificationListingWrapper.UserWrapper userWrapObj = new NotificationListingWrapper.UserWrapper();
				userWrapObj.id = notificationObjArg.RAB_1__c;
				userWrapObj.name =	notificationObjArg.RAB_1__r.Full_Name__c;
				userWrapObj.img = notificationObjArg.RAB_1__r.User__r.smallPhotoUrl.endsWith('005/T') ? 
						null : notificationObjArg.RAB_1__r.User__r.smallPhotoUrl;
				userWrapObj.profileImg = Utility.getUserProfileImgUrl(
						notificationObjArg.RAB_1__r.user__r.MediumPhotoURL, 
						notificationObjArg.RAB_1__r.user__r.FullPhotoURL);
				notificationWrapObj.listOfUser.add(userWrapObj);

				NotificationListingWrapper.UserWrapper userWrap2Obj = new NotificationListingWrapper.UserWrapper();
				userWrap2Obj.id = notificationObjArg.RAB_2__c;
				userWrap2Obj.name =	notificationObjArg.RAB_2__r.Full_Name__c;
				userWrap2Obj.img = notificationObjArg.RAB_2__r.User__r.smallPhotoUrl.endsWith('005/T') ? 
						null : notificationObjArg.RAB_2__r.User__r.smallPhotoUrl;
				userWrap2Obj.profileImg = Utility.getUserProfileImgUrl(
						notificationObjArg.RAB_2__r.user__r.MediumPhotoURL, 
						notificationObjArg.RAB_2__r.user__r.FullPhotoURL);
				notificationWrapObj.listOfUser.add(userWrap2Obj);
			}
			
			if (String.isNotBlank(notificationObjArg.RAB_3__c)) {
				NotificationListingWrapper.UserWrapper userWrapObj = new NotificationListingWrapper.UserWrapper();
				userWrapObj.id = notificationObjArg.RAB_3__c;
				userWrapObj.name =	notificationObjArg.RAB_3__r.Full_Name__c;
				userWrapObj.img = notificationObjArg.RAB_3__r.User__r.smallPhotoUrl.endsWith('005/T') ? 
						null : notificationObjArg.RAB_3__r.User__r.smallPhotoUrl;
				userWrapObj.profileImg = Utility.getUserProfileImgUrl(
						notificationObjArg.RAB_3__r.user__r.MediumPhotoURL, 
						notificationObjArg.RAB_3__r.user__r.FullPhotoURL);
				notificationWrapObj.listOfUser.add(userWrapObj);
			}
		}
		
		notificationWrapObj.isActionable = 'Actionable'.equalsIgnoreCase(notificationObjArg.Type__c);
		notificationWrapObj.category = notificationObjArg.Category__c;

		String redirectPageName;
		String pageToRedirect;
		String contentType = ''; 
		String contentTitle = '';
		String mediaType = '';

		NotificationDao notiDaoObj = new NotificationDao();
		List<String> groupedNotiCategories = notiDaoObj.getGroupedNotificationCategories();
		
		// If need to redirected to content-detail page
		if(String.isNotBlank(notificationObjArg.Content__c) && 
			groupedNotiCategories.contains(notificationObjArg.Category__c) &&
			!'Comment'.equalsIgnoreCase(notificationObjArg.Sub_Type__c) && 
			!'Share'.equalsIgnoreCase(notificationObjArg.Sub_Type__c) &&
			!('Question'.equalsIgnoreCase(notificationObjArg.Object_Type__c) || 'Answer'.equalsIgnoreCase(notificationObjArg.Object_Type__c))) {
				
			if(!ServiceConstants.TYPE_BLOGPOST.equalsIgnoreCase(notificationObjArg.Content__r.type__c)) {
				redirectPageName = Pages.SiteContent;
				contentType = notificationObjArg.Content__r.Type__c.toLowerCase();
			} else {
				redirectPageName = Pages.ProfileBlogPost;
				contentType = notificationObjArg.Content__r.Type__c.toLowerCase();
			}
			
		} else if(contentNameSet.contains(notificationObjArg.object_Type__c) && !'Comment'.equalsIgnoreCase(notificationObjArg.Sub_Type__c) && !'Share'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {

			if (ServiceConstants.TYPE_EVENT.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				redirectPageName = Pages.SiteContent;
				contentType = 'event';
				
			} else if (ServiceConstants.TYPE_PAGE.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				redirectPageName = Pages.SiteContent;
				contentType = 'page';
				
			} else if (ServiceConstants.TYPE_ALBUM.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				redirectPageName = Pages.SiteContent;
				contentType = 'album';
				mediaType = (String.isBlank(notificationObjArg.Object_Id__c) ? 'Photo' : 'Video');

			} else if (ServiceConstants.TYPE_BLOGPOST.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				redirectPageName = Pages.ProfileBlogPost;
				contentType = 'blogpost';
			}
		} else if ('People'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = Pages.ProfileAbout;
			
		} else if ('CollaborationGroupMemberRequest'.equalsIgnoreCase(notificationObjArg.Object_Type__c)
					|| 'PublicSiteMemberRequest'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			
			if (notificationWrapObj.isActionable) {
				redirectPageName = 'NotificationsSiteMemberRequest';
				
			} else {
				redirectPageName = ServiceConstants.SITE_LANDING_PAGE_STRING;
				
			}
			
		} else if ('SiteMember'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = ServiceConstants.SITE_LANDING_PAGE_STRING;
			
		} else if ('CollaborationGroup'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = ServiceConstants.SITE_LANDING_PAGE_STRING;
			
		} else if('PublicSiteMemberRequestAutoApprove'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = 'NotificationsSiteMemberRequestAutoApproved';

		} else if ('Mailer'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = 'newsletter';
		
		} else if ('Social Campaign'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = Pages.campaigns;
			
		} else if ('Subscription'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = notificationWrapObj.isActionable ? 'managesitesubscription' : 'managesegmentsubscription'; 
		
		} else if('Email_Notifcation_Overwrite'.equalsIgnoreCase(notificationObjArg.Category__c)){
			redirectPageName = 'ManageApplicationEmailNotificationsDefault';
		
		} else if('Native_Mobile_Notification_Overwrite'.equalsIgnoreCase(notificationObjArg.Category__c)){
			redirectPageName = 'ManageApplicationNativeMobileAppDefault';	

		} else if('Browser_Notification_Overwrite'.equalsIgnoreCase(notificationObjArg.Category__c)){
			redirectPageName = 'ManageApplicationBrowserDefault';	

		} else if('SMS_Notification_Overwrite'.equalsIgnoreCase(notificationObjArg.Category__c)){
			redirectPageName = 'ManageApplicationSMSDefault';	

		} else if('Feed_Default_Overwrite'.equalsIgnoreCase(notificationObjArg.Category__c)){
			redirectPageName = 'ManageApplicationFeedDefault';

		} else if('Home_Default_Overwrite'.equalsIgnoreCase(notificationObjArg.Category__c)){
			redirectPageName = 'homeDefault';	


		} else if('Sharepoint_Upgraded'.equalsIgnoreCase(notificationObjArg.Category__c)){
            redirectPageName = 'ManageApplicationFileIntegration';

        } else if ('Campaign'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
			redirectPageName = Pages.Campaigns;
		
		} else if ('Csv_Download_Request'.equalsIgnoreCase(notificationObjArg.Category__c)) {
			if(String.isNotBlank(notificationObjArg.Csv_Download_Request__c)){
				redirectPageName = 'managecsvdownload&Id=' + notificationObjArg.Csv_Download_Request__c + '&notificationId=' + notificationObjArg.id;
			}
			
		} else if ('App Analytics'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
			redirectPageName = 'AppManagerAnalytics';
			
		} else if ('Site Analytics'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
			redirectPageName = 'SiteAnalytics';
			
		} else if ('Content Analytics'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
			redirectPageName = 'ContentAnalytics';

		} else if ('Rate Unuseful'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
			if(ServiceConstants.TYPE_BLOGPOST.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				redirectPageName =  Pages.ProfileBlogPost;
				contentType = 'blogpost';
			} else {
				redirectPageName = Pages.SiteContent;
				contentType = notificationObjArg.Object_Type__c.toLowerCase();
			}
			
		} else if(String.isNotBlank(notificationObjArg.Content__c) && String.isNotBlank(notificationObjArg.Sub_Type__c) && ('Comment'.equalsIgnoreCase(notificationObjArg.Sub_Type__c) || 'Share'.equalsIgnoreCase(notificationObjArg.Sub_Type__c))){
			pageToRedirect =  Pages.HomeFeedSinglePost;
		
		} else if('Newsletter'.equalsIgnoreCase(notificationObjArg.Object_Type__c) || 'Newsletterv2'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			redirectPageName = SimpplrContext.newsletterPlusEnabled ? 'Newsletterv2' : 'Newsletter';

		} else if('NewSiteOnboarding'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
				redirectPageName = 'Onboarding';

		} else if('NewHireGraduated'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			redirectPageName = 'Onboarding';

		} else if('Onboarding'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			redirectPageName = 'ManageContent';

		} else if('Question'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			redirectPageName = 'QuestionDetail';

		} else if('Answer'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			redirectPageName = 'AnswerDetail';
		
		} else if ('video'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = 'manageVideo';
			
		} else if ('CnI_Initiative'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = 'CnIInitiative';
			
		} else if ('CnI_Campaign'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			redirectPageName = 'CnICampaign';
			
		} else if ('survey'.equalsIgnoreCase(notificationObjArg.category__c)) {
			redirectPageName = 'survey';
		} else if ('recognition_hub'.equalsIgnoreCase(notificationObjArg.category__c)) {
			redirectPageName = 'recognition_hub';
		} else {
			redirectPageName = 'HomeFeedSinglePost';
		} 

		if(String.isNotBlank(notificationObjArg.Content__r.Type__c)) {
			contentType = notificationObjArg.Content__r.Type__c.toLowerCase();
			contentTitle = notificationObjArg.Content__r.Title__c;
		}

		if (String.isBlank(notificationObjArg.Content__c) && 
				('Content_For_Review'.equalsIgnoreCase(notificationObjArg.Category__c) 
				|| 'Content_Expired'.equalsIgnoreCase(notificationObjArg.Category__c))) {
			redirectPageName = 'ManageContent';
			
		}

		Map<String,String> mapOfURLParameters = new Map<String,String> ();
		notificationWrapObj.isSeen = false;
		notificationWrapObj.isRead = false;
		
		if ('Information'.equalsIgnoreCase(notificationObjArg.Type__c)) {
			 
			String peopleId = notificationObjArg.Sent_By__c;
			
			if ('BlogPost'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				peopleId = notificationObjArg.Sent_To__c;
			}

			if(String.isNotBlank(notificationObjArg.Content__c) && String.isNotBlank(notificationObjArg.Sub_Type__c) && ('Comment'.equalsIgnoreCase(notificationObjArg.Sub_Type__c) || 'Share'.equalsIgnoreCase(notificationObjArg.Sub_Type__c))){				
				mapOfURLParameters.put('pageToRedirect', Pages.HomeFeedSinglePost);
				mapOfURLParameters.put('contentId', notificationObjArg.content__c);
				mapOfURLParameters.put('notificationId', notificationObjArg.id);
				mapOfURLParameters.put('origin', 'pn');
				if('Comment'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
					mapOfURLParameters.put('feedId', notificationObjArg.Parent_Object_id__c);
					mapOfURLParameters.put('feedCommentId', notificationObjArg.Object_Id__c);
				} else {
					mapOfURLParameters.put('feedId', notificationObjArg.Object_Id__c);
				}
			
			}
			else {
				mapOfURLParameters = getMapOfURLParameters(peopleId, notificationObjArg, redirectPageName, origin);
			}
			if (notificationObjArg.Is_New__c) {
				notificationWrapObj.state	= 'new'; 	
			
			} else if (notificationObjArg.Is_Read__c) {
				notificationWrapObj.state	= 'read';
				notificationWrapObj.isRead = true;
			
			} else {
				notificationWrapObj.state	= 'seen';
				notificationWrapObj.isSeen = true;
			}

			if ('CollaborationGroupMemberRequest'.equalsIgnoreCase(notificationObjArg.Object_Type__c) || 'PublicSiteMemberRequest'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				
				if (NotificationDao.ACTION_APPROVE.equals(notificationObjArg.Status__c)) {
					notificationWrapObj.url = PageContext.getPageURL(Pages.NotificationRedirectionServer, mapOfURLParameters);
					notificationWrapObj.stamp = 'approved';		
				}
				
			} else if ('Segment'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				notificationWrapObj.url = null;
		
			} else if ('SiteMember'.equalsIgnoreCase(notificationObjArg.Object_Type__c) || 'PublicSiteMemberRequestAutoApprove'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				notificationWrapObj.url = PageContext.getPageURL(Pages.NotificationRedirectionServer, mapOfURLParameters);
			
			} else if('ServiceNow'.equalsIgnoreCase(notificationObjArg.Category__c)) {
				notificationWrapObj.url = SimpplrContext.serviceNowInstanceUrl +'/incident.do?sys_id='+notificationObjArg.External_Id__c+'&sysparm_view=ess&sysparm_record_target=incident&sysparm_record_row=1&sysparm_record_rows=1&sysparm_record_list=caller_id%3Djavascript%3Ags.getUserID%28%29%5Eactive%3Dtrue%5E';
			
			} else if('External'.equalsIgnoreCase(notificationObjArg.Category__c)) {
				notificationWrapObj.url = notificationObjArg.External_URL__c + '&notificationId=' + notificationObjArg.id; 

			} else if('Event_Deleted'.equalsIgnoreCase(notificationObjArg.Category__c)) {
				notificationWrapObj.url = ''; 

			} else if(String.isNotBlank(notificationObjArg.Content__c) && String.isNotBlank(notificationObjArg.Sub_Type__c) && ('Comment'.equalsIgnoreCase(notificationObjArg.Sub_Type__c) || 'Share'.equalsIgnoreCase(notificationObjArg.Sub_Type__c))){
				notificationWrapObj.url = PageContext.getPageURL(Pages.PageRedirector , mapOfURLParameters);
			
			} else {
				notificationWrapObj.url = PageContext.getPageURL(Pages.NotificationRedirectionServer, mapOfURLParameters);
				
			}
		} else {
			mapOfURLParameters = getMapOfURLParameters('', notificationObjArg, redirectPageName, origin);
			
			if ('Must Read'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
				if(notificationObjArg.Action_On__c != null) {
					notificationWrapObj.state	= 'actioned';
					notificationWrapObj.stamp = 'Read';
					notificationWrapObj.isRead = true;
					notificationWrapObj.isSeen = true;
				} else {
					notificationWrapObj.state	= 'new';
					notificationWrapObj.stamp =  'Unread';
				}
			} else {
				if (notificationObjArg.Is_New__c) {
					notificationWrapObj.state	= 'new';
					notificationWrapObj.stamp = 'pending';
				} else if (notificationObjArg.Action_By__c != null) {
					notificationWrapObj.state	= 'actioned';
					
					if (NotificationDao.ACTION_APPROVE.equalsIgnoreCase(notificationObjArg.Status__c)) {
						notificationWrapObj.stamp = 'approved';
					
					} else if (NotificationDao.ACTION_REJECTED.equalsIgnoreCase(notificationObjArg.Status__c)) {
						notificationWrapObj.stamp = 'rejected';
					}
					
				} else {
					notificationWrapObj.stamp = 'pending';
					notificationWrapObj.state	= 'seen';
					notificationWrapObj.isSeen = true;
				}
			}
			
			if('External'.equalsIgnoreCase(notificationObjArg.Category__c)) {
				notificationWrapObj.url = notificationObjArg.External_URL__c + '&notificationId=' + notificationObjArg.id; 

			} else {
				notificationWrapObj.url = PageContext.getPageURL(Pages.NotificationRedirectionServer, mapOfURLParameters);
				notificationWrapObj.privateSiteRequestId = notificationObjArg.Object_Id__c;
			}
		}

		String siteName = String.isBlank(notificationObjArg.Simpplr_Site__c) ? '' : notificationObjArg.Simpplr_Site__r.name;
 
		notificationWrapObj.text = String.isBlank(notificationObjArg.Category__c) ? notificationObjArg.Submitter_Comment__c :
									getInAppNotificationtext(UserContext.languageLocaleKey, notificationObjArg, siteName, 
										contentType, contentTitle, mediaType, notificationWrapObj.stamp);

		notificationWrapObj.id	= notificationObjArg.id;
		DateTime dateTimeValue = notificationObjArg.Created_DateTime__c == null ? notificationObjArg.createdDate : notificationObjArg.Created_DateTime__c;
		notificationWrapObj.createdAt = DateTimeValue.format('yyyy-MM-dd\'T\'HH:mm:ss.SSSZ');
		
		if (String.isNotBlank(notificationObjArg.Action_By__c) &&
				 !'Information'.equalsIgnoreCase(notificationObjArg.Type__c)) {
			notificationWrapObj.actionedBy = new NotificationListingWrapper.UserWrapper();
			notificationWrapObj.actionedBy.id = notificationObjArg.Action_By__c;
			notificationWrapObj.actionedBy.name = notificationObjArg.Action_By__r.Full_Name__c;
			notificationWrapObj.actionedBy.img = notificationObjArg.Action_By__r.User__r.SmallPhotoUrl.endsWith('005/T') ? null : notificationObjArg.Action_By__r.User__r.SmallPhotoUrl;
			notificationWrapObj.actionedBy.profileImg = Utility.getUserProfileImgUrl(notificationObjArg.Action_By__r.user__r.MediumPhotoURL, notificationObjArg.Action_By__r.user__r.FullPhotoURL);
			String peopleId = notificationObjArg.Action_By__c;
			notificationWrapObj.actionedBy.url = PageContext.getPageURL(Pages.app) + '?u=/people/' + peopleId;
			notificationWrapObj.state = 'actioned';
		}
		
		if (String.isNotBlank(notificationObjArg.Action_By__c) && 
				'Information'.equalsIgnoreCase(notificationObjArg.Type__c) && 
				notificationObjArg.Is_New__c ) {
			notificationWrapObj.state = 'new';
		
		} else if (String.isNotBlank(notificationObjArg.Action_By__c) && 
				'Information'.equalsIgnoreCase(notificationObjArg.Type__c) && 
				notificationObjArg.Is_Read__c ) {
			notificationWrapObj.state = 'read';
			notificationWrapObj.isRead = true;
		}
		
		return notificationWrapObj;
	}
	
	public static NotificationListingWrapper.UserWrapper notificationUserWrap(App_Notification__c notificationObjArg){
        NotificationListingWrapper.UserWrapper userWrap = new NotificationListingWrapper.UserWrapper();
        userWrap.id = notificationObjArg.Sent_By__c;
        userWrap.name = notificationObjArg.Sent_By__r.Full_Name__c;
        userWrap.img  = notificationObjArg.Sent_By__r.User__r.smallPhotoUrl.endsWith('005/T') ? null : notificationObjArg.Sent_By__r.User__r.smallPhotoUrl;
        userWrap.profileImg = Utility.getUserProfileImgUrl(notificationObjArg.Sent_By__r.user__r.MediumPhotoURL, notificationObjArg.Sent_By__r.user__r.FullPhotoURL);
        
        return userWrap;
    }
	/**
	* 
	* Purpose:  [Explain what this method does to support the correct operation of its class, and how it does it.]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/
	public static NotificationListingWrapper notificationToWrapperForMobile(App_Notification__c notificationObjArg, String languageLocaleKey) {
		String contentType = null;
		String contentTitle = null;
		String mediaType = null;
		
		NotificationListingWrapper notificationWrapObj = new NotificationListingWrapper();
		if( !String.isBlank(notificationObjArg.RAB_1__c) && String.isBlank(notificationObjArg.RAB_2__c)){
			if(String.isNotBlank(notificationObjArg.Sent_By__c)){
				notificationWrapObj.user = new NotificationListingWrapper.UserWrapper();
                notificationWrapObj.user = notificationUserWrap(notificationObjArg);
            }
            
        } else if (String.isBlank(notificationObjArg.RAB_1__c) && String.isBlank(notificationObjArg.RAB_2__c) && String.isBlank(notificationObjArg.RAB_3__c)){
            if(String.isNotBlank(notificationObjArg.Sent_By__c)){
                notificationWrapObj.user = new NotificationListingWrapper.UserWrapper();
                notificationWrapObj.user = notificationUserWrap(notificationObjArg);
            }
            
        } else if (notificationObjArg.RAB_1__c==notificationObjArg.RAB_2__c && String.isBlank(notificationObjArg.RAB_3__c)){
            notificationWrapObj.user = new NotificationListingWrapper.UserWrapper();
            notificationWrapObj.user = notificationUserWrap(notificationObjArg);
            
        } else {
			notificationWrapObj.listOfUser = new List<NotificationListingWrapper.UserWrapper>();
			if (String.isNotBlank(notificationObjArg.RAB_1__c) && 
					String.isNotBlank(notificationObjArg.RAB_2__c)) {
				NotificationListingWrapper.UserWrapper userWrapObj = new NotificationListingWrapper.UserWrapper();
				userWrapObj.id = notificationObjArg.RAB_1__c;
				userWrapObj.name =	notificationObjArg.RAB_1__r.Full_Name__c;
				userWrapObj.img = notificationObjArg.RAB_1__r.User__r.smallPhotoUrl.endsWith('005/T') ? 
						null : notificationObjArg.RAB_1__r.User__r.smallPhotoUrl;
				userWrapObj.profileImg = Utility.getUserProfileImgUrl(
						notificationObjArg.RAB_1__r.user__r.MediumPhotoURL, 
						notificationObjArg.RAB_1__r.user__r.FullPhotoURL);
				notificationWrapObj.listOfUser.add(userWrapObj);

				NotificationListingWrapper.UserWrapper userWrap2Obj = new NotificationListingWrapper.UserWrapper();
				userWrap2Obj.id = notificationObjArg.RAB_2__c;
				userWrap2Obj.name =	notificationObjArg.RAB_2__r.Full_Name__c;
				userWrap2Obj.img = notificationObjArg.RAB_2__r.User__r.smallPhotoUrl.endsWith('005/T') ? 
						null : notificationObjArg.RAB_2__r.User__r.smallPhotoUrl;
				userWrap2Obj.profileImg = Utility.getUserProfileImgUrl(
						notificationObjArg.RAB_2__r.user__r.MediumPhotoURL, 
						notificationObjArg.RAB_2__r.user__r.FullPhotoURL);
				notificationWrapObj.listOfUser.add(userWrap2Obj);
			}
			
			if (String.isNotBlank(notificationObjArg.RAB_3__c)) {
				NotificationListingWrapper.UserWrapper userWrapObj = new NotificationListingWrapper.UserWrapper();
				userWrapObj.id = notificationObjArg.RAB_3__c;
				userWrapObj.name =	notificationObjArg.RAB_3__r.Full_Name__c;
				userWrapObj.img = notificationObjArg.RAB_3__r.User__r.smallPhotoUrl.endsWith('005/T') ? 
						null : notificationObjArg.RAB_3__r.User__r.smallPhotoUrl;
				userWrapObj.profileImg = Utility.getUserProfileImgUrl(
						notificationObjArg.RAB_3__r.user__r.MediumPhotoURL, 
						notificationObjArg.RAB_3__r.user__r.FullPhotoURL);
				notificationWrapObj.listOfUser.add(userWrapObj);
			}
		}
		notificationWrapObj.sound = 'default';
		notificationWrapObj.badge = Integer.valueOf(notificationObjArg.Sent_By__r.New_Notification_Count__c);
		notificationWrapObj.isActionable = 'Actionable'.equalsIgnoreCase(notificationObjArg.Type__c);
		notificationWrapObj.contentType = notificationObjArg.Object_Type__c;
		notificationWrapObj.category = notificationObjArg.Category__c;
		notificationWrapObj.isclickable = isNotificationClickable(notificationObjArg);
		Set<String> contentTypeSet = new Set<String>{'News','Event', 'Page', 'Album', 'BlogPost'};
		if(contentTypeSet.contains(notificationObjArg.Object_Type__c) && notificationObjArg.Parent_Object_Id__c == null){
			notificationWrapObj.type = 'content';
			if('My_Content_Share'.equalsIgnoreCase(notificationObjArg.Category__c)){
				notificationWrapObj.contentId = notificationObjArg.Content__c;
				notificationWrapObj.feedId = notificationObjArg.Object_Id__c;
			} else {
				notificationWrapObj.contentId = notificationObjArg.Object_Id__c;
			}
			
			notificationWrapObj.isMustRead = 'Must Read'.equalsIgnoreCase(notificationObjArg.Sub_Type__c) ? true : false;

			contentType = (notificationObjArg.Object_Type__c).toLowerCase();
		} else if(notificationObjArg.Parent_Object_Id__c != null && 'Album'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			notificationWrapObj.type = 'album_media';
			notificationWrapObj.contentId = notificationObjArg.Parent_Object_Id__c;
			notificationWrapObj.fileId = notificationObjArg.Object_Id__c;

			contentType = (notificationObjArg.Object_Type__c).toLowerCase();
			mediaType = (String.isBlank(notificationWrapObj.fileId) ? 'Photo' : 'Video');
		} else if('Endorse'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)){
			notificationWrapObj.type = 'endorse';
			notificationWrapObj.peopleId = notificationObjArg.Object_Id__c;
		} else if('Follow'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)){
			notificationWrapObj.type = 'follow';
			notificationWrapObj.peopleId = notificationObjArg.Sent_By__c;
		} else if(notificationObjArg.Object_Id__c != null && 'Survey'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)){
			notificationWrapObj.type = 'survey';
			notificationWrapObj.objectId = notificationObjArg.Object_Id__c;
		} else if('CollaborationGroup'.equalsIgnoreCase(notificationObjArg.Object_Type__c) 
			|| 'CollaborationGroupMemberRequest'.equalsIgnoreCase(notificationObjArg.Object_Type__c)
			|| 'PublicSiteMemberRequest'.equalsIgnoreCase(notificationObjArg.Object_Type__c)
			|| 'SiteMember'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			
			notificationWrapObj.type = 'site';
			notificationWrapObj.siteId = notificationObjArg.Simpplr_Site__c;
			
			if('Actionable'.equalsIgnoreCase(notificationObjArg.Type__c) &&
				('CollaborationGroupMemberRequest'.equalsIgnoreCase(notificationObjArg.Object_Type__c) || 'PublicSiteMemberRequest'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) 
				&& 'Pending'.equalsIgnoreCase(notificationObjArg.Status__c)){
				notificationWrapObj.privateSiteRequestId = notificationObjArg.Object_Id__c;	
			}
		} else if('File'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			notificationWrapObj.type = 'file';
			notificationWrapObj.fileId = notificationObjArg.Object_Id__c;
		
		} else if('ContentFeedItem'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
			notificationWrapObj.type = 'content_feed';	
			notificationWrapObj.feedId = notificationObjArg.Object_id__c;	
		
		} else if('ContentFeedComment'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
			notificationWrapObj.type = 'content_feed';
			notificationWrapObj.feedId = notificationObjArg.Parent_Object_id__c;
			notificationWrapObj.feedCommentId = notificationObjArg.Object_id__c;
		
		} else if('FeedItem'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
			notificationWrapObj.type = 'home_feed';	
			notificationWrapObj.feedId = notificationObjArg.Object_id__c;	
			
		} else if('FeedComment'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
			notificationWrapObj.type = 'home_feed';
			notificationWrapObj.feedId = notificationObjArg.Parent_Object_id__c;
			notificationWrapObj.feedCommentId = notificationObjArg.Object_id__c;
		
		} else if('Social  Campaign'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
			notificationWrapObj.type = 'social_campaign';
			//For Weekly Campaign notifications, Object_Id__c is blank
			if(String.isNotBlank(notificationObjArg.Object_Id__c)) {
				notificationWrapObj.campaignId = notificationObjArg.Object_Id__c;
			}
		} else if('Newsletter'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			notificationWrapObj.type = 'newsletter';
			notificationWrapObj.newsletterId = notificationObjArg.Object_Id__c;
		} else if('Question'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			notificationWrapObj.type = 'question';
			notificationWrapObj.questionId = notificationObjArg.Object_Id__c;
		} else if('Answer'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
			notificationWrapObj.type = 'answer';
			notificationWrapObj.answerId = notificationObjArg.Object_Id__c;
			notificationWrapObj.questionId = notificationObjArg.Parent_Object_Id__c;
		} else if(notificationObjArg.Object_Id__c != null && 'Survey'.equalsIgnoreCase(notificationObjArg.category__c)){
			notificationWrapObj.type = 'survey';
			notificationWrapObj.objectId = notificationObjArg.Object_Id__c;
		} else if('recognition'.equalsIgnoreCase(notificationObjArg.category__c) || 'recognition_hub'.equalsIgnoreCase(notificationObjArg.category__c)){
			// this specific change is made to align with mobile notification redirections
			notificationWrapObj.type = notificationObjArg.category__c;
			notificationWrapObj.category = notificationObjArg.object_Type__c;
			notificationWrapObj.objectId = notificationObjArg.Object_Id__c;
			notificationWrapObj.contentType = ''; //not required for Recogniton 
		}

		if(String.isNotBlank(notificationObjArg.Content__r.Type__c)) {
			contentType = notificationObjArg.Content__r.Type__c.toLowerCase();
			contentTitle = notificationObjArg.Content__r.Title__c;
		}

		notificationWrapObj.isSeen = false;
		notificationWrapObj.isRead = false;
		if ('Information'.equalsIgnoreCase(notificationObjArg.Type__c)) {
			
			if (notificationObjArg.Is_New__c) {
				notificationWrapObj.state	= 'new'; 
			} else if (notificationObjArg.Is_Read__c) {
				notificationWrapObj.state	= 'read';
				notificationWrapObj.isRead = true;
			} else {
				notificationWrapObj.state	= 'seen';
				notificationWrapObj.isSeen = true;
			}
			if(NotificationDao.ACTION_APPROVE.equalsIgnoreCase(notificationObjArg.Status__c)) {
				notificationWrapObj.stamp = 'approved';
			} else if (NotificationDao.ACTION_REJECTED.equalsIgnoreCase(notificationObjArg.Status__c)) {
				notificationWrapObj.stamp = 'rejected';
			}
		} else {
			if (notificationObjArg.Is_New__c) {
				notificationWrapObj.state	= 'new';
				notificationWrapObj.stamp = 'pending';
			} else if(notificationObjArg.Action_By__c != null) {
				notificationWrapObj.state	= 'actioned';
				if(NotificationDao.ACTION_APPROVE.equalsIgnoreCase(notificationObjArg.Status__c)) {
					notificationWrapObj.stamp = 'approved';
				} else if (NotificationDao.ACTION_REJECTED.equalsIgnoreCase(notificationObjArg.Status__c)) {
					notificationWrapObj.stamp = 'rejected';
				}
			} else {
				notificationWrapObj.stamp = 'pending';
				notificationWrapObj.state	= 'seen';
				notificationWrapObj.isSeen = true;
			}
			
		}
		
		String siteName = String.isBlank(notificationObjArg.Simpplr_Site__c) ? '' : notificationObjArg.Simpplr_Site__r.name;
		if(String.isBlank(notificationObjArg.Category__c)) {
			notificationWrapObj.text = 	notificationObjArg.Submitter_Comment__c;
		} else if(String.isBlank(languageLocaleKey)){
			notificationWrapObj.text = getInAppNotificationtext('en_US', notificationObjArg,
									 															siteName, contentType, contentTitle, mediaType, notificationWrapObj.stamp)
																								.replace('{{fullName}} ', '')
																								.replace('{{fullName}}', '');

		} else {
			notificationWrapObj.text = getInAppNotificationtext(languageLocaleKey, notificationObjArg,
									 															siteName, contentType, contentTitle, mediaType, notificationWrapObj.stamp);
		}

		notificationWrapObj.id	= notificationObjArg.id;
		notificationWrapObj.siteId = notificationObjArg.Simpplr_Site__c;
		DateTime dateTimeValue = notificationObjArg.Created_DateTime__c == null ? notificationObjArg.createdDate : notificationObjArg.Created_DateTime__c;
		notificationWrapObj.createdAt = DateTimeValue.format('yyyy-MM-dd\'T\'HH:mm:ss.SSSZ');
		
		if(String.isNotBlank(notificationObjArg.Action_By__c) &&
				 !'Information'.equalsIgnoreCase(notificationObjArg.Type__c)) {
			notificationWrapObj.actionedBy = new NotificationListingWrapper.UserWrapper();
			notificationWrapObj.actionedBy.id = notificationObjArg.Action_By__c;
			notificationWrapObj.actionedBy.name =	notificationObjArg.Action_By__r.Full_Name__c;
			notificationWrapObj.actionedBy.img	= notificationObjArg.Action_By__r.User__r.SmallPhotoUrl.endsWith('005/T') ? null : notificationObjArg.Action_By__r.User__r.SmallPhotoUrl;
			notificationWrapObj.actionedBy.profileImg	= Utility.getUserProfileImgUrl(notificationObjArg.Action_By__r.user__r.MediumPhotoURL, notificationObjArg.Action_By__r.user__r.FullPhotoURL);
			String peopleId = notificationObjArg.Action_By__c;
			notificationWrapObj.actionedBy.url = PageContext.getPageURL(Pages.app) + '?u=/people/' + peopleId;
			notificationWrapObj.state = 'actioned';
		}
		if(String.isNotBlank(notificationObjArg.Action_By__c) && 'Information'.equalsIgnoreCase(notificationObjArg.Type__c) && notificationObjArg.Is_New__c ) {
			notificationWrapObj.state = 'new';
		} else if(String.isNotBlank(notificationObjArg.Action_By__c) && 'Information'.equalsIgnoreCase(notificationObjArg.Type__c) && notificationObjArg.Is_Read__c ) {
			notificationWrapObj.state = 'read';
			notificationWrapObj.isRead = true;
		}
		if('External'.equalsIgnoreCase(notificationObjArg.Category__c)) {
			notificationWrapObj.url = notificationObjArg.External_URL__c + '&notificationId=' + notificationObjArg.id; 
		}
		return notificationWrapObj;
	}
	
	
	
	/**
   * 
   * Purpose:  [Explain what this method does to support the correct operation of its class, and how it does it.]
   * Parameters:
   *      parameter_name -- [Explanation of the purpose of this parameter to the method.
   *      
   * Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
   */
	
	@testVisible
	private static Boolean isNotificationClickable(App_Notification__c notificationObjArg){
		Boolean isClickable = true;
		if('Information'.equalsIgnoreCase(notificationObjArg.Type__c)){
			
			if('Rejected'.equalsIgnoreCase(notificationObjArg.Status__c)){
				isClickable = false;	
			} 
		}
		return isClickable;
	}
	/**
   * 
   * Purpose:  [Explain what this method does to support the correct operation of its class, and how it does it.]
   * Parameters:
   *      parameter_name -- [Explanation of the purpose of this parameter to the method.
   *      
   * Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
   */
	private static Map<String,String> getMapOfURLParameters(String peopleId, App_Notification__c notificationObjArg, String redirectPageName, String origin){
		Set<String> contentNameSet = new Set<String>{'News','Event','Page','Album','BlogPost'};
		String pageParameters = '';
		Map<String,String> mapOfURLParameters =  new Map<String,String>{'redirectPageName' 	=>	redirectPageName, 
							   											'notificationId' 	=>	notificationObjArg.Id
																		   };
																		   
		NotificationDao notiDaoObj = new NotificationDao();
		List<String> groupedNotiCategories = notiDaoObj.getGroupedNotificationCategories();
		
		// If need to redirected to content-detail page
		if(String.isNotBlank(notificationObjArg.Content__c) && groupedNotiCategories.contains(notificationObjArg.Category__c) && !'share'.equalsIgnoreCase(notificationObjArg.Sub_Type__c) &&
			!('Question'.equalsIgnorecase(notificationObjArg.Object_Type__c) || 'Answer'.equalsIgnorecase(notificationObjArg.Object_Type__c))) {

			if((notificationObjArg.Content__r.Type__c.toLowerCase()).equalsIgnorecase('BlogPost')) {
				mapOfURLParameters.put('contentId', notificationObjArg.Content__c);
				mapOfURLParameters.put('profileId', peopleId);
				
			} else{
				mapOfURLParameters.put('contentId', notificationObjArg.Content__c);
				mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
				mapOfURLParameters.put('type', notificationObjArg.Content__r.Type__c.toLowerCase());
			}

		} else if (contentNameSet.contains(notificationObjArg.object_Type__c) && 'share'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) { 
			mapOfURLParameters.put('redirectPageName', Pages.HomeFeedSinglePost);
			mapOfURLParameters.put('feedId', notificationObjArg.Object_Id__c);
			mapOfURLParameters.put('contentId', notificationObjArg.content__c);

		} else if (contentNameSet.contains(notificationObjArg.Object_Type__c)) {
			if(notificationObjArg.Object_Type__c.equalsIgnorecase('BlogPost')) {
				mapOfURLParameters.put('contentId', notificationObjArg.Object_Id__c);
				mapOfURLParameters.put('profileId', peopleId);

			} else if(String.isNotBlank(notificationObjArg.Parent_Object_Id__c)){
				mapOfURLParameters.put('fileId', notificationObjArg.Object_Id__c);
				mapOfURLParameters.put('parentObjectID', notificationObjArg.Parent_Object_Id__c);
				mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
				mapOfURLParameters.put('type', notificationObjArg.Object_Type__c.toLowerCase());
			
			} else{
				
				mapOfURLParameters.put('contentId', notificationObjArg.Object_Id__c);
				mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
				mapOfURLParameters.put('type', notificationObjArg.Object_Type__c.toLowerCase());
			}

			if('Must Read'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
				mapOfURLParameters.put('mustRead', 'true');
			
			} else if ('Rate Unuseful'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
				mapOfURLParameters.put('openUsefulHistory', 'true');
				
			} else if('Content Update'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
				mapOfURLParameters.put('showContentNotification', notificationObjArg.guid__c);
			}

			if(NotificationDao.ACTION_REJECTED.equalsIgnoreCase(notificationObjArg.Status__c)) {
				mapOfURLParameters.put('openModerationHistory', 'true');
			}	

		} else if('survey'.equalsIgnoreCase(notificationObjArg.category__c) && notificationObjArg.Object_Id__c != null){
			mapOfURLParameters.put('objectId', notificationObjArg.Object_Id__c);
			mapOfURLParameters.put('subType', notificationObjArg.sub_Type__c);
		} else if('recognition_hub'.equalsIgnoreCase(notificationObjArg.category__c) && notificationObjArg.Object_Id__c != null){
			mapOfURLParameters.put('objectId', notificationObjArg.Object_Id__c);
			mapOfURLParameters.put('objectType', notificationObjArg.object_Type__c);
		} else {
			
			if('CollaborationGroupMemberRequest'.equalsIgnorecase(notificationObjArg.Object_Type__c) 
				|| 'PublicSiteMemberRequest'.equalsIgnoreCase(notificationObjArg.Object_Type__c)
				|| 'SiteMember'.equalsIgnoreCase(notificationObjArg.Object_Type__c)){
				
				if(redirectPageName.equalsIgnoreCase('NotificationsSiteMemberRequest')){
					mapOfURLParameters.put('requestId', notificationObjArg.Object_Id__c);
					mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
				
				}else{
					mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
				
				}
			}else if('Site'.equalsIgnorecase(notificationObjArg.Object_Type__c) || 'PublicSiteMemberRequestAutoApprove'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
					mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
			
			} else if('CollaborationGroup'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
					mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
			
			} else if('Mailer'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
					if('NL OnHold'.equalsIgnoreCase(notificationObjArg.Sub_Type__c)) {
						mapOfURLParameters.put('newsletterId', notificationObjArg.Object_Id__c);
					}
			}  else if('Newsletter'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
					mapOfURLParameters.put('newsletterId', notificationObjArg.Object_Id__c);
			} else if('subscription'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				mapOfURLParameters.put('subscriptionId', notificationObjArg.Object_Id__c);
				mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
				
			} else if('Social  Campaign'.equalsIgnoreCase(notificationObjArg.Object_Type__c)) {
				//For Weekly Campaign notifications, Object_Id__c is blank
				if(String.isNotBlank(notificationObjArg.Object_Id__c)) {
					mapOfURLParameters.put('campaignId', notificationObjArg.Object_Id__c);
				}
			}else if('FeedItem'.equalsIgnorecase(notificationObjArg.Object_Type__c) ||
					'ContentFeedItem'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
				mapOfURLParameters.put('feedId', notificationObjArg.Object_Id__c);
				if(String.isNotBlank(notificationObjArg.Simpplr_Site__c)){
					mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
				}
				
			}else if('FeedComment'.equalsIgnorecase(notificationObjArg.Object_Type__c) ||
					'ContentFeedComment'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
				if(String.isBlank(notificationObjArg.Parent_Object_Id__c)) {
					mapOfURLParameters.put('feedId', notificationObjArg.Object_Id__c);
					
				} else {
					mapOfURLParameters.put('feedId', notificationObjArg.Parent_Object_Id__c);
					mapOfURLParameters.put('feedCommentId', notificationObjArg.Object_Id__c);
				}
					
			} else if('Question'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
				mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
				mapOfURLParameters.put('contentId', notificationObjArg.Content__c);
				mapOfURLParameters.put('type', notificationObjArg.Content__r?.Type__c?.toLowerCase());
				if(('New_Question'.equalsIgnoreCase(notificationObjArg.Category__c)
					|| 'New_Question_In_Content'.equalsIgnoreCase(notificationObjArg.Category__c)) && (notificationObjArg.Action_Count__c != null && notificationObjArg.Action_Count__c > 1)) {

				} else {
					mapOfURLParameters.put('questionId', notificationObjArg.Object_Id__c);
				}
				
			} else if('Answer'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
				mapOfURLParameters.put('siteId', notificationObjArg.Simpplr_Site__c);
				if(('New_Answer_To_Question'.equalsIgnoreCase(notificationObjArg.Category__c)
					|| 'New_Answer_In_Content'.equalsIgnoreCase(notificationObjArg.Category__c)) && (notificationObjArg.Action_Count__c != null && notificationObjArg.Action_Count__c > 1)) {
					mapOfURLParameters.put('redirectPageName', 'QuestionDetail');
					mapOfURLParameters.put('questionId', notificationObjArg.Parent_Object_Id__c);
				} else {
					mapOfURLParameters.put('answerId', notificationObjArg.Object_Id__c);
				}
				
			} else if('CnI_Initiative'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
				mapOfURLParameters.put('initiativeId', notificationObjArg.Object_Id__c);
				
			} else if('CnI_Campaign'.equalsIgnorecase(notificationObjArg.Object_Type__c)) {
				mapOfURLParameters.put('campaignId', notificationObjArg.Object_Id__c);
				mapOfURLParameters.put('initiativeId', notificationObjArg.Parent_Object_Id__c);

			} else if (String.isNotBlank(notificationObjArg.Object_Id__c)){
				mapOfURLParameters.put('profileId', notificationObjArg.Object_Id__c);
			
			} else if ('Content_For_Review'.equalsIgnoreCase(notificationObjArg.Category__c)) { 
				mapOfURLParameters.put('status', 'validationRequired');
				mapOfURLParameters.put('filter', 'managing');

			} else if ('Content_Expired'.equalsIgnoreCase(notificationObjArg.Category__c)) { 
				mapOfURLParameters.put('status', 'validationExpired');
				mapOfURLParameters.put('filter', 'managing');

			} else if ('New_Site_Onboarding_Content'.equalsIgnoreCase(notificationObjArg.Category__c)) { 
				mapOfURLParameters.put('sortBy', 'dateadded');
				mapOfURLParameters.put('referralSource', 'in_app_notification');
			} else if ('New_Hire_Graduated'.equalsIgnoreCase(notificationObjArg.Category__c)) { 
				mapOfURLParameters.put('referralSource', 'in_app_notification');
			}
		}
		
		if(String.isNotBlank(origin)) {
			mapOfURLParameters.put('origin', origin);
		}
		return mapOfURLParameters;
	}
    
    public static FileDetailWrapper convertContentDocumentToFileDetailWrapper(ContentDocument contentDocumentObj) {
		FileDetailWrapper fileDetailWrapperObj = new FileDetailWrapper();
		fileDetailWrapperObj.Id = contentDocumentObj.Id;
		fileDetailWrapperObj.fileType = Utility.getFileType(contentDocumentObj.LatestPublishedVersion.fileType);
		fileDetailWrapperObj.type = fileDetailWrapperObj.fileType;
		fileDetailWrapperObj.name = contentDocumentObj.title;
		String fileExtension = contentDocumentObj.LatestPublishedVersion.fileExtension;
		fileDetailWrapperObj.fileExtension = fileExtension;
		fileDetailWrapperObj.pathOnClient = contentDocumentObj.LatestPublishedVersion.pathOnClient;
		fileDetailWrapperObj.contentDocumentId = contentDocumentObj.Id;
		fileDetailWrapperObj.contentVersionId = contentDocumentObj.LatestPublishedVersion.Id;
		fileDetailWrapperObj.versionNumber = contentDocumentObj.LatestPublishedVersion.VersionNumber;
		fileDetailWrapperObj.fileSize = Utility.byteToHumanReadableFormate(contentDocumentObj.LatestPublishedVersion.ContentSize);
		fileDetailWrapperObj.size = contentDocumentObj.LatestPublishedVersion.ContentSize;
		fileDetailWrapperObj.title = contentDocumentObj.title;
		fileDetailWrapperObj.description = contentDocumentObj.LatestPublishedVersion.Description;
		if(String.isNotBlank(fileDetailWrapperObj.description)) {
			fileDetailWrapperObj.htmlDescription = fileDetailWrapperObj.description.replace('\n','<br>');
		}
		if('C'.equalsIgnoreCase(contentDocumentObj.LatestPublishedVersion.Origin)) {
			fileDetailWrapperObj.context = 'crm';
			fileDetailWrapperObj.provider = 'crm';
		} else {
			fileDetailWrapperObj.context = 'intranet';
			fileDetailWrapperObj.provider = 'intranet';
		}
		fileDetailWrapperObj.owner = new FileDetailWrapper.OwnerWrapper();
		fileDetailWrapperObj.owner.id = contentDocumentObj.Owner.id;
		fileDetailWrapperObj.owner.name = PeopleDao.mapUserIdToPeopleName.containsKey(contentDocumentObj.Owner.id) ? PeopleDao.mapUserIdToPeopleName.get(contentDocumentObj.Owner.id) : contentDocumentObj.Owner.name;
		fileDetailWrapperObj.owner.url = PageContext.getPageURL(Pages.app) + '?u=/redirect-to-profile/' + contentDocumentObj.Owner.id; 
		fileDetailWrapperObj.lastModifiedDate = LocaleContext.getLocalisedDateAsMMMDDYYYYhhmmss(contentDocumentObj.LastModifiedDate, UserContext.languageLocaleKey);
		fileDetailWrapperObj.modifiedAt = Utility.dateTimeToMomentJSDateTime(contentDocumentObj.LastModifiedDate);
		fileDetailWrapperObj.LatestPublishedVersionId = contentDocumentObj.LatestPublishedVersion.Id;
		fileDetailWrapperObj.downloadUrl = Utility.getFileDownloadURL(contentDocumentObj.LatestPublishedVersion.Id);
		fileDetailWrapperObj.fileUrl = Utility.getFileDownloadURL(contentDocumentObj.LatestPublishedVersion.Id);
		fileDetailWrapperObj.imageFullSizeRenderUrl = Utility.getImageFullSizeRenderUrl(contentDocumentObj.LatestPublishedVersion.Id);
		fileDetailWrapperObj.isImage = Utility.isImage(fileExtension);
		if(fileDetailWrapperObj.isImage) {
			fileDetailWrapperObj.thumbnailImg = Utility.getFileDownloadURLFor240BY180(contentDocumentObj.LatestPublishedVersionId);
			fileDetailWrapperObj.imgFile = new FileContentWrapper();
			fileDetailWrapperObj.imgFile.imgTHUMB240BY180URL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +contentDocumentObj.id+'/rendition?type=THUMB240BY180';
	        fileDetailWrapperObj.imgFile.imgTHUMB720BY480URL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +contentDocumentObj.id+'/rendition?type=THUMB720BY480';
	        fileDetailWrapperObj.imgFile.imgFullURL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +contentDocumentObj.id+'/content';
		}
		
		fileDetailWrapperObj.isDownloadableOniOS = Utility.isDownloadableOniOS(fileExtension, null);
		
		return fileDetailWrapperObj;
	}
	
	public Map<String, List<Site_Role__c>> getSiteIdSiteRoleListMap(Set<String> siteIdsSet, Set<String> peopleIdsSet){
		Map<String, List<Site_Role__c>> SiteIdListOfSiteRoleMap = new Map<String, List<Site_Role__c>>();
		for (Site_Role__c siteRole : [Select id, site__c, people__c, is_Member__c, Is_Content_Manager__c, Is_Manager__c from Site_Role__c where site__c in:siteIdsSet and people__c in: peopleIdsSet and is_Deleted__c = false WITH SECURITY_ENFORCED]){
			List<Site_Role__c> siteRolesList = new List<Site_Role__c>();
			if (SiteIdListOfSiteRoleMap.get(siteRole.site__c)!=null){
				siteRolesList.addAll(SiteIdListOfSiteRoleMap.get(siteRole.site__c));
			}
			siteRolesList.add(siteRole);
			SiteIdListOfSiteRoleMap.put(siteRole.site__c, siteRolesList);
		}
		return SiteIdListOfSiteRoleMap;
	}

	public List<SiteListWrapper> generateListOfSiteListWrapper(List<Simpplr_Site__c> sitObjList, Map<Id, CollaborationGroup> collGrpMap){
		List<SiteListWrapper> siteWrapperList = new List<SiteListWrapper>();
		SiteDao siteDaoObj = new SiteDao();
		List<Subscription_Entity__c> siteMandatorySubscriptionEntityList = new List<Subscription_Entity__c>();
		Map<String, SiteStats> siteStatsMap = getSiteStats(sitObjList);
    	for(Simpplr_Site__c siteRecord : sitObjList){
    		if(collGrpMap != null && collGrpMap.containsKey(siteRecord.Chatter_Group_Id__c)){
				SiteListWrapper siteWrapperObj = new SiteListWrapper();
				siteWrapperObj = toSiteListWrapper(siteRecord, collGrpMap.get(siteRecord.Chatter_Group_Id__c),siteStatsMap.get(siteRecord.Id));
				siteMandatorySubscriptionEntityList = siteDaoObj.getSiteMandatorySubscription(siteRecord.Id);
				if(!siteMandatorySubscriptionEntityList.isEmpty()){
					siteWrapperObj.isInMandatorySubscription = true;
					siteWrapperObj.isMandatory = true;
				}
    			siteWrapperList.add(siteWrapperObj);
    		}	
    	}
    	return siteWrapperList;
	}
	
	public Map<String, SiteStats> getSiteStats(List<Simpplr_Site__c> siteList){
		
		Map<String,SiteStats> siteStatsMap = new Map<String,SiteStats>();
		
		Set<String> siteIdSet = new Set<String>();
		for(Simpplr_Site__c siteObj : siteList){
			siteIdSet.add(siteObj.Id);
		}
		
		for(Simpplr_Site__c siteRecord : siteList){
			SiteStats siteStatsRecord = new SiteStats();
			siteStatsRecord.isFollower = false;
			siteStatsRecord.isMember = false;
			siteStatsRecord.isContentManager = false;
			siteStatsRecord.memberCount = siteRecord.Member_Count__c !=null ? (Integer)siteRecord.Member_Count__c : 0;
			siteStatsRecord.followerCount = siteRecord.Follower_Count__c != null ? (Integer)siteRecord.Follower_Count__c : 0;
			
			Map<Id, Site_Role__c> mapofSiteIdAndSiteRole = UserContext.mySiteRolesMap;
			Site_Role__c siteRoleForSite = mapofSiteIdAndSiteRole.get(siteRecord.Id);
			if(siteRoleForSite != null ) {
				if(siteRoleForSite.Is_Member__c == true){
					siteStatsRecord.isMember = true;
				} else if(siteRoleForSite.Is_Member__c == false){
					siteStatsRecord.isFollower = true;
				}

				if(siteRoleForSite.Is_Manager__c == true){
					siteStatsRecord.isManager = true;
				} 
				if(siteRoleForSite.Is_Content_Manager__c == true){
					siteStatsRecord.isContentManager = true;
				} else {
					siteStatsRecord.isContentManager = false;
				}
			}
			

			siteStatsMap.put(siteRecord.Id, siteStatsRecord);
		}
		return siteStatsMap;
	}

	public SiteStats getSitePeopleStats(Simpplr_Site__c siteObj){
		Map<String,SiteStats> siteStatsMap = new Map<String,SiteStats>();
		siteStatsMap = getSiteStats(new List<Simpplr_Site__c>());
		return siteStatsMap.get(siteObj.Id);
		
	}

	public SiteListWrapper toSiteListWrapper(Simpplr_Site__c siteObj, CollaborationGroup collGrp, SiteStats siteStatRecord){
  		SiteListWrapper siteListWrapperObj = new SiteListWrapper();
    	siteListWrapperObj.id = siteObj.Id;
    	siteListWrapperObj.siteId = siteObj.Id;
    	siteListWrapperObj.chatterGroupId = siteObj.Chatter_Group_Id__c;
    	siteListWrapperObj.title = siteObj.Name;
    	siteListWrapperObj.name = siteObj.Name;
		siteListWrapperObj.description = collGrp.Description;	 		
    	siteListWrapperObj.information = collGrp.InformationBody;
		siteListWrapperObj.informationTitle = collGrp.InformationTitle ;
		siteListWrapperObj.memberCount = siteStatRecord.memberCount !=null ? siteStatRecord.memberCount : 0;
		siteListWrapperObj.followerCount = siteStatRecord.followerCount !=null ? siteStatRecord.followerCount : 0;
		siteListWrapperObj.peopleCount = siteListWrapperObj.memberCount + siteListWrapperObj.followerCount;
		siteListWrapperObj.isMember = siteStatRecord.isMember;	 		
		siteListWrapperObj.isFollower = siteStatRecord.isFollower;
		siteListWrapperObj.isContentManager = siteStatRecord.isContentManager;	 		
		siteListWrapperObj.isMembershipAutoApproved = siteObj.Is_Membership_Auto_Approved__c;
		siteListWrapperObj.isQuestionAnswerEnabled = siteObj.Question_Answer_Enabled__c;
		
		siteListWrapperObj.isBroadcast = collGrp.IsBroadcast;
    	siteListWrapperObj.url = PageContext.getPageURL(Pages.app) +'?u=/site/' + siteObj.Id + '/' + siteObj.Landing_Page__c;
    	
    	siteListWrapperObj.aboutUrl = PageContext.getPageURL(Pages.app) +'?u=/site/' + siteObj.id + '/about';
    	siteListWrapperObj.editUrl = PageContext.getPageURL(Pages.app) +'?u=/manage/sites/' + siteObj.id;
    	siteListWrapperObj.canEdit = false;
    	if((UserContext.hasModifyAllDataPermission && !'Unlisted'.equalsIgnoreCase(siteObj.Site_Type__c)) 
	 		|| (UserContext.isUserAppModerator && 'Public'.equalsIgnoreCase(siteObj.Site_Type__c))
	 		|| (UserContext.hasManageUnlistedSitePermission && 'Unlisted'.equalsIgnoreCase(siteObj.Site_Type__c))){
	 		siteListWrapperObj.canEdit  = true;
	 	} else {
	 		siteListWrapperObj.canEdit  = false;
		}
    	if (!collGrp.GroupMembers.isEmpty()) {
	 		if ('Admin'.equalsIgnoreCase(collGrp.GroupMembers[0].CollaborationRole)) {
			 	siteListWrapperObj.canEdit  = true;
	 			siteListWrapperObj.isManager = true;	
	 		} else {
	 			siteListWrapperObj.isManager = false;
	 		}	 		
	 	} else {
	 		siteListWrapperObj.isManager = false;
		}
    	
    	if(String.isNotBlank(siteObj.Title_Content_Version__c)){
			
			siteListWrapperObj.img = Utility.getFileDownloadURLFor720By480(siteObj.Title_Content_Version__c);
 			siteListWrapperObj.imgThumbnail = Utility.getFileDownloadURLFor120BY90(siteObj.Title_Content_Version__c);
		
		
		}
		
		if(String.isNotBlank(siteObj.Title_Content_Document__c)) {
			String cvId = siteObj.Title_Content_Version__c;
			String cdId = siteObj.Title_Content_Document__c;
			
			siteListWrapperObj.imgFile = new SiteListWrapper.FileWrapper();
			
			siteListWrapperObj.imgFile.id = cdId;
			siteListWrapperObj.imgFile.thumbnailImg = Utility.getFileDownloadURLFor240BY180(cvId);
			siteListWrapperObj.imgFile.url = PageContext.getPageURL(Pages.FileDetail, new Map<String, String>{'fileId' => cdId, 'siteId' => siteObj.id});
			siteListWrapperObj.imgFile.fileUrl = Utility.getFileDownloadURL(cvId);
			siteListWrapperObj.imgFile.downloadUrl = Utility.getFileDowloadRelativeURL(cvId);
		}
		
    	if(String.isNotBlank(siteObj.Site_Category__c)) {
	 		siteListWrapperObj.category = new SiteListWrapper.category();
	 		siteListWrapperObj.category.id = siteObj.Site_Category__c;
	 		siteListWrapperObj.category.categoryId = siteObj.Site_Category__c;
	 		siteListWrapperObj.category.name = siteObj.Site_Category__r.Name__c;
			if(!UserContext.isUserAppModerator && 'app_manager'.equalsIgnoreCase(siteObj.Site_Category__r.Access__c)){
				siteListWrapperObj.isRestrictedCategory = true;
			} else {
				siteListWrapperObj.isRestrictedCategory = false;
			}
	 		siteListWrapperObj.category.url = PageContext.getPageURL(Pages.app)+'?u=/sites/category&category='+ siteObj.Site_Category__c;
	 	} else {
	 		siteListWrapperObj.category = null;
	 	}
    	if(siteObj.Slack_Url__c != null && SimpplrContext.slackIntegrationEnabled){
			siteListWrapperObj.slack = new SiteListWrapper.slack();
			siteListWrapperObj.slack.url = siteObj.Slack_Url__c+'messages/'+siteObj.Slack_Channel_Name__c;
			siteListWrapperObj.slack.name = siteObj.Slack_Channel_Name__c;
		} else {
			siteListWrapperObj.slack = null;
		}
    	
    	siteListWrapperObj.isAccessRequested = new SiteDao().isAccessRequested(siteObj,collGrp);			
    	
    	siteListWrapperObj.isOwner = UserContext.id.equalsIgnoreCase(collGrp.OwnerId);

		Boolean isSiteManager = siteListWrapperObj.isContentManager || siteListWrapperObj.isOwner || siteListWrapperObj.isManager;
		if (isSiteManager) {
			if (ServiceConstants.ALLOW_FILE_UPLOAD_IN_ALL_SITES.equalsIgnoreCase(SimpplrContext.appConfig.Allow_File_Upload_Site_Managers__c)) {
				siteListWrapperObj.canUploadAllFileTypes =  true;
			} else if (ServiceConstants.ALLOW_FILE_UPLOAD_AS_All_USER.equalsIgnoreCase(SimpplrContext.appConfig.Allow_File_Upload_Site_Managers__c)) {
				siteListWrapperObj.canUploadAllFileTypes =  false;
			} else if (ServiceConstants.ALLOW_FILE_UPLOAD_IN_SELECTED_SITE.equalsIgnoreCase(SimpplrContext.appConfig.Allow_File_Upload_Site_Managers__c)){
				siteListWrapperObj.canUploadAllFileTypes = siteObj.Allow_File_Upload_App_Permission__c;
			}
		}else{
			siteListWrapperObj.canUploadAllFileTypes = false;
		}

		siteListWrapperObj.canAccessLeadercast = false;
		if(SimpplrContext.leadercastEnabledFor.equalsIgnoreCase(ServiceConstants.ALLOW_LEADERCAST_ALL_USER)) {
			siteListWrapperObj.canAccessLeadercast = true;
		} else if(SimpplrContext.leadercastEnabledFor.equalsIgnoreCase(ServiceConstants.ALLOW_LEADERCAST_APP_MANAGERS)
					&& UserContext.isUserAppModerator) {
			siteListWrapperObj.canAccessLeadercast = true;
		} else if(SimpplrContext.leadercastEnabledFor.equalsIgnoreCase(ServiceConstants.ALLOW_LEADERCAST_SELECTED_SITES_USERS)) {
			if(UserContext.canAccessLeadercast) {
				siteListWrapperObj.canAccessLeadercast = true;
			} else if(siteObj.Is_Leadercast_Enabled__c && isSiteManager) {
				siteListWrapperObj.canAccessLeadercast = true;									
			}
		}
    	
    	siteListWrapperObj.isActive = siteObj.Is_Active__c;
    	
    	if(siteObj.Bookmarked_Simpplr_Site__r.isEmpty()){
	    	siteListWrapperObj.isFavorited = false;
    	} else {
    		siteListWrapperObj.isFavorited = true;
    	}
    	
    	siteListWrapperObj.isFeatured = siteObj.Is_Featured__c;
    	if(SimpplrContext.isSegmentsEnabled) {
	 		siteListWrapperObj.isFeatured = siteObj.Site_Segments__r.isEmpty() == false;
	 	}

 		siteListWrapperObj.isInMandatorySubscription = false;
		 
		if(siteObj.Subscription_Entity_Site__r.isEmpty() == false) {
			for(Subscription_Entity__c subsEntityObj : siteObj.Subscription_Entity_Site__r) {
				if(UserContext.audiencesIAmMemberOfMap.keySet().contains(subsEntityObj.Subscription__r.Audience__c)) {
					siteListWrapperObj.isInMandatorySubscription = true;
					break;
				}
			}
		}
    	//siteListWrapperObj.isBroadcast = collGrp.IsBroadcast;
    	
    	siteListWrapperObj.hasPages = siteObj.Has_Pages__c;
    	siteListWrapperObj.hasEvents = siteObj.Has_Events__c;
    	siteListWrapperObj.hasAlbums = siteObj.Has_Albums__c;
    	siteListWrapperObj.hasContent = siteObj.Simpplr_Content_Site__r.size() > 0;

    	siteListWrapperObj.canCreatePage = (siteListWrapperObj.hasPages && AccessManager.hasContentCreateAccess(siteObj.id, siteObj.Site_Type__c, siteObj.Allow_Public_Contribution__c, siteListWrapperObj.isMember));
    	siteListWrapperObj.canCreateEvent = (siteListWrapperObj.hasEvents && AccessManager.hasContentCreateAccess(siteObj.id, siteObj.Site_Type__c, siteObj.Allow_Public_Contribution__c, siteListWrapperObj.isMember));
    	siteListWrapperObj.canCreateAlbum = (siteListWrapperObj.hasAlbums && AccessManager.hasContentCreateAccess(siteObj.id, siteObj.Site_Type__c, siteObj.Allow_Public_Contribution__c, siteListWrapperObj.isMember));
    	
    	siteListWrapperObj.access = '';
    	if('Unlisted'.equalsIgnoreCase(siteObj.Site_Type__c)){
	 		siteListWrapperObj.isListed  = false;
	 		siteListWrapperObj.access = 'Unlisted';
	 	} else {
	 		siteListWrapperObj.isListed  = true;
	 	}
    	
    	if('Private'.equalsIgnoreCase(siteObj.Site_Type__c)){
	 		siteListWrapperObj.isPrivate = true;
	 		siteListWrapperObj.access = 'Private';
	 	} else {
	 		siteListWrapperObj.isPrivate = false;
	 	}
    	if('Public'.equalsIgnoreCase(siteObj.Site_Type__c)){
	 		siteListWrapperObj.isPublic = true;
	 		siteListWrapperObj.access = 'Public';
	 	} else {
	 		siteListWrapperObj.isPublic  = false;
	 	}
    	if((siteListWrapperObj.canEdit) || ((UserContext.hasModifyAllDataPermission || UserContext.isUserAppModerator))){
		 	siteListWrapperObj.canActivateDeactivate = true;
	 	} else {
	 		siteListWrapperObj.canActivateDeactivate = false;
	 	}
	 	
    	return siteListWrapperObj;
    }
   	
   	/**
	* 
	* Purpose:  [Explain what this method does to support the correct operation of its class, and how it does it.]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/
	public List<ChatterGroupWrapper> generateListOfChatterGroupWrapper (	List<CollaborationGroup> listOfCollGrpArg) {
		List<ChatterGroupWrapper> listOfChatterGrpWrapper = new List<ChatterGroupWrapper>();
			
		for (CollaborationGroup collGrpObj : listOfCollGrpArg) {
			ChatterGroupWrapper chatterWrapperObj = new ChatterGroupWrapper();
			chatterWrapperObj = generateChatterGrpWrapFromCollGrp(collGrpObj);
			listOfChatterGrpWrapper.add(chatterWrapperObj);
		}
	 	return listOfChatterGrpWrapper;
	}

	
	/**
	* 
	* Purpose:  [Explain what this method does to support the correct operation of its class, and how it does it.]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/	
	private ChatterGroupWrapper generateChatterGrpWrapFromCollGrp (CollaborationGroup collGrpArg) {
		ChatterGroupWrapper chatterGrpWrapObj = new ChatterGroupWrapper ();
		chatterGrpWrapObj.chatterGroupId = collGrpArg.id;
		chatterGrpWrapObj.name = collGrpArg.name;
		chatterGrpWrapObj.url = SimpplrContext.salesforceBaseUrl + '/' + collGrpArg.id;
  		chatterGrpWrapObj.access = collGrpArg.CollaborationType;
		chatterGrpWrapObj.memberCount = collGrpArg.memberCount;
	 	return chatterGrpWrapObj;
	}
	
   	public static FileListingWrapper fileToWrapperWithoutIsLiked(File__c fileObjArg) {   	
		FileListingWrapper fileWrapperObj = new FileListingWrapper();
		fileWrapperObj.id = fileObjArg.id;
		fileWrapperObj.description = fileObjArg.Description__c;
		fileWrapperObj.likeCount = Integer.valueOf(fileObjArg.Likes__c);
		if (fileObjArg.MIME_Type__c == 'video') {
			fileWrapperObj.isVideo = true;
			fileWrapperObj.img = fileObjArg.Thumbnail_URL__c;
			fileWrapperObj.thumbnailImg = fileObjArg.Thumbnail_URL__c;
			fileWrapperObj.imgTHUMB720BY480URL = fileObjArg.Thumbnail_URL__c;
			fileWrapperObj.imgTHUMB240BY180URL = fileObjArg.Thumbnail_URL__c;
			fileWrapperObj.imgFullURL = fileObjArg.Thumbnail_URL__c;
			fileWrapperObj.videoId = fileObjArg.External_Id__c;
			fileWrapperObj.isCover = fileObjArg.Is_Title_Image__c;
			if (fileObjArg.Url__c.containsIgnoreCase('vidyard.com')){ 
				fileWrapperObj.videoProvider = 'vidyard';
				
			} else if (fileObjArg.Url__c.contains('vimeo.com')){
				fileWrapperObj.videoProvider = 'vimeo';
			
			} else if (fileObjArg.Url__c.containsIgnoreCase('vbrick.com')){
				fileWrapperObj.videoProvider = 'vbrick';
				
			} else if (fileObjArg.Url__c.containsIgnoreCase('wistia.')){
				fileWrapperObj.videoProvider = 'wistia';
						
			} else {
				fileWrapperObj.videoProvider = 'youtube';
			}
			fileWrapperObj.imgTHUMB720BY480URL = fileWrapperObj.imgTHUMB240BY180URL = fileWrapperObj.imgFullURL = fileObjArg.Thumbnail_URL__c;
		} else {
			fileWrapperObj.isVideo = false;
			fileWrapperObj.img = fileObjArg.Url__c;
			fileWrapperObj.downloadUrl = fileObjArg.Url__c;
			fileWrapperObj.videoProvider = '';
			fileWrapperObj.videoId = ''; 
			fileWrapperObj.thumbnailImg = Utility.getFileDownloadURLFor720By480(fileObjArg.Content_Version__c);
			fileWrapperObj.isCover =  fileObjArg.Is_Title_Image__c;
			fileWrapperObj.imgTHUMB720BY480URL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +fileObjArg.Content_Document__c+'/rendition?type=THUMB720BY480';
			fileWrapperObj.imgTHUMB240BY180URL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +fileObjArg.Content_Document__c+'/rendition?type=THUMB240BY180';
			fileWrapperObj.imgFullURL = SimpplrContext.salesforceHost + ServiceConstants.FILE_CONNECT_API_SUB_URL +fileObjArg.Content_Document__c+'/content';
			
		}
		
		if(fileObjArg.Simpplr_Content__c != null && 
				fileObjArg.Simpplr_Content__r.Album_Image_Count__c != null && 
				fileObjArg.Simpplr_Content__r.Album_Video_Count__c != null) {
			
					fileWrapperObj.photoCount = (Integer)(fileObjArg.Simpplr_Content__r.Album_Image_Count__c);
			fileWrapperObj.videoCount = (Integer)(fileObjArg.Simpplr_Content__r.Album_Video_Count__c);
		} else {
			fileWrapperObj.photoCount = 0;
			fileWrapperObj.videoCount = 0;
		}
		
    	return fileWrapperObj;
    }
    
    public static Boolean isImage(String extString) {
		Set<String>fileType = new Set<String>{'jpg', 'jpeg', 'pdf', 'gif', 'tiff', 'png'};
		
		if (String.isNotBlank(extString) && fileType.contains(extString.toLowerCase())){
			return true;
		}
		
		return false;
	}

    public static String getInAppNotificationtext(String languageLocaleKeyArg, 
            App_Notification__c notificationObj, String siteName, String contentType, 
            String contentTitle, String mediaType, String stamp) {
		String notificationText = '';
        String snippet = notificationObj.snippet__c == null ? '' : notificationObj.snippet__c;
        
        if (snippet.indexOf('#[') >= 0) {
            snippet = snippet.replaceAll('\\[', '');
            snippet = snippet.replaceAll('\\]', '');
        }

		siteName = siteName == null ? '' : siteName;
		mediaType = mediaType == null ? '' : mediaType;
		contentTitle = contentTitle == null ? '' : contentTitle;
		String key = '';
        String remaningCount;
        String widgetTitle = '';
		String widgetTab = '';
		if('Csv_Download_Request'.equalsIgnoreCase(notificationObj.Category__c) && String.isNotBlank(notificationObj.Csv_Download_Request__r.Widget_Title__c) && String.isNotBlank(notificationObj.Csv_Download_Request__r.Widget_Tab__c)) {
			widgetTitle = notificationObj.Csv_Download_Request__r.Widget_Title__c;
			widgetTab = notificationObj.Csv_Download_Request__r.Widget_Tab__c;
		}

        if (notificationObj.Action_Count__c != null && 
                notificationObj.Action_Count__c > 4) {
            remaningCount = String.valueOf(notificationObj.Action_Count__c - 3); 
        }

		if ('Also_Replied_On_Post'.equalsIgnoreCase(notificationObj.Category__c)) {
			
			if (notificationObj.Action_Count__c == 1) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_FEED_REPLIED_AFTER_1).replace('{{contentTitle}}', contentTitle); 
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_FEED_REPLIED_AFTER_2).replace('{{contentTitle}}', contentTitle);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_FEED_REPLIED_AFTER_3).replace('{{contentTitle}}', contentTitle);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_FEED_REPLIED_AFTER_4).replace('{{contentTitle}}', contentTitle);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_FEED_REPLIED_AFTER_N).replace('{{contentTitle}}', contentTitle).replace('{{count}}', remaningCount);
			}
			
		} else if ('Also_Replied_On_My_Post'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_FEED_REPLIED_AFTER_OWN);

		} else if ('Also_Replied_On_Comment'.equalsIgnoreCase(notificationObj.Category__c)) {
                
            if (notificationObj.Action_Count__c == 1) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLIED_AFTER_1).replace('{{contentTitle}}', 
                        contentTitle); 
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLIED_AFTER_2).replace('{{contentTitle}}', 
                        contentTitle);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLIED_AFTER_3).replace('{{contentTitle}}', 
                        contentTitle);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLIED_AFTER_4).replace('{{contentTitle}}', 
                        contentTitle);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLIED_AFTER_N).replace('{{contentTitle}}', 
                        contentTitle).replace('{{count}}', remaningCount);
            }

		} else if ('Also_Replied_On_My_Comment'.equalsIgnoreCase(notificationObj.Category__c)) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_COMMENT_REPLIED_AFTER_OWN);
				notificationText = notificationText.replace('{{contentTitle}}', contentTitle);

		} else if ('Comments_On_Post_On_My_Profile'.equalsIgnoreCase(notificationObj.Category__c)) {
			
			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_POST_SHARED_WITH_YOU_REPLY_1);
							
			} else if (notificationObj.Action_Count__c == 2) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_POST_SHARED_WITH_YOU_REPLY_2);
			
			} else if (notificationObj.Action_Count__c == 3) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_POST_SHARED_WITH_YOU_REPLY_3);
			
			} else if (notificationObj.Action_Count__c == 4) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_POST_SHARED_WITH_YOU_REPLY_4);
			
			} else if (notificationObj.Action_Count__c > 4) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_POST_SHARED_WITH_YOU_REPLY_N).replace('{{count}}', remaningCount);
			
			}
            
		} else if ('Comments_On_My_Post'.equalsIgnoreCase(notificationObj.Category__c)) {
            
            if (String.isBlank(snippet)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_NO_TEXT_REPLY_1);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_NO_TEXT_REPLY_2);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_POST_NO_TEXT_REPLY_3);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_NO_TEXT_REPLY_4);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_NO_TEXT_REPLY_N).replace('{{count}}', remaningCount);
                }

            } else {
                 
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_1).replace('{{snippet}}', snippet);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_2).replace('{{snippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_3).replace('{{snippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_4).replace('{{snippet}}', snippet);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_N).replace('{{snippet}}', 
                            snippet).replace('{{count}}', remaningCount);
                }


            }
            
		} else if ('Comments_On_My_Recognition'.equalsIgnoreCase(notificationObj.Category__c)) {
                 
			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_REPLY_1).replace('{{snippet}}', snippet);
							
			} else if (notificationObj.Action_Count__c == 2) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_REPLY_2).replace('{{snippet}}', snippet);
			
			} else if (notificationObj.Action_Count__c == 3) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_REPLY_3).replace('{{snippet}}', snippet);
			
			} else if (notificationObj.Action_Count__c == 4) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_REPLY_4).replace('{{snippet}}', snippet);

			} else if (notificationObj.Action_Count__c > 4) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_REPLY_N).replace('{{snippet}}', 
						snippet).replace('{{count}}', remaningCount);
			}
            
		} else if ('Comments_On_My_Poll'.equalsIgnoreCase(notificationObj.Category__c)) {
            
            if (notificationObj.Action_Count__c == 1) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_REPLY_1).replace('{{snippet}}', snippet);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_REPLY_2).replace('{{snippet}}', snippet);
            
            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_REPLY_3).replace('{{snippet}}', snippet);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_REPLY_4).replace('{{snippet}}', snippet);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_REPLY_N).replace('{{snippet}}', 
                        snippet).replace('{{count}}', remaningCount);
            }

        
        } else if ('Comments_On_My_Post_With_File'.equalsIgnoreCase(notificationObj.Category__c)) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_REPLY_WITH_FILE);
        
        } else if ('Sharepoint_Upgraded'.equalsIgnoreCase(notificationObj.Category__c)) {
            notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SHAREPOINT_UPGRADE);

        } else if ('Comments_On_My_Content_Post'.equalsIgnoreCase(notificationObj.Category__c)) {
                
            if (notificationObj.Action_Count__c == 1) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLY_1).replace('{{contentTitle}}', 
                        contentTitle);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLY_2).replace('{{contentTitle}}', 
                        contentTitle);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLY_3).replace('{{contentTitle}}', 
                        contentTitle);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLY_4).replace('{{contentTitle}}', 
                        contentTitle);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_COMMENT_REPLY_N).replace('{{contentTitle}}', 
                        contentTitle).replace('{{count}}', remaningCount);
            }
        
        } else if ('Comments_On_Post_I_Like'.equalsIgnoreCase(notificationObj.Category__c)) {
            
            if (String.isBlank(snippet)) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_REPLY_NO_TEXT_POST_YOU_LIKE);
            
            } else {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_REPLY_POST_YOU_LIKE);
            }
            
		} else if ('Album_Submitted_For_Moderation'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_ALBUM_SUBMISSION_APPROVAL);

		} else if ('Page_Submitted_For_Moderation'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_PAGE_SUBMISSION_APPROVAL);

		} else if ('Event_Submitted_For_Moderation'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_EVENT_SUBMISSION_APPROVAL);

		} else if ('Endorses_Me'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PROFILE_EXPERTISE_ENDORSE)
								.replace('{{expertise}}', snippet);
			
		} else if ('Follows_Me'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PROFILE_FOLLOW);
			
		} else if ('Like_My_Post'.equalsIgnoreCase(notificationObj.Category__c)) {
            
            if (String.isBlank(snippet)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_NO_TEXT_LIKE_1);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_NO_TEXT_LIKE_2);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_NO_TEXT_LIKE_3);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_NO_TEXT_LIKE_4);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_NO_TEXT_LIKE_N).replace('{{count}}', remaningCount);
                }

            } else {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_LIKE_1).replace('{{snippet}}', snippet);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_LIKE_2).replace('{{snippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_LIKE_3).replace('{{snippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_LIKE_4).replace('{{snippet}}', snippet);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_LIKE_N).replace('{{snippet}}', 
                            snippet).replace('{{count}}', remaningCount);
                }

			}
			
		} else if ('Like_My_Recognition'.equalsIgnoreCase(notificationObj.Category__c)) {
            
            if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_LIKE_1).replace('{{snippet}}', snippet);
							
			} else if (notificationObj.Action_Count__c == 2) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_LIKE_2).replace('{{snippet}}', snippet);
			
			} else if (notificationObj.Action_Count__c == 3) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_LIKE_3).replace('{{snippet}}', snippet);
			
			} else if (notificationObj.Action_Count__c == 4) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_LIKE_4).replace('{{snippet}}', snippet);

			} else if (notificationObj.Action_Count__c > 4) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_LIKE_N).replace('{{snippet}}', 
						snippet).replace('{{count}}', remaningCount);
			}

			
		} else if ('Like_My_Poll'.equalsIgnoreCase(notificationObj.Category__c)) {
            
			if (notificationObj.Action_Count__c == 1) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_LIKE_1).replace('{{snippet}}', snippet);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_LIKE_2).replace('{{snippet}}', snippet);
            
            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_LIKE_3).replace('{{snippet}}', snippet);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_LIKE_4).replace('{{snippet}}', snippet);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                        KEY_FEED_POLL_LIKE_N).replace('{{snippet}}', 
                        snippet).replace('{{count}}', remaningCount);
            }

		} else if ('Like_My_Reply'.equalsIgnoreCase(notificationObj.Category__c)) {
            
            if (String.isBlank(snippet)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_NO_TEXT_LIKE_1);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_NO_TEXT_LIKE_2);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_NO_TEXT_LIKE_3);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_NO_TEXT_LIKE_4);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_NO_TEXT_LIKE_N).replace('{{count}}', remaningCount);
                }

            } else {
 
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_LIKE_1).replace('{{replySnippet}}', snippet);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_LIKE_2).replace('{{replySnippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_LIKE_3).replace('{{replySnippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_LIKE_4).replace('{{replySnippet}}', snippet);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_REPLY_LIKE_N).replace('{{replySnippet}}', 
                            snippet).replace('{{count}}', remaningCount);
                }

            }
            
		} else if ('Like_My_Comment_On_Content'.equalsIgnoreCase(notificationObj.Category__c)) {
            
            if (notificationObj.Action_Count__c == 1) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_CONTENT_COMMENT_LIKE_1).replace('{{contentTitle}}', 
                        contentTitle);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_CONTENT_COMMENT_LIKE_2).replace('{{contentTitle}}', 
                        contentTitle);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_CONTENT_COMMENT_LIKE_3).replace('{{contentTitle}}', 
                        contentTitle);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_CONTENT_COMMENT_LIKE_4).replace('{{contentTitle}}', 
                        contentTitle);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                KEY_CONTENT_COMMENT_LIKE_N).replace('{{contentTitle}}', 
                        contentTitle).replace('{{count}}', remaningCount);
            }

		} else if ('Mobile_Promotion'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MOBILE_PROMOTION);
			
		}else if ('Like_My_Reply_On_Content'.equalsIgnoreCase(notificationObj.Category__c)) {

			if (String.isBlank(snippet)) {

                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_1);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_2);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_3);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_4);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_LIKED_YOUR_REPLY_ON_CONTENT_NO_TEXT_N).replace('{{count}}', remaningCount);
                }

            } else {

                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_LIKED_YOUR_REPLY_ON_CONTENT_1).replace('{{snippet}}', snippet);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_LIKED_YOUR_REPLY_ON_CONTENT_2).replace('{{snippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_LIKED_YOUR_REPLY_ON_CONTENT_3).replace('{{snippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_LIKED_YOUR_REPLY_ON_CONTENT_4).replace('{{snippet}}', snippet);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_LIKED_YOUR_REPLY_ON_CONTENT_N).replace('{{snippet}}', 
                            snippet).replace('{{count}}', remaningCount);
                }
                
            }
            
		} else if ('Mentions_Me_In_Post'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_COMMENT_MENTION);
			
		} else if ('Mentions_Me_In_Recognition'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_COMMENT_MENTION_RECOGNITION);
			
		} else if ('Mentions_Me_In_Reply'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_COMMENT_MENTION);
			
		} else if ('My_Content_Approved'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_APPROVED);
		
		} else if ('Content_Approved'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_APPROVED);
		
		} else if ('My_Content_Rejected'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_REJECTED);
			
		} else if ('Content_Rejected'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_REJECTED);
			
		} else if ('Content_Notification'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_PROMOTE_NOTIFICATION);
			
		} else if ('My_Content_Like'.equalsIgnoreCase(notificationObj.Category__c)) {

			if ('page'.equalsIgnoreCase(contentType)) {
		              
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_LIKE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_LIKE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_LIKE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_LIKE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_LIKE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('album'.equalsIgnoreCase(contentType)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_LIKE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_LIKE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_LIKE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_LIKE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_LIKE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('event'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_LIKE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_LIKE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_LIKE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_LIKE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_LIKE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if ('blogpost'.equalsIgnoreCase(contentType)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_LIKE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_LIKE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_LIKE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_LIKE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_LIKE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            }
			
		} else if ('Content_Like'.equalsIgnoreCase(notificationObj.Category__c)) {

			if ('page'.equalsIgnoreCase(contentType)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_LIKE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_LIKE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_LIKE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_LIKE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_LIKE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if ('album'.equalsIgnoreCase(contentType)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_LIKE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_LIKE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_LIKE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_LIKE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_LIKE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if ('event'.equalsIgnoreCase(contentType)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_LIKE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_LIKE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_LIKE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_LIKE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_LIKE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if ('blogpost'.equalsIgnoreCase(contentType)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_LIKE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_LIKE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_LIKE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_LIKE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_LIKE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            }
			
		} else if ('Album_Photo_Like'.equalsIgnoreCase(notificationObj.Category__c)) {
			mediaType = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MEDIA_TYPE_PHOTO);
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_ALBUM_MEDIA_LIKED);
		
		} else if ('Album_Video_Like'.equalsIgnoreCase(notificationObj.Category__c)) {
			mediaType = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MEDIA_TYPE_VIDEO);
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_ALBUM_MEDIA_LIKED);

		} else if ('Album_Your_Photo_Like'.equalsIgnoreCase(notificationObj.Category__c)) {
			mediaType = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MEDIA_TYPE_PHOTO);
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_ALBUM_MEDIA_CONTRIBUTED_LIKED);
		
		} else if ('Album_Your_Video_Like'.equalsIgnoreCase(notificationObj.Category__c)) {
			mediaType = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MEDIA_TYPE_VIDEO);
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_ALBUM_MEDIA_CONTRIBUTED_LIKED);

		} else if ('Album_Photo_Share'.equalsIgnoreCase(notificationObj.Category__c)) {
			mediaType = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MEDIA_TYPE_PHOTO);
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_ALBUM_MEDIA_SHARED);
		
		} else if ('Album_Video_Share'.equalsIgnoreCase(notificationObj.Category__c)) {
			mediaType = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MEDIA_TYPE_VIDEO);
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_ALBUM_MEDIA_SHARED);

		} else if ('Album_Your_Photo_Share'.equalsIgnoreCase(notificationObj.Category__c)) {
			mediaType = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MEDIA_TYPE_PHOTO);
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_ALBUM_MEDIA_CONTRIBUTED_SHARED);
		
		} else if ('Album_Your_Video_Share'.equalsIgnoreCase(notificationObj.Category__c)) {
			mediaType = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MEDIA_TYPE_VIDEO);
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_ALBUM_MEDIA_CONTRIBUTED_SHARED);

		} else if ('My_Content_Post'.equalsIgnoreCase(notificationObj.Category__c)) {

			if ('page'.equalsIgnoreCase(contentType)){

                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_COMMENT_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_COMMENT_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_COMMENT_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_COMMENT_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_PAGE_COMMENT_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

			} else if('album'.equalsIgnoreCase(contentType)){

                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_COMMENT_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_COMMENT_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_COMMENT_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_COMMENT_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_ALBUM_COMMENT_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('event'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_COMMENT_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_COMMENT_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_COMMENT_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_COMMENT_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_EVENT_COMMENT_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('blogpost'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_COMMENT_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_COMMENT_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_COMMENT_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_COMMENT_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_CONTENT_BLOG_POST_COMMENT_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }
			}

		} else if ('Content_Post'.equalsIgnoreCase(notificationObj.Category__c)) {
            
            if ('page'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_COMMENT_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_COMMENT_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_COMMENT_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_COMMENT_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_COMMENT_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('album'.equalsIgnoreCase(contentType)){

                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_COMMENT_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_COMMENT_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_COMMENT_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_COMMENT_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_COMMENT_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('event'.equalsIgnoreCase(contentType)){
              
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_COMMENT_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_COMMENT_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_COMMENT_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_COMMENT_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_COMMENT_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('blogpost'.equalsIgnoreCase(contentType)){

                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_COMMENT_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }
            }

		} else if ('My_Content_File_Post'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_FILE_POST);

		} else if ('My_Content_Share'.equalsIgnoreCase(notificationObj.Category__c)) {

			if('page'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_PAGE_SHARE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_PAGE_SHARE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_PAGE_SHARE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_PAGE_SHARE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_PAGE_SHARE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }
                
            } else if('album'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_ALBUM_SHARE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_ALBUM_SHARE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_ALBUM_SHARE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_ALBUM_SHARE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_ALBUM_SHARE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('event'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_EVENT_SHARE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_EVENT_SHARE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_EVENT_SHARE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_EVENT_SHARE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_EVENT_SHARE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('blogpost'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_BLOG_POST_SHARE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_BLOG_POST_SHARE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_BLOG_POST_SHARE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_BLOG_POST_SHARE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_BLOG_POST_SHARE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }
            }
			
		} else if ('Content_Share'.equalsIgnoreCase(notificationObj.Category__c)) {

			if ('page'.equalsIgnoreCase(contentType)){

                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_SHARE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_SHARE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_SHARE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_SHARE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_PAGE_SHARE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('album'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_SHARE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_SHARE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_SHARE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_SHARE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_ALBUM_SHARE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('event'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_SHARE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_SHARE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_SHARE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_SHARE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_EVENT_SHARE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            } else if('blogpost'.equalsIgnoreCase(contentType)){
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_SHARE_1).replace('{{contentTitle}}', 
                            contentTitle);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_SHARE_2).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_SHARE_3).replace('{{contentTitle}}', 
                            contentTitle);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_SHARE_4).replace('{{contentTitle}}', 
                            contentTitle);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_CONTENT_MANAGE_BLOG_POST_SHARE_N).replace('{{contentTitle}}', 
                            contentTitle).replace('{{count}}', remaningCount);
                }

            }
			
		} else if ('Posts_On_My_Profile_With_File'.equalsIgnoreCase(notificationObj.Category__c)) {
			if(String.isBlank(snippet)) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_POSTED_TO_YOU_FILE);
			} else {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_POSTED_TO_YOU_FILE_WITH_TEXT);
			}
		} else if ('Posts_A_Poll_On_My_Profile'.equalsIgnoreCase(notificationObj.Category__c)) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_POSTED_TO_YOU_POLL);
		} else if ('Posts_On_My_Profile'.equalsIgnoreCase(notificationObj.Category__c)) {
			if(String.isBlank(snippet)) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_FEED_NO_TEXT_POSTED_TO_YOU);
			} else {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_FEED_POSTED_TO_YOU);
			}
		} else if ('PrivateSiteMembership_Response'.equalsIgnoreCase(notificationObj.Category__c)) { 
			if('approved'.equalsIgnoreCase(stamp)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_APPROVAL);
			}
			
		} else if ('Private_Site_Membership_Requests'.equalsIgnoreCase(notificationObj.Category__c)) {
			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_1);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_2);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_3);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_4);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_n).replace('{{count}}', remaningCount);
            }
			
		} else if ('Public_Site_Membership_Response'.equalsIgnoreCase(notificationObj.Category__c)) { 
			if('approved'.equalsIgnoreCase(stamp)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_APPROVAL);
			}
			
		} else if ('Public_Site_Membership_Requests'.equalsIgnoreCase(notificationObj.Category__c)) {
			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_1);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_2);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_3);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_4);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_REQUEST_n).replace('{{count}}', remaningCount);
            }
			
		} else if('Public_Site_Membership_Request_Auto_Approve'.equalsIgnoreCase(notificationObj.Category__c)) {
			if(snippet == '1') {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_AUTOAPPROVE);
			} else {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_AUTOAPPROVE_PLURAL);
			}
			notificationText = notificationText.replace('{{requestCount}}', snippet);
			
		} else if ('Member_Added'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_MADE_YOU_MEMBER);
			
		} else if ('Shares_My_Post'.equalsIgnoreCase(notificationObj.Category__c)) {

			if (String.isBlank(snippet)) {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_POST_NO_TEXT_SHARE_1);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_POST_NO_TEXT_SHARE_2);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_POST_NO_TEXT_SHARE_3);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_POST_NO_TEXT_SHARE_4);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                    KEY_POST_NO_TEXT_SHARE_N).replace('{{count}}', remaningCount);
                }


            } else {
                
                if (notificationObj.Action_Count__c == 1) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_SHARE_1).replace('{{snippet}}', snippet);
								
                } else if (notificationObj.Action_Count__c == 2) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_SHARE_2).replace('{{snippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 3) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_SHARE_3).replace('{{snippet}}', snippet);
                
                } else if (notificationObj.Action_Count__c == 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_SHARE_4).replace('{{snippet}}', snippet);

                } else if (notificationObj.Action_Count__c > 4) {
                    notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
                            KEY_POST_SHARE_N).replace('{{snippet}}', 
                            snippet).replace('{{count}}', remaningCount);
                }

            }
            
		} else if ('Shares_My_Recognition'.equalsIgnoreCase(notificationObj.Category__c)) {

			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_SHARE_1).replace('{{snippet}}', snippet);
							
			} else if (notificationObj.Action_Count__c == 2) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_SHARE_2).replace('{{snippet}}', snippet);
			
			} else if (notificationObj.Action_Count__c == 3) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_SHARE_3).replace('{{snippet}}', snippet);
			
			} else if (notificationObj.Action_Count__c == 4) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_SHARE_4).replace('{{snippet}}', snippet);

			} else if (notificationObj.Action_Count__c > 4) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, 
						KEY_RECOGNITION_SHARE_N).replace('{{snippet}}', 
						snippet).replace('{{count}}', remaningCount);
			}
            
		} else if('Invited_To_Event'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_EVENT_INVITE);

		} else if('Campaign_Share'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CAMPAIGN_SHARED)
								.replace('{{campaignTitle}}', snippet);

		} else if('Grant_Campaign_Access'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CAMPAIGN_ACCESS);

		} else if('Grant_Newsletter_Access'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_NL_ACCEESS);

		} else if('Grant_Site_Newsletter_Access'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_NL_ACCEESS);

		} else if('Email_Notifcation_Overwrite'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_OVERWRITE_EMAIL_NOTIFICATION_DEFAULT);	
		
		} else if('Native_Mobile_Notification_Overwrite'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MOBILE_APP_NOTIFICATION_OVERWRITE);	

		} else if('Browser_Notification_Overwrite'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_BROWSER_NOTIFICATION_OVERWRITE);	
			
		} else if('SMS_Notification_Overwrite'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SMS_NOTIFICATION_OVERWRITE);	

		} else if('Feed_Default_Overwrite'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_FEED_DEFAULT_OVERWRITE);

		} else if('Home_Default_Overwrite'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_HOME_DEFAULT_OVERWRITE);	

		} else if('Home_Default_Reminder'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_OVERWRITE_HOME_DEFAULT_REMINDER);
			notificationText = notificationText.replace('{{count}}', snippet);	

		} else if('Must_Read'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_MUST_READ);	

		} else if('Last_Month_App_Analytics'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_LAST_MONTH_REVIEW_ACTIVITY);	
			notificationText = notificationText.replace('{{count}}', snippet);

		} else if('Last_Month_Site_Analytics'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_LAST_MONTH_YOUR_MOST_POPULAR);	

		} else if('Last_Month_Content_Analytics'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_LAST_MONTH_YOUR_MOST_POPULAR);	

		} else if('Made_Site_Manager'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_MADE_YOU_MANAGER);	

		} else if('Made_Site_Content_Manager'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_MADE_YOU_CONTENT_MANAGER);	

		} else if('Made_Site_Owner'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_MADE_YOU_OWNER);	

		} else if('Made_Content_Author'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_MADE_YOU_AUTHOR);	
		
		} else if('Published_On_Behalf'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_PUBLISHED_ON_YOUR_BEHALF);	
		
		} else if( 'My_Content_Edited'.equalsIgnoreCase(notificationObj.Category__c) ){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_My_CONTENT_EDITED);	
			
		} else if('Changed_Content_Author'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_CHANGED_AUTHOR);	
		
		} else if('Social_Campaign_Ready'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SOCIAL_CAMPAIGN_READY);	

		} else if('Csv_Download_Request'.equalsIgnoreCase(notificationObj.Category__c)) {
			if('Must Read History'.equalsIgnoreCase(widgetTab)){
				widgetTab = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MUST_READ_HISTORY);	
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CSV_DOWNLOAD_REQUEST);	
				notificationText = String.isNotBlank(contentType) ? notificationText.replace('{{contentType}}', LocaleContext.getLocalisedContentTypeLabel(languageLocaleKeyArg, contentType)) : notificationText ;
			} else if('Adoption'.equalsIgnoreCase(widgetTab) && 'Adoption behavior'.equalsIgnoreCase(widgetTitle)) {
				widgetTab = LocaleContext.getLabel(languageLocaleKeyArg, KEY_ADOPTION);
				widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_ADOPTION_BEHAVIOR);
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_ANALYTICS_CSV_DOWNLOAD_REQUEST);
			} else if('People'.equalsIgnoreCase(widgetTab) || 'Site analytics'.equalsIgnoreCase(widgetTab)) {
				
				if('People'.equalsIgnoreCase(widgetTab)){
					widgetTab = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE);
				}else{
					widgetTab = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SITE_ANALYTICS);
				}
				
				if('Favorites received'.equalsIgnoreCase(widgetTitle)){
					widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE_FAVORITES_RECIEVED);
				}else if('Likes made'.equalsIgnoreCase(widgetTitle)){
					widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE_LIKES_MADE);
				}else if('Likes received'.equalsIgnoreCase(widgetTitle)){
					widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE_LIKES_RECEIVED);
				}else if('Feed posts'.equalsIgnoreCase(widgetTitle)){
					widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE_FEED_POSTS);
				}else if('Replies'.equalsIgnoreCase(widgetTitle)){
					widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE_REPLIES);
				}else if('Replies from other users'.equalsIgnoreCase(widgetTitle)){
					widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE_REPLIES_FROM_OTHER_USERS);
				}else if('Shares received'.equalsIgnoreCase(widgetTitle)){
					widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE_SHARES_RECEIVED);
				}else if('Profile views'.equalsIgnoreCase(widgetTitle)){
					widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE_PROFILE_VIEWS);
				}else if('Content published'.equalsIgnoreCase(widgetTitle)){
					widgetTitle = LocaleContext.getLabel(languageLocaleKeyArg, KEY_PEOPLE_CONTENT_PUBLISHED);
				}
				
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_ANALYTICS_CSV_DOWNLOAD_REQUEST);
			}
			notificationText = notificationText.replace('{{widgetTitle}}', widgetTitle);
			notificationText = notificationText.replace('{{widgetTab}}', widgetTab);
			
		} else if('Made_Segment_Manager'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_MADE_SEGMENT_MANAGER);	
			notificationText = notificationText.replace('{{segmentName}}', snippet);

		} else if('Subscription_Request'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SUBSCRIPTION_REQUIRES_ATTENTION);	

		} else if('Subscription_Approved'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SUBSCRIPTION_APPROVED);	

		} else if('Subscription_Rejected'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_SUBSCRIPTION_REJECTED);	

		} else if('Content_Rated_Unuseful'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CONTENT_NOT_USEFUL);	

		} else if('Album_Media_Add'.equalsIgnoreCase(notificationObj.Category__c)) {
			Map<String, String> albumDataMap = (Map<String, String>) JSON.deserialize(snippet, Type.forName('Map<String,String>'));
			
			snippet = albumDataMap.get('t');
			Integer videoCount = Integer.valueOf(albumDataMap.get('v'));
			Integer imageCount = Integer.valueOf(albumDataMap.get('i'));			
	
			if (videoCount > 0 && imageCount > 0) {
				if(imageCount > 1 && videoCount == 1){
						key = KEY_KEY_ADDED_IMAGE_VIDEO_TO_ALBUM_PLURAL_SINGULAR;
				} else if(imageCount == 1 && videoCount > 1){
						key = KEY_KEY_ADDED_IMAGE_VIDEO_TO_ALBUM_SINGULAR_PLURAL;
				} else if(imageCount == 1 && videoCount == 1){
						key = KEY_ADDED_IMAGE_VIDEO_TO_ALBUM_SINGULAR;
				} else if(imageCount > 1 && videoCount > 1){
						key = KEY_ADDED_IMAGE_VIDEO_TO_ALBUM_PLURAL;
				}
			} else if (videoCount > 0 && imageCount == 0) {
				if(videoCount == 1){
						key = KEY_ADDED_VIDEO_TO_ALBUM_SINGULAR;
				} else {
						key = KEY_ADDED_VIDEO_TO_ALBUM_PLURAL;
				}	
			} else if (imageCount > 0 && videoCount == 0) {
				if(imageCount == 1){
						key = KEY_ADDED_IMAGE_TO_ALBUM_SINGULAR;
				} else {
						key = KEY_ADDED_IMAGE_TO_ALBUM_PLURAL;
				}
			}

			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, key)
													.replace('{{imageCount}}', String.valueOf(imageCount))
													.replace('{{videoCount}}', String.valueOf(videoCount));
													
		} else if('Content_For_Review'.equalsIgnoreCase(notificationObj.Category__c)) {
			contentTitle = contentTitle.length() > 15 ? '"'+contentTitle.substring(0,15) +'…"' : '"'+contentTitle+'"';
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_REVIEW_REQD_SINGULAR)
													.replace('{{contentTitle}}', contentTitle);

		} else if('Content_Expired'.equalsIgnoreCase(notificationObj.Category__c)) {
			key = Integer.valueOf(snippet) == 1 ? KEY_PAGE_EXPIRED_SINGULAR : KEY_PAGE_EXPIRED_PLURAL;
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, key)
													.replace('{{count}}', String.valueOf(snippet));

		} else if('ServiceNow'.equalsIgnoreCase(notificationObj.Category__c)) {
			snippet = Utility.chompString(snippet, ServiceConstants.SNIPPET_IN_SERVICE_NOW_DESCRIPTION_MAX_LENGTH);
			key = 'updated'.equalsIgnoreCase(notificationObj.Sub_Type__c) ? KEY_SN_TICKET_UPDATED : KEY_SN_STATUS_CHANGE;
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, key)
													.replace('{{title}}', String.valueOf(snippet))
													.replace('{{status}}', String.valueOf(notificationObj.Status__c));

		} else if('External'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = notificationObj.submitter_comment__c;

		} else if('RSVP_Removed'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RSVP_REMOVED)
														.replace('{{contentTitle}}', contentTitle);

		} else if('Event_Deleted'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_EVENT_DELETED)
														.replace('{{contentTitle}}', contentTitle);

		} else if('Event_Unpublished'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_EVENT_UNPUBLISHED)
														.replace('{{contentTitle}}', contentTitle);

		} else if('Event_Updated'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_EVENT_UPDATED)
														.replace('{{contentTitle}}', contentTitle);

		} else if('Event_Responses'.equalsIgnoreCase(notificationObj.Category__c)){
			List<String> respondentNameList = notificationObj.Snippet__c.split(',');
			Integer totalRespondentCount = Integer.valueOf(notificationObj.Submitter_Comment__c);

			String KEY_RESPONDED_TO_YOUR_EVENT = '';
			if(respondentNameList.size() == 2 && totalRespondentCount > 2){
				// {{respondantName1}}, {{respondantName2}} and {{respondantCount}} others responded to your event
				KEY_RESPONDED_TO_YOUR_EVENT = KEY_EVENT_MORE_THAN_2_RESPONDENT;

			} else {
				
				if(respondentNameList.size() > 1){
					// {{respondantName1}} and {{respondantName2}} responded to your event
					KEY_RESPONDED_TO_YOUR_EVENT = KEY_EVENT_2_RESPONDENT;

				} else {
					// {{respondantName1}} responded to your event
					KEY_RESPONDED_TO_YOUR_EVENT = KEY_EVENT_1_RESPONDENT;

				}
			}

			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RESPONDED_TO_YOUR_EVENT)
														.replace('{{contentTitle}}', contentTitle)
														.replace('{{respondantName1}}', respondentNameList.get(0))
														.replace('{{respondantCount}}', String.valueOf(totalRespondentCount - respondentNameList.size()));

			if(respondentNameList.size() > 1){
				notificationText = notificationText.replace('{{respondantName2}}', respondentNameList.get(1));
			}											

		} else if('Newsletter'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_NEWSLETTER);

		} else if ('New_Site_Onboarding_Content'.equalsIgnoreCase(notificationObj.Category__c)) {
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_NEW_SITE_ONBOARDING_CONTENT);
		 
		} else if('Granted_Org_Level_Privilege'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_ORG_LEVEL_ONBOARDING_ACCESS);

		} else if('New_Hire_Graduated'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_GRADUATION);

		} else if('Recognition'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION);

		} else if('Initiative_Starts'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CNI_INITIATIVE_STARTS);

		} else if('Initiative_Ends'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CNI_INITIATIVE_ENDS);

		} else if('New_Campaign'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CNI_CAMPAIGN_NEW).replace('{{snippet2}}', String.isNotBlank(notificationObj.Submitter_Comment__c) ? notificationObj.Submitter_Comment__c : '');

		} else if('Campaign_Ends'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_CNI_CAMPAIGN_ENDS).replace('{{snippet2}}', String.isNotBlank(notificationObj.Submitter_Comment__c) ? notificationObj.Submitter_Comment__c : '');

		} else if('Mentions_In_Question'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_MENTION_QUESTION);

		} else if('Mentions_In_Answer'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_MENTION_ANSWER);

		} else if('Voted_On_Answer'.equalsIgnoreCase(notificationObj.Category__c)){
			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_ANSWER_VOTE_1);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_ANSWER_VOTE_2);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_ANSWER_VOTE_3);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_ANSWER_VOTE_4);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_ANSWER_VOTE_n).replace('{{count}}', remaningCount);
            }

		} else if('Answer_Approved'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_ANSWER_APPROVAL);

		} else if('New_Answer_To_Question'.equalsIgnoreCase(notificationObj.Category__c)){
			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_1);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_2);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_3);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_4);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_n).replace('{{count}}', remaningCount);
            }

		} else if('Approved_Answer_To_Question'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_APPROVED_ANSWER);

		} else if('Question_Marked_Duplicate'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_QUESTION_DUPLICATE);

		} else if('New_Question'.equalsIgnoreCase(notificationObj.Category__c)){
			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_1);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_2);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_3);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_4);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_n).replace('{{count}}', remaningCount);
            }

		} else if('New_Question_In_Content'.equalsIgnoreCase(notificationObj.Category__c)){
			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_IN_CONTENT_1);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_IN_CONTENT_2);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_IN_CONTENT_3);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_IN_CONTENT_4);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_QUESTION_IN_CONTENT_n).replace('{{count}}', remaningCount);
            }

		}  else if('New_Answer_In_Content'.equalsIgnoreCase(notificationObj.Category__c)){
			if (notificationObj.Action_Count__c == 1) {
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_IN_CONTENT_1);
                            
            } else if (notificationObj.Action_Count__c == 2) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_IN_CONTENT_2);

            } else if (notificationObj.Action_Count__c == 3) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_IN_CONTENT_3);
            
            } else if (notificationObj.Action_Count__c == 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_IN_CONTENT_4);

            } else if (notificationObj.Action_Count__c > 4) {
                notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_QNA_NEW_ANSWER_IN_CONTENT_n).replace('{{count}}', remaningCount);
            }

		} else if('video'.equalsIgnoreCase(notificationObj.Category__c)){
			notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_VIDEO_MANAGE);	

		} else if('recognition_hub'.equalsIgnoreCase(notificationObj.Category__c)){
			if('new_award_10_days_before'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_NEW_AWARD_10_DAYS_BEFORE);
			} else if('existing_award_7_days_before'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_EXISTING_AWARD_7_DAYS_BEFORE);
			} else if('new_award_3_days_before'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_NEW_AWARD_3_DAYS_BEFORE);
			} else if('delegate_open'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_DELEGATE_OPEN);
			} else if('low_participation'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_LOW_PARTICIPATION);
			} else if('delegate_close'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_DELEGATE_CLOSE);
			} else if('overdue_next_open'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_OVERDUE_NEXT_OPEN);
			} else if('overdue_next_close'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_OVERDUE_NEXT_CLOSE);
			} else if('overdue_warning'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_OVERDUE_WARNING);
			} else if('overdue_awarded'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_OVERDUE_AWARDED);
			} else if('award_skipped'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_AWARD_SKIPPED);
			} else if('award_missed'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_AWARD_MISSED);
			} else if('user_open'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_USER_OPEN);
			} else if('user_open_n_awards'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_USER_OPEN_N_AWARDS);
			} else if('award_granted'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_AWARD_GRANTED);
			} else if('award_winner'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_AWARD_WINNER);
			} else if('direct_new_award'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_DIRECT_NEW_AWARD);
			} else if('direct_existing_award'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_DIRECT_EXISTING_AWARD);
			} else if('award_due'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_AWARD_DUE);
			} else if('recognition_recipient'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION);
			} else if('recognition_mention'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_COMMENT_MENTION_RECOGNITION);
			}  else if('award_cheer'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_AWARD_CHEER);
			} else if('recognition_cheer'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_RECOGNITION_CHEER);
			} else if('award_comment'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_AWARD_COMMENT);
			} else if('recognition_comment'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_RECOGNITION_COMMENT);
			} else if('recognition_comment_like'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_RECOGNITION_COMMENT_LIKE);
			} else if('notify_manager_award'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_RECOGNITION_MANAGER_NOTIFY_AWARD);
			} else if('notify_manager_recognition'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_RECOGNITION + KEY_RECOGNITION_MANAGER_NOTIFY_RECOGNITION);
			}

		} else if('survey'.equalsIgnoreCase(notificationObj.Category__c)){
			if('initial'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_INITIAL);
			} else if('reminder_one'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_REMINDER_ONE);
			} if('reminder_two'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_REMINDER_TWO);
			} else if('action_instance'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_ACTION_INSTANCE);
			} else if('action_survey'.equalsIgnoreCase(notificationObj.sub_Type__c)){
				notificationText = LocaleContext.getLabel(languageLocaleKeyArg, KEY_ACTION_SURVEY);
			}
		}
		
		// Replace keys, if exists
		notificationText = notificationText.replace('{{postSnippet}}', snippet);
		notificationText = notificationText.replace('{{commentSnippet}}', snippet);
		notificationText = notificationText.replace('{{replySnippet}}', snippet);  
		notificationText = notificationText.replace('{{mentionSnippet}}', snippet);
		notificationText = notificationText.replace('{{snippet}}', snippet);
		
		notificationText = notificationText.replace('{{contentTitle}}', snippet);

		if(String.isNotBlank(contentType))   {
				contentType = LocaleContext.getLocalisedContentTypeLabel(languageLocaleKeyArg, contentType);	 
				notificationText = notificationText.replace('{{contentType}}', contentType);
				notificationText = notificationText.replace('{{contentType, lowercase}}', contentType.toLowerCase());
		}
		notificationText = notificationText.replace('{{siteName}}', siteName);

		notificationText = notificationText.replace('{{mediaType}}', mediaType);
		notificationText = notificationText.replace('{{mediaType, lowercase}}', mediaType.toLowerCase());
		notificationText = notificationText.replace('{{albumTitle}}', snippet);
		notificationText = notificationText.replace('{{commentAuthorUsername}}', snippet);
		notificationText = notificationText.replace('{{postTitle}}', snippet);
		return Utility.chompString(notificationText, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH);
	}

	public static FileListingWrapper videoToWrapper(File__c fileObjArg) { 
		Boolean isSiteManager = false; 
		Boolean isContentManager = false;
		if(String.isNotBlank(fileObjArg.Site__c)) {
			isSiteManager = (UserContext.sitesIManageIdSet).contains(fileObjArg.Site__c);
			isContentManager = (UserContext.sitesIManageContentsIdSet).contains(fileObjArg.Site__c);
		}
		Boolean isAuthor = UserContext.peopleId.equalsIgnoreCase(fileObjArg.Author__c); 
		FileListingWrapper fileWrapperObj = new FileListingWrapper();
		fileWrapperObj.id = fileObjArg.External_Id__c;
		fileWrapperObj.fileId = fileObjArg.Id;
		fileWrapperObj.externalFileId = fileObjArg.External_Id__c;
		fileWrapperObj.title = fileObjArg.title__c;
		fileWrapperObj.description = fileObjArg.Description__c;
		fileWrapperObj.likeCount = Integer.valueOf(fileObjArg.Likes__c);
		fileWrapperObj.createdAt = Utility.dateTimeToMomentJSDateTime(fileObjArg.CreatedDate);
		if(fileObjArg.LastModifiedDate != NULL) {
			fileWrapperObj.modifiedAt = fileObjArg.LastModifiedDate.format('yyyy-MM-dd\'T\'HH:mm:ss.SSSZ');
		}
		fileWrapperObj.modifiedAtDateTime = fileObjArg.LastModifiedDate;
		if(!fileObjArg.Likes_Simpplr_File__r.isEmpty()){
				fileWrapperObj.isLiked = true;
		}			
		fileWrapperObj.isVideo = true;
		fileWrapperObj.videoStatus = fileObjArg.Video_Status__c != null ? Integer.valueOf(fileObjArg.Video_Status__c) : 1;
		fileWrapperObj.size = fileObjArg.size__c!=null ? Integer.valueOf(fileObjArg.size__c):0; 
		fileWrapperObj.provider = ServiceConstants.VIDEO_PROVIDER_NATIVE;
		fileWrapperObj.context = ServiceConstants.VIDEO_PROVIDER_NATIVE;
		fileWrapperObj.isVideo = true;
		fileWrapperObj.img = fileObjArg.Thumbnail_URL__c;
		fileWrapperObj.thumbnailImg = fileObjArg.Thumbnail_URL__c;
		fileWrapperObj.videoId = fileObjArg.External_Id__c;
		fileWrapperObj.url =  PageContext.getPageURL(Pages.app) + '?u=/video/' + fileObjArg.External_Id__c+'&fileId=' + fileObjArg.External_Id__c + '&provider=' +ServiceConstants.VIDEO_PROVIDER_NATIVE ;
		fileWrapperObj.videoProvider = fileObjArg.Video_Provider__c;			
		fileWrapperObj.thumbnailImg = fileObjArg.Thumbnail_URL__c;
		fileWrapperObj.Owner.id = fileObjArg.Author__c;
		fileWrapperObj.Owner.name = fileObjArg.Author__r.Full_Name__c;
		fileWrapperObj.Owner.url = PageContext.getPageURL(Pages.app) + '?u=/people/' + fileObjArg.Author__c;
		fileWrapperObj.type = fileObjArg.MIME_Type__c;
		if(UserContext.isUserAppModerator) {
			fileWrapperObj.canDelete = true;
		}
		if(UserContext.isUserAppModerator || isSiteManager || isContentManager || isAuthor) {
			fileWrapperObj.canEdit = true;
		}		
		
    	return fileWrapperObj;
	}
	
	public static FileListingWrapper videoFolderToWrapper(Folder__c folderObj) {   
		FileListingWrapper wrapperObj = new FileListingWrapper();
		wrapperObj.id = folderObj.id;
		wrapperObj.title = folderObj.Name__c;
		wrapperObj.type = 'Folder';
		wrapperObj.isDir = true;
		wrapperObj.provider = ServiceConstants.VIDEO_PROVIDER_NATIVE;
		wrapperObj.isSystemDir = folderObj.Is_System_Folder__c;
		wrapperObj.owner.id = folderObj.People__c;
		wrapperObj.owner.name = folderObj.People__r.Full_Name__c;
		wrapperObj.owner.url = PageContext.getPageURL(Pages.app) + '?u=/people/' + folderObj.People__c;
		if(folderObj.LastModifiedDate != NULL) {
			wrapperObj.modifiedAt = folderObj.LastModifiedDate.format('yyyy-MM-dd\'T\'HH:mm:ss.SSSZ');
		}

		Boolean isUserOwnerOrManager = (UserContext.sitesIManageMap.get(folderObj.Site__c) != null) ||
										UserContext.peopleId.equalsIgnoreCase(folderObj.People__c);
		if('readwrite'.equalsIgnoreCase(folderObj.permissions__c)) {
			wrapperObj.canChangeName = true; 						
			wrapperObj.canDelete = true; 						
		} else {
			wrapperObj.canChangeName = isUserOwnerOrManager;
			wrapperObj.canDelete = isUserOwnerOrManager;
		}
		return wrapperObj;
	}

   	  	
}