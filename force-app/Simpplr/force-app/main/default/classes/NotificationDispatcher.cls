public without sharing class NotificationDispatcher {
 
	public static final String KEY_EMAIL_COMMON_SALUTATION = 'email.common.salutation';
	public static final String KEY_EMAIL_COMMON_VIEW_BUTTON = 'email.common.view_button';
	public static final String KEY_EMAIL_COMMON_VIEW_EVENT_BUTTON = 'email.common.view_event_button';
	
	public static final String KEY_EMAIL_COMMON_ORG_POST = 'email.common.original_post';
	public static final String KEY_FOOTER_SETTINGS = 'email.common.footer.settings';
	public static final String KEY_FOOTER_PROMOTION_HEADING = 'email.common.footer.promotion_heading';
	public static final String KEY_FOOTER_PROMOTION_TEXT = 'email.common.footer.promotion_text';
	
	public static final String KEY_COPYRIGHT = 'email.common.footer.copyright';
	public static final String KEY_POWERED_BY = 'email.common.footer.powered_by';

	public static final String KEY_EMAIL_SP_UPGRADE_DONE = 'email.sharepoint.upgrade_done';
	public static final String KEY_EMAIL_SP_UPGRADE_IN_PROGRESS = 'email.sharepoint.upgrade_in_progress';
	
    public static final String KEY_EMAIL_COMMON_FILE_ATTACHED = 'email.common.file_attached';
	public static final String KEY_EMAIL_COMMON_FILE_ATTACHED_PL = 'email.common.file_attached_plural';

	public static final String KEY_FOLLOW_SUBJECT = 'email.notification.profile.follow.subject';
	public static final String KEY_ALREADY_FOLLOWING = 'email.notification.profile.follow.already_following.body';
	public static final String KEY_FOLLOW_INTRO = 'email.notification.profile.follow.intro';
	
	public static final String KEY_ENDORSEMENT_SUBJECT = 'email.notification.profile.expertise.endorse.subject';
	public static final String KEY_ENDORSEMENT_INTRO = 'email.notification.profile.expertise.endorse.intro';

	public static final String KEY_RECOGNITION_SUBJECT = 'email.notification.subject';
	public static final String KEY_RECOGNITION_INTRO = 'email.notification.intro';

	public static final String KEY_POST_REPLY = 'email.notification.post.reply';
	public static final String KEY_POLL_REPLY = 'email.notification.feed.poll.reply';
	public static final String KEY_POST_SHARED_WITH_YOU_REPLY = 'email.notification.post_shared_with_you.reply';
	public static final String KEY_POST_SHARED_WITH_YOU_NO_TEXT_REPLY = 'email.notification.post_shared_with_you.no_text.reply';

	public static final String KEY_FEED_MENTION = 'email.notification.feed.mention';

	public static final String KEY_COMMENT_REPLY = 'email.notification.comment.reply';

	public static final String KEY_POSTED_TO_YOU = 'email.notification.feed.posted_to_you';
	public static final String KEY_FILE_POST_REPLY = 'email.notification.feed.reply.with_file';

	public static final String KEY_CONTENT_COMMENT_LIKE = 'email.notification.content.comment.like';
	public static final String KEY_FEED_POST_LIKE = 'email.notification.feed.post.like';
	public static final String KEY_FEED_REPLY_LIKE = 'email.notification.feed.reply.like';
	public static final String KEY_FEED_REPLY_COMMENT_YOU_LIKED = 'email.notification.feed.reply.comment_you_liked';
	public static final String KEY_FEED_POLL_LIKE = 'email.notification.feed.poll.like';

	public static final String KEY_ALBUM_COMMENT = 'email.notification.content.album.comment';
	public static final String KEY_BLOGPOST_COMMENT = 'email.notification.content.blog_post.comment';
	public static final String KEY_EVENT_COMMENT = 'email.notification.content.event.comment';
	public static final String KEY_PAGE_COMMENT = 'email.notification.content.page.comment';
	
	public static final String KEY_MANAGE_ALBUM_COMMENT = 'email.notification.content.manage.album.comment';
	public static final String KEY_MANAGE_BLOGPOST_COMMENT = 'email.notification.content.manage.blog_post.comment';
	public static final String KEY_MANAGE_EVENT_COMMENT = 'email.notification.content.manage.event.comment';
	public static final String KEY_MANAGE_PAGE_COMMENT = 'email.notification.content.manage.page.comment';

	public static final String KEY_CONTENT_REPLY_LIKE_SUBJECT = 'email.notification.content.reply.like.subject';
	public static final String KEY_CONTENT_REPLY_LIKE_NO_TEXT_SUBJECT = 'email.notification.content.reply.like.no_text.subject';

	public static final String KEY_FEED_POLL_POST_TO_YOU = 'email.notification.feed.poll.posted_to_you';

	public static final String KEY_ALBUM_POLL_NEW = 'email.notification.content.album.poll.posted_to_you';
	public static final String KEY_BLOGPOST_POLL_NEW = 'email.notification.content.blog_post.poll.posted_to_you';
	public static final String KEY_EVENT_POLL_NEW = 'email.notification.content.event.poll.posted_to_you';
	public static final String KEY_PAGE_POLL_NEW = 'email.notification.content.page.poll.posted_to_you';

	public static final String KEY_POST_SHARE = 'email.notification.feed.post.share';
	
	public static final String KEY_RECONNECT_INTEGRATION_EMAIL_SUBJECT = 'email.integration.reconnect_subject';
	public static final String KEY_RECONNECT_INTEGRATION_EMAIL_BODY = 'email.integration.reconnect_info_body';
	public static final String KEY_DISCONNECT_INTEGRATION_EMAIL_SUBJECT = 'email.integration.disconnect_subject';
	public static final String KEY_DISONNECT_INTEGRATION_EMAIL_BODY = 'email.integration.disconnect_info_body';
	public static final String KEY_SUPPORT_LINK_INFO ='email.integration.support_link_info';
	public static final String KEY_MANAGE_APP = 'analytics.page_group.manage_app';

	public static final String KEY_ALBUM_SHARE = 'email.notification.content.album.share';
	public static final String KEY_BLOGPOST_SHARE = 'email.notification.content.blog_post.share';
	public static final String KEY_EVENT_SHARE = 'email.notification.content.event.share';
	public static final String KEY_PAGE_SHARE = 'email.notification.content.page.share';
	
	public static final String KEY_MANAGE_ALBUM_SHARE = 'email.notification.content.manage.album.share';
	public static final String KEY_MANAGE_BLOGPOST_SHARE = 'email.notification.content.manage.blog_post.share';
	public static final String KEY_MANAGE_EVENT_SHARE = 'email.notification.content.manage.event.share';
	public static final String KEY_MANAGE_PAGE_SHARE = 'email.notification.content.manage.page.share';
	
	public static final String KEY_INTRO = '.intro';
	public static final String KEY_SUBJECT = '.subject';
	public static final String KEY_RECOGNITION = '.recognition';
	public static final String KEY_NO_TEXT_SUBJECT = '.no_text.subject';
	public static final String KEY_BODY = '.body';
	public static final String KEY_WITH_TEXT_SUBJECT = '_with_text.subject';
	public static final String KEY_WITH_TEXT_INTRO = '_with_text.intro';

	public static final String KEY_FEED_REPLY_POST_LIKE ='email.notification.feed.reply.post_you_liked';
	
	public static final String KEY_FEED_REPLIED_AFTER ='email.notification.feed.replied_after';
	public static final String KEY_FEED_REPLIED_AFTER_OWN ='email.notification.feed.replied_after_own';
	public static final String KEY_COMMENT_REPLIED_AFTER ='email.notification.content.comment.replied_after';
	public static final String KEY_COMMENT_REPLIED_AFTER_OWN ='email.notification.content.comment.replied_after_own';
	
	public static final String KEY_X_REPLIES = 'common.x_replies';
	public static final String KEY_X_REPLIES_PL = 'common.x_replies_plural';
	public static final String KEY_LABEL_STARTS = 'common.starts';
	public static final String KEY_LABEL_ENDS = 'common.ends';
	public static final String KEY_LABEL_STARTS_ENDS = 'common.starts_ends';

	public static final String KEY_PRIVATE_SITE_REJECTION_SUBJECT = 'email.notification.private_site.rejection.subject';
	public static final String KEY_PRIVATE_SITE_REJECTION_INTRO = 'email.notification.private_site.rejection.intro';
	public static final String KEY_PRIVATE_SITE_APPROVAL_BODY = 'email.notification.private_site.approval.body';
	public static final String KEY_PRIVATE_SITE_APPROVAL_INTRO = 'email.notification.private_site.approval.intro';
	public static final String KEY_PRIVATE_SITE_APPROVAL_SUBJECT = 'email.notification.private_site.approval.subject';

	public static final String KEY_SITE_APPROVAL_BODY = 'email.notification.public_site.approval.body';
	public static final String KEY_PUBLIC_SITE_APPROVAL_INTRO = 'email.notification.public_site.approval.intro';
	public static final String KEY_SITE_APPROVAL_SUBJECT = 'email.notification.public_site.approval.subject';

	public static final String KEY_DIGEST_HTML_TITLE = 'email.notification.batch.digest.html_title';
	public static final String KEY_EMAIL_VIEW_BTN = 'email.common.view_button';
	public static final String KEY_EMAIL_VIEW_DETAILS_RSVP_BUTTON = 'email.notification.view_details_and_rsvp_button';

	public static final String KEY_PRIVATE_SITE_REQUEST_SUBJECT = 'email.notification.private_site.request.intro';
	public static final String KEY_PRIVATE_SITE_REQUEST_INTRO = 'email.notification.private_site.request.intro';

	public static final String KEY_SITE_REQUEST_SUBJECT = 'email.notification.site.request.intro';
	public static final String KEY_SITE_REQUEST_INTRO = 'email.notification.site.request.intro';

	public static final String KEY_SUBSCRIPTION_REQUIRES_ATTENTION_INTRO = 'email.notification.subscription.requires_attention.intro';
	public static final String KEY_SUBSCRIPTION_REQUIRES_ATTENTION_BODY = 'email.notification.subscription.requires_attention.body';

	public static final String KEY_SUBSCRIPTION_APPROVED_INTRO = 'email.notification.subscription.approved.intro';
	public static final String KEY_SUBSCRIPTION_REJECTED_INTRO = 'email.notification.subscription.rejected.intro';
	public static final String KEY_SUBSCRIPTION_APPROVED_BODY = 'email.notification.subscription.approved.body';
	public static final String KEY_SUBSCRIPTION_REJECTED_BODY = 'email.notification.subscription.rejected.body';

	public static final String KEY_RSVP_REMOVED_MSG = 'email.notification.content.event.rsvp_removed.subject_text';
	public static final String KEY_HIGHLIGHTED_RSVP_REMOVED_MSG = 'email.notification.content.event.rsvp_removed.highlighted_message';
	public static final String KEY_HIGHLIGHTED_INVITE_PEOPLE_MSG = 'email.notification.content.event.invite.highlighted_message';
	public static final String KEY_EMAIL_COMMON_EVENT_AUTHOR = 'email.notification.common.event_author';
	public static final String KEY_EVENT_PUBLISHED_EDITED_TEXT = 'email.notification.content.event.event_published_edited_text';

	public static final String KEY_EVENT_MANAGING_DELETED_MSG = 'email.notification.event.delete.managing_subject';
	public static final String KEY_EVENT_RESPONDED_DELETED_MSG= 'email.notification.event.delete.responded_subject';

	public static final String KEY_EVENT_MANAGING_UNPUBLISHED_MSG = 'email.notification.event.unpublished.managing_subject_msg';
	public static final String KEY_EVENT_RESPONDED_UNPUBLISHED_MSG = 'email.notification.event.unpublished.responded_subject';

	public static final String KEY_EVENT_MANAGING_UPDATED_MSG = 'email.notification.event.updated.managing_subject';
	public static final String KEY_EVENT_RESPONDED_UPDATED_MSG = 'email.notification.event.updated.responded_subject';

	public static final String KEY_HIGHLIGHTED_EVENT_UNPUBLISHED_MSG = 'email.notification.event.unpublished.highlighted_message';
	public static final String KEY_HIGHLIGHTED_EVENT_UPDATED_MSG = 'email.notification.event.updated.highlighted_message';
	public static final String KEY_HIGHLIGHTED_EVENT_DELETED_MSG = 'email.notification.event.delete.highlighted_message';
	public static final String KEY_EMAIL_VIEW_ALL_RESPONDENTS_BUTTON = 'email.view_all_respondent_button';
	public static final String KEY_HIGHLIGHTED_RSVP_CONFIRMED_MSG = 'email.notification.content.event.rsvp_confirmed.highlighted_message';
	public static final String KEY_EMAIL_RSVP_CONFIRM_VIEW_BUTTON = 'email.notification.content.event.rsvp.confirmed.view_button';
	public static final String KEY_RSVP_CONFIRMATION_MSG = 'email.notification.content.event.rsvp_confirmation.message';
	public static final String KEY_EMAIL_RSVP_VIEW_LINK_TEXT = 'email.notification.content.event.view_link_text';
	public static final String KEY_EMAIL_EVENT_ADD_TO_CALENDAR_BUTTON = 'email.notification.content.event.add_to_calendar_button';
	
	public static final String KEY_CSV_FILE_AVAILABLE = 'email.notification.csv.file.available';
	public static final String KEY_SUCCESS_CSV_FILE_AVAILABLE = 'email.notification.success.csv.file.available';
	public static final String KEY_CLICK_AND_LOGIN_TO_DOWNLOAD = 'email.notification.csv.click_and_login';
	public static final String KEY_FILE_WILL_BE_AVAILABLE_FOR_72_HOURS = 'email.notification.csv.file_will_be_available_for_72_hours';
	public static final String KEY_KEY_MUST_READ_HISTORY = 'email.notification.csv.must_read_history';
	public static final String USER_INTEGRATION_EMAIL_TEMPLATE = 'email.notification.integration.user.disconnected';
	public static final String KEY_ANALYTICS_CSV_FILE_AVAILABLE = 'email.notification.analytics.csv.file.available';
	public static final String KEY_SUCCESS_ANALYTICS_CSV_FILE_AVAILABLE = 'email.notification.success.analytics.csv.file.available';
	public static final String KEY_KEY_ADOPTION_BEHAVIOR = 'email.notification.csv.adoption_behavior';
	public static final String KEY_KEY_ADOPTION = 'email.notification.csv.adoption';
	public static final String KEY_KEY_PEOPLE = 'email.notification.csv.people';
	public static final String KEY_KEY_FAVOURITES_RECEIVED = 'email.notification.csv.favourites_received';
	public static final String KEY_KEY_LIKES_MADE = 'email.notification.csv.likes_made';
	public static final String KEY_KEY_LIKES_RECEIVED = 'email.notification.csv.likes_received';
	public static final String KEY_KEY_FEED_POSTS = 'email.notification.csv.feed_posts';
	public static final String KEY_KEY_REPLIES = 'email.notification.csv.replies';
	public static final String KEY_KEY_REPLIES_FROM = 'email.notification.csv.replies_from';
	public static final String KEY_KEY_SHARES_RECEIVED = 'email.notification.csv.shares_received';
	public static final String KEY_KEY_PROFILE_VIEWS = 'email.notification.csv.profile_views';
	public static final String KEY_KEY_CONTENT_PUBLISHED = 'email.notification.csv.content_published';
	public static final String KEY_KEY_DOWNLOAD = 'email.notification.csv.download';
	public static final String KEY_KEY_SITE_ANALYTICS = 'email.notification.csv.site_analytics';

	public static void initLangKeyValueMap(List<People_Preference__c> PeoplePrefList) {
        Set<String> localeSet = new Set<String>();
		for(People_Preference__c peoplePrefObj : PeoplePrefList){
			localeSet.add(Utility.getSimpplrLanguageLocaleKey(peoplePrefObj.User__r.languagelocalekey));
		}
		LocaleContext.getAllLabelMap('EmailNotifications', new List<String>(localeSet));
    }
	
	private static final String VIEW_LABEL_PLACEHOLDER = '{1}';
	private static final String ORGINAL_POST_LABEL_PLACEHOLDER = '{2}';
	private static final String REPLIES_LABEL_PLACEHOLDER = '{3}';
	private static final String FILES_ATTACHED_LABEL_PLACEHOLDER = '{4}';
	

	 
	public static String contentKeyPrefix = Utility.getSimpplrContentPrefix();
	public static final String POST_SHARE_SUBJECT = ' shared your Post';
	public static final String POST_LINK_SHARE_SUBJECT = ' shared your Link';
	
	public static final String POST_LIKE = ' liked your';
	public static final String COMMENT_LIKE_ON_POST_ON_YOUR_PROFILE = ' liked your reply on your Feed ';
	public static final String COMMENT_LIKE = ' liked your reply ';
	public static final String POST_ON_CONTENT_PUBLISHED = ' published by you ';
	public static final String FOLLOW_SUBJECT = ' is now following you ';
	
	public static final String REPLY_TO_POST_OWNER = ' replied to you ';
	public static final String REPLIED_AFTER_YOU = ' replied after you '; 
	public static final String COMMENT_ON_A_CHANGE_ON_YOUR_PROFILE = ' replied to a change to your Profile ';
	public static final String COMMENT_ON_A_CHANGE_ON_SITE = ' replied to your Site change Post';
	public static final String COMMENT_ON_A_CHANGE_ON_CONTENT = ' replied to your Content change Post';
	
	public static final String REPLY_TO_POST_LIKED = ' replied to a Post you liked ';
	public static final String REPLY_TO_COMMENT_LIKED = ' replied to a comment you liked ';
	
	public static final String PRIVATE_SITE_JOIN_REQUEST = ' your request to join '; 
	
	public static final String REQUEST_RESPONSE_TEXT = 'your request has been';

	public static final String TYPE_INFORMATION = 'Information';
	public static final String TYPE_ACTIONABLE = 'Actionable';
	
	public static final String SUB_TYPE_POST = 'Post';
	public static final String SUB_TYPE_LIKE = 'Like';
	public static final String SUB_TYPE_MADE_CONTENT_AUTHOR = 'Content Author';
	public static final String SUB_TYPE_UPDATE = 'Content edited/updated by ';
	public static final String SUB_TYPE_MENTION = 'Mention';
	public static final String SUB_TYPE_SHARE = 'Share';
	public static final String SUB_TYPE_COMMENT = 'Comment';
	public static final String SUB_TYPE_ADD_MEDIA_TO_ALBUM = 'Add Media To Album';
	public static final String SUB_TYPE_ADD_MEDIA_MODERATION = 'Add Media Moderation';
	
	public static final String NOTIFICATION_STATUS = 'Pending';
	
	public static final String OBJECT_TYPE_FEEDITEM = 'FeedItem';
	public static final String OBJECT_TYPE_FEEDCOMMENT = 'FeedComment';
	
	public static final String OBJECT_TYPE_CONTENT_FEEDITEM = 'ContentFeedItem';
	public static final String OBJECT_TYPE_CONTENT_FEEDCOMMENT = 'ContentFeedComment';

	public static final String KEY_FAILED_NEWSLETTER = 'email.notification.newsletter.on_hold';

	private static List<String> postedAFileStrings = new List<String>{'posted a file.', 'ha publicado un archivo.', 'a publié un fichier.'};
	private static List<DateTime> listOfCreatedDateTime = new List<DateTime>();
    
    public static People__c loggedInUserInfo{ get {
    	if(loggedInUserInfo == null){
	    	loggedInUserInfo = UserContext.getCurrentUserInfo;
		}
		return loggedInUserInfo;
    } set;}
    
	public static String baseUrl = BaseCtrl.salesForceBaseUrl;
	/* ****************************************************************************************************************************************************** */
	public static void sendPollPostNotificationAndEmail(String feedItemId){
		try {
			List<FeedItem> feedItemList = [Select id,body,title, parentId,Parent.type,parent.name, createdById,createdBy.Name, createdDate, type from feeditem where id=:feedItemId limit 1];
			sendFeedItemNotificationsAndEmail(feedItemList,'Page');
		} catch(Exception e){
			logger.logError('Unable to send Poll Post Email',e);
		}
	}
	
	public static void sendNotificationEmailForContentFeedback( Set<String> listOfAdminUsers, List<NotificationDao.Notification> notiWrapperList, String rateComment) {
		try{
			String objectId = notiWrapperList[0].objectID;
			List<Simpplr_Content__c> contentList = [select id, title__c,type__c,site__c,Site__r.Chatter_Group_Id__c, Primary_Author__c, Primary_Author__r.User__c, Display_Excerpt__c, Site__r.Name,Primary_Author__r.External_Photo_URL__c, Primary_Author__r.External_Photo_URL_Expiry_Date__c, Primary_Author__r.Full_Name__c from simpplr_content__c where id = :objectId limit 1 ];
			List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
			List<People_Preference__c> peoplePrefList;
			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', UserInfo.getUserId());
			soqlParamMap.put('soqlParam2', listOfAdminUsers);
			String query = '';

			if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
				soqlParamMap.put('soqlParam3', SimpplrContext.packageName);
				query = 'Select id, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, ' 
						+ ' People__r.user__r.userName, Receive_Content_Useful_Notifications__c, People__r.Segment__r.Id, '  
						+ '  People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey ' 
						+ '  From People_Preference__c '  
						+ '  where Allow_Simpplr_Emails__c = true and Email_Content_Useful__c = true '  
						+ '  and Email_Notification_Digest_Frequency__c=\'Immediate\' '  
						+ '  and  people__r.Id IN: soqlParam2 '  
						+ '  and people__r.User__r.IsActive=true ' 
						+ '  and User__c!=:soqlParam1 ' 
						+ '  and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam3)';
			} else {
				query = 'Select id, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, ' 
						+ '  People__r.user__r.userName, Receive_Content_Useful_Notifications__c, People__r.Segment__r.Id, ' 
						+ '  People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey ' 
						+ '  From People_Preference__c '
						+ '  where Allow_Simpplr_Emails__c = true and Email_Content_Useful__c = true '
						+ '  and Email_Notification_Digest_Frequency__c=\'Immediate\' ' 
						+ '  and User__c!=:soqlParam1 '
						+ '  and People__r.Id IN: soqlParam2 ' 
						+ '  and people__r.User__r.IsActive=true';
			}
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
			initLangKeyValueMap(peoplePrefList);
			Map<String, People_Preference__c> peoplePrefMap = new Map<String, People_Preference__c>();
			for(People_Preference__c peoplePref : peoplePrefList) {
				peoplePrefMap.put(peoplePref.people__r.user__c, peoplePref);
			}
			
			if(!peoplePrefMap.isEmpty() && contentList.size() > 0 ) { 
				String KEY_CONTENT_FEEDBACK = 'email.notification.content.feedback';
				for(People_Preference__c peoplePref : peoplePrefList) {
					String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePref.User__r.languagelocalekey);
					NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)peoplePref.People__r);
					String subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_FEEDBACK + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
													.replace('{{contentTitle}}', Utility.chompString(contentList[0].title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH));
					
					String introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_FEEDBACK + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					String body = rateComment;
					
					String contentLink = baseUrl + Page.PageRedirector.getUrl() + 
													'?siteId=' + contentList[0].site__c +
													'&contentId='+contentList[0].id +
													'&pageToRedirect=ContentDetailPage' + 
													'&origin=ne&contentType=' + contentList[0].type__c.tolowercase() + 
													'&openUsefulHistory=1'+
													'&utm_term=content_flagged_not_useful'+
													'&utm_source=activity_notifications_email'+
													'&utm_medium=email' ;

					String emailBody = getContentActionEmailBody(peoplePrefMap.get(peoplePref.user__c), introText, body, null, contentLink);
					emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,peoplePref.user__c, SimpplrContext.SEDFromEmail));
					
				}
				if(!emailObjList.isEmpty()) {
					sendEmails(emailObjList);
				}
			}
		} catch(Exception e){
			logger.logError('NotificationDispatcher.sendNotificationEmailForContentFeedback()----Exception occured----',e);
		}
	}

	/* ****************************************************************************************************************************************************** */
	public static void sendPrivateSiteRequestNotification(String requestId, String siteId, String siteName, List<People__c> listOfSiteAdmins){
		try {
			
			List<NotificationDao.Notification> listOfNewNotifications = new List<NotificationDao.Notification>();
			String guid = UserContext.id + '-' + System.currentTimeMillis();
			for(People__c peopleObj : listOfSiteAdmins) {
				NotificationDao.Notification notificationWrapObj = new NotificationDao.Notification();
				notificationWrapObj.fromUser = UserContext.peopleId;
				notificationWrapObj.toUser = peopleObj.Id;
				notificationWrapObj.GUID = guid;
				notificationWrapObj.objectID = requestId;
				notificationWrapObj.objectType = 'CollaborationGroupMemberRequest';
				notificationWrapObj.status = NOTIFICATION_STATUS;
				notificationWrapObj.type = TYPE_ACTIONABLE;
				notificationWrapObj.subType = 'Review';
				notificationWrapObj.isRead = false;
				notificationWrapObj.isNew = true;
				notificationWrapObj.snippet = siteName;
				notificationWrapObj.siteId = siteId;
				notificationWrapObj.isDeleted = false;
				notificationWrapObj.categoryStr = 'Private_Site_Membership_Requests';
				notificationWrapObj.parentObjectID = siteId;
				// notificationWrapObj.submitterComment,
				// notificationWrapObj.contentId,

				listOfNewNotifications.add(notificationWrapObj);				
			}
			(new NotificationDao()).createAndSendPushNotifications(UserContext.peopleId, listOfNewNotifications);
		} catch(Exception e){
			logger.logError('Unable to send PrivateSiteRequestNotificationAndEmail email',e);
		}
	}

	public static void sendMemberAddedNotification(String siteId, String siteName, List<People__c> peopleList){
		try {
			
			List<App_Notification__c> listOfNewNotifications = new List<App_Notification__c>();
			String guid = UserContext.id + '-' + System.currentTimeMillis();
			for(People__c peopleObj : peopleList) {
				App_Notification__c notificationObject = new App_Notification__c();
				
				notificationObject.Sent_By__c = UserContext.peopleId;
				notificationObject.GUID__c = guid;
				notificationObject.Object_Id__c = peopleObj.Id;
				notificationObject.Object_Type__c = 'SiteMember';
				notificationObject.Status__c = NOTIFICATION_STATUS;
				notificationObject.Type__c = 'Information';
				notificationObject.Sub_Type__c = 'Review';
				notificationObject.Is_Read__c = false;
				notificationObject.Is_New__c = true;
				notificationObject.Snippet__c =   siteName;
				notificationObject.Sent_to__c = peopleObj.Id;
				notificationObject.Simpplr_Site__c = siteId;
				notificationObject.Created_DateTime__c = DateTime.now();
				notificationObject.Category__c = 'Member_Added';
				listOfNewNotifications.add(notificationObject);
			}
			NotificationDao.createNotifications(listOfNewNotifications);
		} catch(Exception e){
			logger.logError('Unable to send sendMemberAddedNotification',e);
		}
	}

	public static void sendNewSiteOnboardingNotification(String siteId, String siteName, List<People__c> peopleList){
		try {
			
			List<App_Notification__c> listOfNewNotifications = new List<App_Notification__c>();
			for(People__c peopleObj : peopleList) {
				App_Notification__c notificationObject = new App_Notification__c();
				
				notificationObject.Object_Id__c = peopleObj.Id;
				notificationObject.Object_Type__c = 'NewSiteOnboarding';
				notificationObject.Status__c = NOTIFICATION_STATUS;
				notificationObject.Type__c = 'Information';
				notificationObject.Sub_Type__c = 'New Site Onboarding Content';
				notificationObject.Is_Read__c = false;
				notificationObject.Is_New__c = true;
				notificationObject.Snippet__c =   siteName;
				notificationObject.Sent_to__c = peopleObj.Id;
				notificationObject.Simpplr_Site__c = siteId;
				notificationObject.Created_DateTime__c = DateTime.now();
				notificationObject.Category__c = 'New_Site_Onboarding_Content';
				listOfNewNotifications.add(notificationObject);
			}
			NotificationDao.createNotifications(listOfNewNotifications);
		} catch(Exception e){
			logger.logError('Unable to send sendNewSiteOnboardingNotification',e);
		}
	}

	public static void sendPublicSiteRequestNotification(String requestId, String siteId, String siteName, List<People__c> listOfSiteAdmins){
		try {
			List<NotificationDao.Notification> listOfNewNotifications = new List<NotificationDao.Notification>();
			String guid = UserContext.id + '-' + System.currentTimeMillis();
			for(People__c peopleObj : listOfSiteAdmins) {
				NotificationDao.Notification notificationWrapObj = new NotificationDao.Notification();
				notificationWrapObj.fromUser = UserContext.peopleId;
				notificationWrapObj.toUser = peopleObj.Id;
				notificationWrapObj.GUID = guid;
				notificationWrapObj.objectID = requestId;
				notificationWrapObj.objectType = 'PublicSiteMemberRequest';
				notificationWrapObj.status = NOTIFICATION_STATUS;
				notificationWrapObj.type = TYPE_ACTIONABLE;
				notificationWrapObj.subType = 'Review';
				notificationWrapObj.isRead = false;
				notificationWrapObj.isNew = true;
				notificationWrapObj.snippet = siteName;
				notificationWrapObj.siteId = siteId;
				notificationWrapObj.isDeleted = false;
				notificationWrapObj.categoryStr = 'Public_Site_Membership_Requests';
				notificationWrapObj.parentObjectID = siteId;
				// notificationWrapObj.submitterComment,
				// notificationWrapObj.contentId,

				listOfNewNotifications.add(notificationWrapObj);				
			}
			(new NotificationDao()).createAndSendPushNotifications(UserContext.peopleId, listOfNewNotifications);
		} catch(Exception e){
			logger.logError('Unable to send PublicSiteRequestNotification',e);
		}
	}

	public static void sendPrivateSiteRequestNotificationEmail(String requestId, String siteId, String siteName, Set<Id> listOfAdminUsers ) {
		try{
			List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
			List<People_Preference__c> peoplePrefList;
			

			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', listOfAdminUsers);
			String query = '';	

			if (String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
				soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
				query  = 'Select id, people__r.user__c, People__r.First_Name__c, '
						+ ' People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, ' 
						+ ' Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, ' 
						+ ' People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, ' 
						+ ' User__r.languagelocalekey '
						+ ' From People_Preference__c '
						+ ' where Allow_Simpplr_Emails__c = true and ' 
						+ ' Email_Notification_Digest_Frequency__c=\'Immediate\' and ' 
						+ ' Email_Private_Site_Membership_Requests__c=true and '  
						+ ' people__r.user__c IN: soqlParam1 and people__r.User__r.IsActive=true  and '
						+ ' people__r.User__r.UserType=\'Standard\' and ' 
						+ ' User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
			} else {
				query = 'Select id, people__r.user__c, People__r.First_Name__c, ' 
						+ ' People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, ' 
						+ ' Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, '  
						+ ' People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, ' 
						+ ' User__r.languagelocalekey ' 
						+ ' From People_Preference__c ' 
						+ ' where Allow_Simpplr_Emails__c = true and '
						+ ' Email_Notification_Digest_Frequency__c=\'Immediate\' and ' 
						+ ' Email_Private_Site_Membership_Requests__c=true and '  
						+ ' people__r.user__c IN: soqlParam1 and ' 
						+ ' people__r.User__r.IsActive=true  and ' 
						+ ' people__r.User__r.UserType=\'Standard\'';
			}
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
			initLangKeyValueMap(peoplePrefList);
			for (People_Preference__c preferenceObj: peoplePrefList) {
				NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)preferenceObj.People__r);
				
				if (!UserContext.id.equalsIgnoreCase(preferenceObj.people__r.user__c)) {
					String localeKey = Utility.getSimpplrLanguageLocaleKey(preferenceObj.User__r.languagelocalekey);
					String subjectStr = LocaleContext.getLabel(localeKey, KEY_SITE_REQUEST_SUBJECT);
					subjectStr = subjectStr.replace('{{fullName}}',loggedInUserInfo.Full_Name__c);
					subjectStr = subjectStr.replace('{{siteName}}', siteName);
					String subject = subjectStr;
					
					String emailBody = getPrivateSiteRequestNotificationEmailBody(preferenceObj.People__c, 
							preferenceObj.people__r.user__c, preferenceObj.People__r.First_Name__c, 
							preferenceObj.People__r.user__r.userName, subject, requestId, siteId, 
							siteName, preferenceObj.People__r.Last_Name__c, localeKey, (People__c)preferenceObj.people__r);
					emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody, 
							preferenceObj.people__r.user__c, SimpplrContext.SEDFromEmail));
				}

			}

			if(!emailObjList.isEmpty()) {
				sendEmails(emailObjList);
			}
		} catch(Exception e){
			logger.logError('Unable to send PrivateSiteRequestNotificationEmail email',e);
		}
	}

	public static void sendPublicSiteAutomaticRequestApprovedNotification(String requestId, String siteId, String snippet, List<People__c> listOfSiteAdmins){
		try {
			
			List<App_Notification__c> listOfNewNotifications = new List<App_Notification__c>();
			String guid = UserContext.id + '-' + System.currentTimeMillis();
			for(People__c peopleObj : listOfSiteAdmins) {
				App_Notification__c notificationObject = new App_Notification__c();
				
				notificationObject.Sent_By__c = UserContext.peopleId;
				notificationObject.GUID__c = guid;
				notificationObject.Object_Id__c = requestId;
				notificationObject.Object_Type__c = 'PublicSiteMemberRequestAutoApprove';
				notificationObject.Status__c = NOTIFICATION_STATUS;
				notificationObject.Type__c = TYPE_INFORMATION;
				notificationObject.Sub_Type__c = 'Review';
				notificationObject.Is_Read__c = false;
				notificationObject.Is_New__c = true;
				notificationObject.Snippet__c =   snippet;
				notificationObject.Sent_to__c = peopleObj.Id;
				notificationObject.Simpplr_Site__c = siteId;
				notificationObject.Created_DateTime__c = DateTime.now();
				notificationObject.Category__c = 'Public_Site_Membership_Request_Auto_Approve';
				listOfNewNotifications.add(notificationObject);
			}
			NotificationDao.createNotifications(listOfNewNotifications);
		} catch(Exception e){
			logger.logError('Unable to send PublicSiteRequestNotification',e);
		}
	}
	
    public static void sendPendingSubscriptionNotification(List<Subscription_Entity__c> listOfSiteSubscriptions) {
    	try{
	    	List<App_Notification__c> listOfNotification = new List<App_Notification__c>();
	    	Map<Id, Id> subsEntityIdAndGroupIdMap = new Map<Id, Id>();
	    	
	    	for(Subscription_Entity__c subsEntityObj : listOfSiteSubscriptions) {
	    		subsEntityIdAndGroupIdMap.put(subsEntityObj.Id, subsEntityObj.Site__r.Chatter_Group_Id__c);
	    	}
	    	
	    	Map<Id, List<Id>> groupIdAndManagersIdsMap = getgroupIdAndManagersIdsMap(subsEntityIdAndGroupIdMap.values());
	    	
	    	List<Id> allManagersList = new List<Id>();
	    	for(List<Id> userList : groupIdAndManagersIdsMap.values()) {
	    		allManagersList.addAll(userList);
	    	}
	    	
	    	Map<Id, People_Preference__c> userIdAndPPMap = getUserIdAndPPMap(allManagersList);
	    	
	    	for(Subscription_Entity__c subsEntityObj : listOfSiteSubscriptions) {
	    		Id groupId4Subscription = subsEntityIdAndGroupIdMap.get(subsEntityObj.Id);
	    		
	    		List<Id> groupManagersIdList = groupIdAndManagersIdsMap.get(groupId4Subscription);
	    		
	    		String guid = UserContext.id + '-' + System.currentTimeMillis(); // TODO - is it fine here or should be above parent for-loop ?
	    		
	    		for(Id userId : groupManagersIdList) {
					if(userIdAndPPMap.get(userId) == null){
						continue;
					}
	    			People_Preference__c peoplePrefObj = userIdAndPPMap.get(userId);
	    			String peopleId = peoplePrefObj.People__c;
	    			
	    			App_Notification__c notificationObject = new App_Notification__c();
		            notificationObject.GUID__c = guid;
		            notificationObject.Object_Id__c = subsEntityObj.Subscription__c;
		            notificationObject.Object_Type__c = 'Subscription';
		            notificationObject.Status__c = 'Pending';
		            notificationObject.Type__c = 'Actionable';
		            notificationObject.Sub_Type__c = 'Review';
		            notificationObject.Is_Read__c = false;
		            notificationObject.Is_New__c = true;
		            notificationObject.Category__c = 'Subscription_Request';
		            notificationObject.Snippet__c = subsEntityObj.Site__r.Name;
		            notificationObject.Sent_to__c = peopleId;
		            notificationObject.Sent_By__c = loggedInUserInfo.id;
		            notificationObject.Simpplr_Site__c = subsEntityObj.Site__c;
		            notificationObject.Created_DateTime__c = DateTime.now();
		            
		            listOfNotification.add(notificationObject);
	    		}
	    		
	    	}
	    	
	    	NotificationDao.createNotifications(listOfNotification);
    	} catch(Exception e){
			logger.logError('Unable to send Pending Subscription Notification ',e);
		}
    }
     
	public static void sendPendingSubscriptionNotificationEmail(List<Subscription_Entity__c> listOfSiteSubscriptions) {
		try{
			if(SimpplrContext.enableEmail){
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				List<People_Preference__c> peoplePreList;
				
				Map<Id, Id> subsEntityIdAndGroupIdMap = new Map<Id, Id>();
				Map<Id, List<Subscription_Entity__c>> managerAndSiteMap = new Map<Id, List<Subscription_Entity__c>>();
				for(Subscription_Entity__c subsEntityObj : listOfSiteSubscriptions) {
					subsEntityIdAndGroupIdMap.put(subsEntityObj.Id, subsEntityObj.Site__r.Chatter_Group_Id__c);
					if(!managerAndSiteMap.containsKey(subsEntityObj.People__r.User__c)){
						managerAndSiteMap.put(subsEntityObj.People__r.User__c, new List<Subscription_Entity__c>());
					}
					managerAndSiteMap.get(subsEntityObj.People__r.User__c).add(subsEntityObj);
				}
				
				Map<Id, List<Id>> groupIdAndManagersIdsMap = getGroupIdAndManagersIdsMap(subsEntityIdAndGroupIdMap.values());
				Set<Id> allManagers = new Set<Id>(); 
				for(List<Id> userIds : groupIdAndManagersIdsMap.values()){
					allManagers.addAll(userIds);	
				}
				
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', allManagers);
				String query = '';

				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
					query = 'Select id, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.timeZonesidkey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__r.user__c IN: soqlParam1 and people__r.User__r.IsActive=true and Email_Subscription_Request__c = true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
				} else {
					query = 'Select id, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.timeZonesidkey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__r.user__c IN: soqlParam1 and people__r.User__r.IsActive=true and Email_Subscription_Request__c = true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePreList);
				Map<String, People_Preference__c> peoplePrefMap = new Map<String, People_Preference__c>();
				for(People_Preference__c peoplePref : peoplePreList) {
					peoplePrefMap.put(peoplePref.people__r.user__c, peoplePref);
				}
				if(!peoplePrefMap.isEmpty()) {
					for(Subscription_Entity__c subscriptionEntityObj : listOfSiteSubscriptions){	
						Id chatterGroupId = (Id)subscriptionEntityObj.Site__r.Chatter_Group_Id__c;
						for(Id userId : groupIdAndManagersIdsMap.get(chatterGroupId)) {
							if(peoplePrefMap.containsKey(userId)) {
								People_Preference__c preferenceObj = peoplePrefMap.get(String.valueOf(userId));
								String localeKey = Utility.getSimpplrLanguageLocaleKey(preferenceObj.User__r.languagelocalekey);
								NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)preferenceObj.People__r);
								String subject = LocaleContext.getLabel(localeKey, 'email.notification.subscription.requires_attention.subject').replace('{{fullName}}', loggedInUserInfo.Full_Name__c) ;
								String emailBody = getPendingSubscriptionNotificationEmailBody(peoplePrefMap.get(userId).People__c, userId, peoplePrefMap.get(userId).People__r.First_Name__c, peoplePrefMap.get(userId).People__r.user__r.userName, subject, subscriptionEntityObj.Site__c, subscriptionEntityObj.Site__r.Name, peoplePrefMap.get(userId).People__r.Last_Name__c, localeKey, (People__c) peoplePrefMap.get(userId).People__r, preferenceObj);
								emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,String.valueOf(userid), SimpplrContext.SEDFromEmail));							
							}
						}
					}
					if(!emailObjList.isEmpty()) {
						sendEmails(emailObjList);
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send Pending Subscription Notification email',e);
		}
	}
	
    public static void sendSubscriptionApprovalRejectNotification(String siteId, String siteName, String subscriptionId, String action) {
    	try{
	    	List<App_Notification__c> listOfNotificationsSent = [SELECT Id, Sent_By__c, Sent_To__c, Is_Read__c, Is_New__c, Status__c, Action_By__c, Action_On__c FROM App_Notification__c Where Object_Id__c = :subscriptionId AND Simpplr_Site__c = :siteId AND Is_Deleted__c = false AND Type__c = 'Actionable' And Status__c='Pending'];
	    	Set<String> setOfSentByPeople = new Set<String>();
	    	Set<String> setOfSentToPeople = new Set<String>();
	    	
	    	for(App_Notification__c appNotification : listOfNotificationsSent){
	    		setOfSentByPeople.add(appNotification.Sent_By__c);
	    		setOfSentToPeople.add(appNotification.Sent_To__c);
	    	}
	    	
    		String guid = UserContext.id + '-' + System.currentTimeMillis();
    		List<App_Notification__c> listOfNotificationsToInsert = new List<App_Notification__c>();
    		List<App_Notification__c> listOfNotificationsToUpdate = new List<App_Notification__c>();
    		
    		for(String peopleId : setOfSentByPeople) {
    			App_Notification__c notificationObject = new App_Notification__c();
	            notificationObject.GUID__c = guid;
	            notificationObject.Object_Id__c = subscriptionId;
	            notificationObject.Object_Type__c = 'Subscription';
	            notificationObject.Status__c = 'Pending';
	            notificationObject.Type__c = 'Information';
	            notificationObject.Sub_Type__c = 'Review';
	            notificationObject.Is_Read__c = false;
	            notificationObject.Is_New__c = true;
				if('approved'.equalsIgnoreCase(action)){
					notificationObject.Category__c = 'Subscription_Approved';
				} else {
					notificationObject.Category__c = 'Subscription_Rejected';
				}
	            notificationObject.Snippet__c = siteName;
	            notificationObject.Sent_to__c = peopleId;
	            notificationObject.Sent_By__c = loggedInUserInfo.id;
	            notificationObject.Simpplr_Site__c = siteId; 
	            notificationObject.Created_DateTime__c = DateTime.now();
	            
	            listOfNotificationsToInsert.add(notificationObject);
    		}	
    		
    		for(App_Notification__c appNotification : listOfNotificationsSent){
    			if(setOfSentToPeople.contains(appNotification.Sent_to__c)){
    				appNotification.Is_Read__c = true;
    				appNotification.Is_New__c = false;
    				appNotification.Status__c = action.capitalize();	
    				appNotification.Action_By__c = 	loggedInUserInfo.id; 
    				appNotification.Action_On__c = 	DateTime.now();
					if('approved'.equalsIgnoreCase(action)){
						appNotification.Category__c = 'Subscription_Approved';
					} else {
						appNotification.Category__c = 'Subscription_Rejected';
					}
    				listOfNotificationsToUpdate.add(appNotification);
    			}
    		}

	    	NotificationDao.createNotifications(listOfNotificationsToInsert);

			List<Schema.SObjectField> listOfColumnsToBeUpdated = new List<Schema.SObjectField>{
				App_Notification__c.Is_Read__c,
				App_Notification__c.Is_New__c,
				App_Notification__c.Action_By__c,
				App_Notification__c.Action_On__c,
				App_Notification__c.Category__c,
				App_Notification__c.Status__c
			};

	    	NotificationDao.updateNotification(listOfNotificationsToUpdate, listOfColumnsToBeUpdated);
			
			if(SimpplrContext.enableEmail) {
	    		sendSubscriptionApprovalRejectNotificationEmail(siteId, siteName, subscriptionId, action, listOfNotificationsSent);
			}
    	} catch(Exception e){
			logger.logError('Unable to send Subscription ' + action + ' Notification ',e);
		}
    }
    
	public static void sendSubscriptionApprovalRejectNotificationEmail(String siteId, String siteName, String subscriptionId, String action, List<App_Notification__c> listOfNotificationsSent) {
		try{ 
			List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
			List<People_Preference__c> peoplePreList; 
				
			Set<String> setOfSentByPeople = new Set<String>();
			
			for(App_Notification__c appNotification : listOfNotificationsSent){
				setOfSentByPeople.add(appNotification.Sent_By__c);
			}
			logger.logDebug('setOfSentByPeople ' + setOfSentByPeople);
			
			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', setOfSentByPeople);
			String query = '';

			if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
				soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
				query = 'Select id, People__c, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.timeZonesidkey From People_Preference__c where Allow_Simpplr_Emails__c = true AND Email_Subscription_Moderation__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__c IN: soqlParam1 and people__r.User__r.IsActive=true  and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
			} else {
				query = 'Select id, People__c, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.timeZonesidkey From People_Preference__c where Allow_Simpplr_Emails__c = true AND  Email_Subscription_Moderation__c= true AND Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__c IN: soqlParam1 and people__r.User__r.IsActive=true  and people__r.User__r.UserType=\'Standard\'';
			}
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
			initLangKeyValueMap(peoplePreList);

			String keySubscriptionApproved = 'email.notification.subscription.approved.subject';
			String keySubscriptionRejected = 'email.notification.subscription.rejected.subject';
			for(People_Preference__c preferenceObj : peoplePreList){
				String userLanguage = Utility.getSimpplrLanguageLocaleKey(preferenceObj.User__r.languagelocalekey);
				NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)preferenceObj.People__r);
				String subject;
				String emailBody = '';
				if('approved'.equalsIgnoreCase(action)){	
					subject = LocaleContext.getLabel(userLanguage, keySubscriptionApproved)
														.replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					emailBody= getSubscriptionApprovalRejectionEmailBody('approved', preferenceObj, subject, siteName, subscriptionId, userLanguage);
				
				} else if('rejected'.equalsIgnoreCase(action)){
					subject = LocaleContext.getLabel(userLanguage, keySubscriptionRejected)
														.replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					emailBody= getSubscriptionApprovalRejectionEmailBody('rejected', preferenceObj, subject, siteName, subscriptionId, userLanguage);
				}

				emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody, preferenceObj.People__r.User__c, SimpplrContext.SEDFromEmail));													
			}
			if(!emailObjList.isEmpty()) {
				sendEmails(emailObjList);
			}
		} catch(Exception e){
			logger.logError('Unable to send Subscription ' + action + 'Notification email',e);
		}
	}    	
	
    private static Map<Id, People_Preference__c> getUserIdAndPPMap(List<Id> userList) {
    	Map<Id, People_Preference__c> userIdAndPPMap = new Map<Id, People_Preference__c>();
    	
    	List<People_Preference__c> peoplePreList;

		Map<String, Object> soqlParamMap = new  Map<String, Object>();
		soqlParamMap.put('soqlParam1', userList);
		String query = '';
		
		if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
			soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
			query = 'Select id, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Receive_Content_Useful_Notifications__c, Allow_Simpplr_Emails__c, Email_Content_Useful__c, Email_Notification_Digest_Frequency__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey From People_Preference__c where people__r.User__r.Id IN: soqlParam1 and people__r.User__r.IsActive=true and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
		} else {
			query = 'Select id, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Receive_Content_Useful_Notifications__c, Allow_Simpplr_Emails__c, Email_Content_Useful__c, Email_Notification_Digest_Frequency__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey From People_Preference__c where People__r.User__r.Id IN: soqlParam1 and people__r.User__r.IsActive=true';
		}
		SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
		peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
		for(People_Preference__c peoplePref : peoplePreList) {
			userIdAndPPMap.put(peoplePref.people__r.user__c, peoplePref);
		}
				
    	return userIdAndPPMap;
    }
    
    private static Map<Id, List<Id>> getGroupIdAndManagersIdsMap(List<Id> groupIds) {
    	
    	Map<Id, List<Id>> groupIdAndManagersIdsMap = new Map<Id, List<Id>>();
    	
    	String BASE_QUERY = 'select MemberId, CollaborationGroupId FROM CollaborationGroupMember where CollaborationRole = \'Admin\' and CollaborationGroup.IsArchived=false and CollaborationGroupId IN :groupIds';
		if(SimpplrContext.isCommunitiesEnabled){
			BASE_QUERY = BASE_QUERY+' AND NetworkId = null';
		}
		List<CollaborationGroupMember> collabGrpMemberList = Database.query(BASE_QUERY);
    	
		for(CollaborationGroupMember memberObj : collabGrpMemberList) {
			if(groupIdAndManagersIdsMap.containsKey(memberObj.CollaborationGroupId) == false) {
				groupIdAndManagersIdsMap.put(memberObj.CollaborationGroupId, new List<Id>());
			}
			groupIdAndManagersIdsMap.get(memberObj.CollaborationGroupId).add(memberObj.MemberId);
    	}
    	
    	return groupIdAndManagersIdsMap;
    }
    	
	public void sendNotificationEmailForEventInviteMore(String contentTitle, Set<String> listOfUsers, List<App_Notification__c> listOfNotification) {
        try{
			
			if(SimpplrContext.enableEmail){
				List<Simpplr_Content__c> contentList = [SELECT Id, Event_Attending_Count__c, Site__c, Title__c, Site__r.Name,
														Site__r.Chatter_Group_Id__c, Display_Excerpt__c, Event_Is_All_Day__c,
														Primary_Author__c, Primary_Author__r.External_Photo_URL__c,
														Primary_Author__r.External_Photo_URL_Expiry_Date__c,Primary_Author__r.User__c,
                                                        Primary_Author__r.First_Name__c, Last_Edited_DateTime__c, Type__c, Event_End_DateTime__c,
                                                        Event_TimezoneSidKey__c, Event_Start_Datetime__c, Event_Location__c, Publish_Start_DateTime__c,
														(SELECT Id, Content_Version__c, Thumbnail_URL__c, Is_Title_Image__c,
														  Title_Image_Type__c
                                                          FROM File_Simpplr_Content__r  
							                              WHERE Is_Deleted__c = false AND Is_Title_Image__c = true ORDER BY Title_Image_Type__c) 
                                                        FROM Simpplr_Content__c 
                                                        WHERE id = :listOfNotification[0].Object_Id__c
                                                        AND Site__r.Is_Deleted__c = false 
                                                        AND Site__r.Is_Active__c = true
                                                        AND Site__r.Show_In_Simpplr__c = true
                                                        AND Is_Deleted__c = false
                                                        AND Type__c =: ServiceConstants.TYPE_EVENT];
				
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
                List<People_Preference__c> peoplePrefList;
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', listOfUsers);
				String query = '';
				
                if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
                    query = 'Select id, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Receive_Content_Useful_Notifications__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey, people__r.User_Hash__c From People_Preference__c where Allow_Simpplr_Emails__c = true and (Email_Notification_Digest_Frequency__c=\'Immediate\' or Email_Notification_Digest_Frequency__c=\'Daily\') and Email_Event_Invite_More__c = true and  people__r.Id IN: soqlParam1 and people__r.User__r.IsActive=true and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
                } else {
                    query = 'Select id, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Receive_Content_Useful_Notifications__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey, people__r.User_Hash__c From People_Preference__c where Allow_Simpplr_Emails__c = true and (Email_Notification_Digest_Frequency__c=\'Immediate\' or Email_Notification_Digest_Frequency__c=\'Daily\') and Email_Event_Invite_More__c = true and People__r.Id IN: soqlParam1 and people__r.User__r.IsActive=true';
                }
                SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
                if(!peoplePrefList.isEmpty() && contentList.size() > 0 ) {
					initLangKeyValueMap(peoplePrefList);

                	//List<String> targetUserList = Utility.getuserIdList(new List<String>{peoplePrefList[0].People__c});
                    //String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePrefList[0].User__r.languagelocalekey);
                    
                    //Map<String,People_Preference__c> peopleIdToPeoplePrefMap = new Map<String,People_Preference__c>();
                    //peopleIdToPeoplePrefMap.put(peoplePrefList[0].people__r.user__c,peoplePrefList[0]);
                    String KEY_EVENT_INVITE = 'email.notification.content.event.invite';
                    for(People_Preference__c peoplePref : peoplePrefList){
                        String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePref.User__r.languagelocalekey);
                        String subject = LocaleContext.getLabel(userLanguage, KEY_EVENT_INVITE + KEY_SUBJECT)
                                            .replace('{{senderName}}', loggedInUserInfo.Full_Name__c)
                                            .replace('{{eventTitle}}', contentTitle.length() > 100 ? contentTitle.substring(0,97)+'...' : contentTitle);
                        String emailBody = getInvitePeopleEmailBody(contentList[0], userLanguage, peoplePref);
                        emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody, peoplePref.people__r.user__c, SimpplrContext.SEDFromEmail));
                    }
                    //Event invitation from {{senderName}}: {{eventTitle}}

                    if(!emailObjList.isEmpty()) {
                        sendEmails(emailObjList);
                    }
                }
            }
        } catch(Exception e){
            logger.logError('Unable to send invite people for an event email',e);
        }
	}
	
	private String getInvitePeopleEmailBody(Simpplr_content__c contentObj, String userLanguage, People_Preference__c preferenceObj){
		List<String> formatterList = new List<String>();
		
		String invitePeopleEventBody = EmailTemplateService.templatePartMap.get('invitePeopleEventBody');
		String badgeForEvent = EmailTemplateService.contentMustReadsPartMap.get('BadgeForEvent');
		String hiLocalizedString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION);
		String startsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS);
		String startsEndsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS_ENDS);
		String endsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_ENDS);
		if (String.isNotBlank(preferenceObj.People__r.First_Name__c)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.First_Name__c));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.Last_Name__c));
		}

		String KEY_EVENT_INVITE = 'email.notification.content.event.invite';
		String introText = LocaleContext.getLabel(userLanguage, KEY_EVENT_INVITE + KEY_INTRO)
											.replace('{{fullName}}', loggedInUserInfo.Full_Name__c);

		formatterList.add(introText);
		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_HIGHLIGHTED_INVITE_PEOPLE_MSG));

		String viewUrl = baseUrl + Page.PageRedirector.getUrl() + 
													'?siteId=' + contentObj.site__c +
													'&contentId=' + contentObj.Id +
													'&pageToRedirect=ContentDetailPage' + 
													'&origin=ne&contentType=' + contentObj.type__c.tolowercase()+
													'&utm_term=invited_to_event'+
                                                    '&utm_source=activity_notifications_email'+
                                                    '&utm_medium=email';

		formatterList.add(getEventIcon(contentObj, userLanguage, preferenceObj));

		formatterList.add(viewUrl);

		formatterList.add(contentObj.Title__c.length() > 100 ? contentObj.Title__c.substring(0,97)+'...' : contentObj.Title__c);
		
		String startsEndsBadgeString;
		if(contentObj.Event_Is_All_Day__c == false) {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(preferenceObj.User__r.Timezonesidkey);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_Start_Datetime__c,userLanguage, preferenceObj.User__r.timeZonesidkey)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_End_DateTime__c,userLanguage, preferenceObj.User__r.timeZonesidkey) + ' (' + timeZoneLabel + ')'});
		} else if(!(contentObj.Event_Start_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c).equalsIgnoreCase(
			contentObj.Event_End_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c)))) {
	
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_End_DateTime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		} else {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsEndsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		}
		formatterList.add(startsEndsBadgeString);

		formatterList.add(contentObj.Event_Location__c);

		formatterList.add(viewUrl);

		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_VIEW_DETAILS_RSVP_BUTTON));
		
		invitePeopleEventBody = EmailUtility.format(invitePeopleEventBody, formatterList);
		
		formatterList.clear();

		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(preferenceObj.People__r);
		invitePeopleEventBody = invitePeopleEventBody.replace('{20}','#'+brandingInfo.general_primaryColor);
		return getEmailTemplateWithWithoutMobilePromotion(preferenceObj, invitePeopleEventBody, brandingInfo, contentObj.Id, 'invited_to_event');
	}

	public String getRespondentsEmailBody(Simpplr_content__c contentObj, String userLanguage, People_Preference__c preferenceObj,
					 List<String> respondentNameList, Integer totalRespondentCount){

		List<String> formatterList = new List<String>();
		
		String respondentsEventBody = EmailTemplateService.templatePartMap.get('respondentsEventBody');
		String badgeForEvent = EmailTemplateService.contentMustReadsPartMap.get('BadgeForEvent');
		String hiLocalizedString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION);
		String startsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS);
		String startsEndsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS_ENDS);
		String endsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_ENDS);
		if (String.isNotBlank(preferenceObj.People__r.First_Name__c)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.First_Name__c));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.Last_Name__c));
		}

		String KEY_RESPONDED_TO_YOUR_EVENT = '';
		if(respondentNameList.size() == 2 && totalRespondentCount > 2){
			// {{respondantName1}}, {{respondantName2}} and {{respondantCount}} others responded to your event
			KEY_RESPONDED_TO_YOUR_EVENT = 'email.notification.content.event.more_than_2_reponded_to_your_event';

		} else {
			
			if(respondentNameList.size() > 1){
				// {{respondantName1}} and {{respondantName2}} responded to your event
				KEY_RESPONDED_TO_YOUR_EVENT = 'email.notification.content.event.2_reponded_to_your_event';

			} else {
				// {{respondantName1}} responded to your event
				KEY_RESPONDED_TO_YOUR_EVENT = 'email.notification.content.event.1_reponded_to_your_event';

			}
		}

		String introText = LocaleContext.getLabel(userLanguage, KEY_RESPONDED_TO_YOUR_EVENT)
											.replace('{{respondantName1}}', respondentNameList.get(0))
											.replace('{{respondantCount}}', String.valueOf(totalRespondentCount - respondentNameList.size()));

		if(respondentNameList.size() > 1){
			introText = introText.replace('{{respondantName2}}', respondentNameList.get(1));
		}

		formatterList.add(introText);

		String viewUrl = baseUrl + Page.PageRedirector.getUrl() + 
													'?siteId=' + contentObj.site__c +
													'&contentId=' + contentObj.Id +
													'&pageToRedirect=ContentDetailPage' + 
													'&origin=ne&contentType=' + contentObj.type__c.tolowercase()+
													'&utm_term=event_responses'+
                                                    '&utm_source=activity_notifications_email'+
                                                    '&utm_medium=email';

		formatterList.add(getEventIcon(contentObj, userLanguage, preferenceObj));

		formatterList.add(viewUrl);

		formatterList.add(contentObj.Title__c.length() > 100 ? contentObj.Title__c.substring(0,97)+'...' : contentObj.Title__c);
		
		String startsEndsBadgeString;
		if(contentObj.Event_Is_All_Day__c == false) {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(preferenceObj.User__r.Timezonesidkey);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_Start_Datetime__c,userLanguage, preferenceObj.User__r.timeZonesidkey)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_End_DateTime__c,userLanguage, preferenceObj.User__r.timeZonesidkey) + ' (' + timeZoneLabel + ')'});
		} else if(!(contentObj.Event_Start_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c).equalsIgnoreCase(
			contentObj.Event_End_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c)))) {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_End_DateTime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		} else {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsEndsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		}
		formatterList.add(startsEndsBadgeString);

		formatterList.add(contentObj.Event_Location__c);

		formatterList.add(viewUrl);

		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_VIEW_ALL_RESPONDENTS_BUTTON));
		
		respondentsEventBody = EmailUtility.format(respondentsEventBody, formatterList);
		
		formatterList.clear();

		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(preferenceObj.People__r);
		respondentsEventBody = respondentsEventBody.replace('{20}','#'+brandingInfo.general_primaryColor);
		return getEmailTemplateWithWithoutMobilePromotion(preferenceObj, respondentsEventBody, brandingInfo, contentObj.Id, 'event_responses');
	}
	
	public static void sendPrivateSiteRequestApprovalEmail(String siteName, String siteId, String targetUserId ) {
		try{
			if(SimpplrContext.enableEmail){
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				List<People_Preference__c> peoplePreList;
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', targetUserId);
				String query = '';
				
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
					query = 'Select id, People__c, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_PrivateSiteMembership_Response__c=true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__r.User__c=:soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
				} else {
					query = 'Select id, People__c, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_PrivateSiteMembership_Response__c=true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__r.User__c=:soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePreList);

				for(People_Preference__c peoplePref : peoplePreList) {
					People__c peopleObj = (People__c) peoplePref.People__r;
					NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
					
					if(!UserContext.id.equalsIgnoreCase(peopleObj.User__c)) {
						String localeKey = Utility.getSimpplrLanguageLocaleKey(peoplePref.User__r.languagelocalekey);
						String emailHeading = LocaleContext.getLabel(localeKey, KEY_PRIVATE_SITE_APPROVAL_INTRO);

						String emailBody = getPrivateSiteRequestApprovedEmailBody(peoplePref.People__c,
												peopleObj.User__c, peopleObj.First_Name__c,
												peopleObj.user__r.userName, emailHeading, siteId,
												siteName,peopleObj.Last_Name__c, localeKey, peopleObj);

						String subject = LocaleContext.getLabel(localeKey, KEY_SITE_APPROVAL_SUBJECT)
												.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
												.replace('{{siteName}}', siteName);

						emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,peopleObj.User__c, SimpplrContext.SEDFromEmail));
					}
					if(!emailObjList.isEmpty()) {
						sendEmails(emailObjList);
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send sendPrivateSiteRequestApprovalEmail email',e);
		}
	}

	public static void sendPublicSiteRequestApprovalEmail(String siteName, String siteId, String targetUserId ) {
		try{
			if(SimpplrContext.enableEmail){
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				List<People_Preference__c> peoplePreList;
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', targetUserId);
				String query = '';
				
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
					query = 'Select id, People__c, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_PrivateSiteMembership_Response__c=true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__c=:soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
				} else {
					query = 'Select id, People__c, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_PrivateSiteMembership_Response__c=true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__c=:soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePreList);

				for(People_Preference__c peoplePref : peoplePreList) {
					People__c peopleObj = (People__c) peoplePref.People__r;
					NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
					
					if(!UserContext.id.equalsIgnoreCase(peopleObj.User__c)) {
						String localeKey = Utility.getSimpplrLanguageLocaleKey(peoplePref.User__r.languagelocalekey);
						String emailHeading = LocaleContext.getLabel(localeKey, KEY_PUBLIC_SITE_APPROVAL_INTRO);

						String emailBody = getPublicSiteRequestApprovedEmailBody(peoplePref.People__c,
												peopleObj.User__c, peopleObj.First_Name__c,
												peopleObj.user__r.userName, emailHeading, siteId,
												siteName,peopleObj.Last_Name__c, localeKey, peopleObj);

						String subject = LocaleContext.getLabel(localeKey, KEY_SITE_APPROVAL_SUBJECT)
												.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
												.replace('{{siteName}}', siteName);

						emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,peopleObj.User__c, SimpplrContext.SEDFromEmail));
					}
					if(!emailObjList.isEmpty()) {
						sendEmails(emailObjList);
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send sendPublicSiteRequestApprovalEmail email',e);
		}
	}

	private static String getProfileImageURL(String publicPhotoURL, DateTime photoUrlExpiryDate) {
		String url;
		if(String.isBlank(publicPhotoURL) || photoUrlExpiryDate == null || photoUrlExpiryDate <= DateTime.now()) {
			url = EmailConstants.peopleDefaultIcon;
		} else {
			url = publicPhotoURL;
		}
		
		return url;
	}

	private static String getProfileDisplayIcon(String publicPhotoURL, DateTime photoUrlExpiryDate) {
		List<String> formatterList = new List<String>();
		if(String.isBlank(publicPhotoURL) || photoUrlExpiryDate == null || photoUrlExpiryDate <= DateTime.now()) {
			formatterList.add(EmailConstants.peopleDefaultIcon);
		} else {
			formatterList.add(publicPhotoURL);
		}
		String profileDisplayIcon = EmailUtility.format(EmailTemplateService.templatePartMap.get('profileImage'),formatterList);
		return profileDisplayIcon;
	}

	private static String getProfileDisplayIcon(String publicPhotoURL) {
		List<String> formatterList = new List<String>();
		if(String.isBlank(publicPhotoURL)) {
			formatterList.add(EmailConstants.peopleDefaultIcon);
		} else {
			formatterList.add(publicPhotoURL);
		}
		String profileDisplayIcon = EmailUtility.format(EmailTemplateService.templatePartMap.get('profileImage'),formatterList);
		return profileDisplayIcon;
	}
	
	@testVisible 
	private static string getPrivateSiteRequestApprovedEmailBody(String targetPeopleId, String targetUserId, String targetUserFirstName, String targetUserName,String subject, String siteId, String siteName, String targetUserLastName, String localeKey, People__c peopleObj) {
		List<String> formatterList = new List<String>();
		
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
		String siteDashboardLink = baseUrl + Page.PageRedirector.getUrl() + '?siteId=' + siteId +'&pageToRedirect='+ServiceConstants.SITE_LANDING_PAGE_STRING+'&origin=ne';
		String privateSiteRequestBody = EmailTemplateService.templatePartMap.get('privateSiteRequestApprovalBody');
		//0=Target User First Name 1=Subject  2=profileImage 3=Logged in user Full Name 4=siteName 5=Link to notificationsprivatesiterequest 6=Link to notificationsprivatesiterequest
		if(String.isNotBlank(targetUserFirstName)){
			formatterList.add(LocaleContext.getLabel(localeKey, KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}', targetUserFirstName));
		} else {
			formatterList.add(LocaleContext.getLabel(localeKey, KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}', targetUserLastName));
		}
		formatterList.add(subject);
		formatterList.add(profileDisplayIcon);
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c);
		formatterList.add('');
		formatterList.add(LocaleContext.getLabel(localeKey, KEY_SITE_APPROVAL_BODY).replace('{{siteName}}', siteName).replace('{{fullName}}', ''));
		formatterList.add(siteDashboardLink);

		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(peopleObj);

		formatterList.add(brandingInfo.general_primaryColor);
		formatterList.add(LocaleContext.getLabel(localeKey, KEY_EMAIL_VIEW_BTN));
		
		privateSiteRequestBody = EmailUtility.format(privateSiteRequestBody, formatterList);
		formatterList.clear();
		return getEmailTemplateWithHeaderFooter(targetPeopleId, targetUserId, targetUserName, localeKey, privateSiteRequestBody, brandingInfo);
	}

	@testVisible 
	private static string getPublicSiteRequestApprovedEmailBody(String targetPeopleId, String targetUserId, String targetUserFirstName, String targetUserName,String subject, String siteId, String siteName, String targetUserLastName, String localeKey, People__c peopleObj) {
		List<String> formatterList = new List<String>();
		
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
		String siteDashboardLink = baseUrl + Page.PageRedirector.getUrl() + '?siteId=' + siteId +'&pageToRedirect='+ServiceConstants.SITE_LANDING_PAGE_STRING+'&origin=ne';
		String privateSiteRequestBody = EmailTemplateService.templatePartMap.get('privateSiteRequestApprovalBody');
		//0=Target User First Name 1=Subject  2=profileImage 3=Logged in user Full Name 4=siteName 5=Link to notificationsprivatesiterequest 6=Link to notificationsprivatesiterequest
		if(String.isNotBlank(targetUserFirstName)){
			formatterList.add(LocaleContext.getLabel(localeKey, KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}', targetUserFirstName));
		} else {
			formatterList.add(LocaleContext.getLabel(localeKey, KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}', targetUserLastName));
		}
		formatterList.add(subject);
		formatterList.add(profileDisplayIcon);
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c);
		formatterList.add('');
		formatterList.add(LocaleContext.getLabel(localeKey, KEY_SITE_APPROVAL_BODY).replace('{{siteName}}', siteName).replace('{{fullName}}', ''));
		formatterList.add(siteDashboardLink);

		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(peopleObj);

		formatterList.add(brandingInfo.general_primaryColor);
		formatterList.add(LocaleContext.getLabel(localeKey, KEY_EMAIL_VIEW_BTN));
		
		privateSiteRequestBody = EmailUtility.format(privateSiteRequestBody, formatterList);
		formatterList.clear();
		return getEmailTemplateWithHeaderFooter(targetPeopleId, targetUserId, targetUserName, localeKey, privateSiteRequestBody, brandingInfo);
	}
	
	@testVisible 
	private static string getPrivateSiteRequestNotificationEmailBody(String targetPeopleId, String targetUserId, 
			String targetUserFirstName, String targetUserName, String subject, String requestId, 
			String siteId, String siteName , String targetUserLastName, String localeKey, People__c peopleObj) {
		List<String> formatterList = new List<String>();
		
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
				
		String notificationsprivatesiterequestLink = baseUrl + '/apex/app?u=/manage/sites/'+ siteId +'/people/requests';

		String privateSiteRequestBody = EmailTemplateService.templatePartMap.get('privateSiteRequestBody');
		String hiLocalizedString = LocaleContext.getLabel(localeKey, KEY_EMAIL_COMMON_SALUTATION);
		//{0} userName 
		if (String.isNotBlank(targetUserFirstName)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserFirstName));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserLastName));
		}
		
		String introStr = LocaleContext.getLabel(localeKey, KEY_SITE_REQUEST_INTRO);
		introStr = introStr.replace('{{siteName}}', siteName);
		String siteNameText = introStr;
		introStr = introStr.replace('{{fullName}}',loggedInUserInfo.Full_Name__c);
		
		// {1} Intro
		formatterList.add(introStr);
		//{2} Profile image
		formatterList.add(profileDisplayIcon);
		//{3} logged in user full name 
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c);
		//{4} Site name with text 
		formatterList.add(siteNameText.replace('{{fullName}}', ''));
		//{5}Link to notificationsprivatesiterequest
		formatterList.add(notificationsprivatesiterequestLink);
		
		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(peopleObj);

		//{6} branding
		formatterList.add(brandingInfo.general_primaryColor);
		//{7} view button 
		formatterList.add(LocaleContext.getLabel(localeKey, KEY_EMAIL_COMMON_VIEW_BUTTON));

		privateSiteRequestBody = EmailUtility.format(privateSiteRequestBody, formatterList);
		formatterList.clear();
		return getEmailTemplateWithHeaderFooter(targetPeopleId, targetUserId, targetUserName, localeKey, privateSiteRequestBody, brandingInfo);
	}
	
	@testVisible 
	private static string getPendingSubscriptionNotificationEmailBody(String targetPeopleId, String targetUserId, String targetUserFirstName, String targetUserName,String subject, String siteId, String siteName , String targetUserLastName, String localeKey, People__c peopleObj, People_Preference__c preferenceObj) {
		List<String> formatterList = new List<String>();
		
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);

		String notificationsPendingSubscriptionRequestLink = baseUrl + Page.PageRedirector.getUrl() + '?siteId=' + siteId +'&pageToRedirect=managesitesubscription&origin=ne';
		
		String pendingSubscriptionRequestBody = EmailTemplateService.templatePartMap.get('pendingSubscriptionRequestBody');
		//0=Target User First Name 1=Subject  2=profileImage 3=Logged in user Full Name 4=siteName 5=Link to notificationsPendingSubscriptionRequest 6=Link to notificationsPendingSubscriptionRequest
		String hiLocalizedString = LocaleContext.getLabel(localeKey, KEY_EMAIL_COMMON_SALUTATION);
		if (String.isNotBlank(targetUserFirstName)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserFirstName));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserLastName));
		}
		formatterList.add(LocaleContext.getLabel(localeKey, KEY_SUBSCRIPTION_REQUIRES_ATTENTION_INTRO));
		formatterList.add(profileDisplayIcon);
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c);
		formatterList.add('');
		formatterList.add(LocaleContext.getLabel(localeKey, KEY_SUBSCRIPTION_REQUIRES_ATTENTION_BODY).replace('{{siteName}}', siteName));
		formatterList.add(notificationsPendingSubscriptionRequestLink);

		NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
		formatterList.add(brandingInfo.general_primaryColor);
		formatterList.add(LocaleContext.getLabel(localeKey, KEY_EMAIL_COMMON_VIEW_BUTTON));
		pendingSubscriptionRequestBody = EmailUtility.format(pendingSubscriptionRequestBody, formatterList);
		formatterList.clear();
		
		return getEmailTemplateWithNewHeaderFooter(preferenceObj, pendingSubscriptionRequestBody, brandingInfo);
	}

	public String getRSVPConfirmedNotificationEmailBody(Simpplr_content__c contentObj, String userLanguage, People_Preference__c preferenceObj){

		List<String> formatterList = new List<String>();

		String respondentsEventBody = EmailTemplateService.templatePartMap.get('eventActionBody');
		String badgeForEvent = EmailTemplateService.contentMustReadsPartMap.get('BadgeForEvent');
		String hiLocalizedString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION);
		String startsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS);
		String startsEndsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS_ENDS);
		String endsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_ENDS);
		if (String.isNotBlank(preferenceObj.People__r.First_Name__c)){
			//{0} Greetings
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.First_Name__c));
		} else {
			//{0} Greetings
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.Last_Name__c));
		}

		String viewUrl = baseUrl + Page.PageRedirector.getUrl() + 
											'?siteId=' + contentObj.site__c +
											'&contentId=' + contentObj.Id +
											'&pageToRedirect=ContentDetailPage' + 
											'&origin=ne&contentType=' + contentObj.type__c.tolowercase()+
											'&utm_term=event_confirm_rsvp'+
											'&utm_source=activity_notifications_email'+
											'&utm_medium=email';

		// {1} Subject
		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_RSVP_CONFIRMATION_MSG));
		// {2} Highlighted bar color
		formatterList.add('#e5f3eb');
		// {3} Highlighted bar text
		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_HIGHLIGHTED_RSVP_CONFIRMED_MSG));
		// {4} Event icon (Date or Image)
		formatterList.add(getEventIcon(contentObj, userLanguage, preferenceObj));
		// {5} Event URL
		formatterList.add(viewUrl);
		// {6} Event URL
		formatterList.add(contentObj.Title__c.length()>100 ? contentObj.Title__c.substring(0,97)+'...' : contentObj.Title__c);
		// {7} Event starttime
		String startsEndsBadgeString;
		if(contentObj.Event_Is_All_Day__c == false) {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(preferenceObj.User__r.Timezonesidkey);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_Start_Datetime__c,userLanguage, preferenceObj.User__r.timeZonesidkey)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_End_DateTime__c,userLanguage, preferenceObj.User__r.timeZonesidkey) + ' (' + timeZoneLabel + ')'});
		} else if(!(contentObj.Event_Start_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c).equalsIgnoreCase(
			contentObj.Event_End_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c)))) {
	
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_End_DateTime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		} else {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsEndsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		}
		formatterList.add(startsEndsBadgeString);
		// {8} Event Location
		formatterList.add(contentObj.Event_Location__c);
		// {9} Event url for event details link (Leave empty if not required)
		formatterList.add(viewUrl);
		// {10} Label - View event detail (label for above link), if above is empty then leave this empty too
		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_RSVP_VIEW_LINK_TEXT));

		// {11} View Button (Leave Empty if not required)
		formatterList.add('');
		// {12} Author info (Leave Empty if not required)
		formatterList.add('');

		respondentsEventBody = EmailUtility.format(respondentsEventBody, formatterList);

		formatterList.clear();

		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(preferenceObj.People__r);
		respondentsEventBody = respondentsEventBody.replace('{20}','#'+brandingInfo.general_primaryColor);
		return getEmailTemplateWithWithoutMobilePromotion(preferenceObj, respondentsEventBody, brandingInfo, contentObj.Id, 'event_confirm_rsvp');
	}
	
	@testVisible 
	private static string getSubscriptionApprovalRejectionEmailBody(String action, People_Preference__c preferenceObj, String subject, String siteName, String subscriptionId, String userLanguage) {
		List<String> formatterList = new List<String>();
		
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
		
		String notificationsSubscriptionLink = baseUrl + Page.PageRedirector.getUrl() + '?pageToRedirect=managesegmentsubscription&origin=ne&subscriptionid=' + subscriptionId;
		String pendingSubscriptionRequestApprovalRejectionBody = EmailTemplateService.templatePartMap.get('pendingSubscriptioneRequestApprovalRejectionBody');
		//0=Target User First Name 1=Subject  2=profileImage 3=Logged in user Full Name 4=siteName 5=Link to notificationsprivatesiterequest 6=Link to notificationsprivatesiterequest
		String hiLocalizedString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION);
		if (String.isNotBlank(preferenceObj.People__r.First_Name__c)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.First_Name__c));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.Last_Name__c));
		}
		if('approved'.equalsIgnoreCase(action)){
			formatterList.add(LocaleContext.getLabel(userLanguage, KEY_SUBSCRIPTION_APPROVED_INTRO));
		}else {
			formatterList.add(LocaleContext.getLabel(userLanguage, KEY_SUBSCRIPTION_REJECTED_INTRO));
		}
		formatterList.add(profileDisplayIcon);
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c);
		formatterList.add('');
		if('approved'.equalsIgnoreCase(action)){
			formatterList.add(LocaleContext.getLabel(userLanguage, KEY_SUBSCRIPTION_APPROVED_BODY).replace('{{siteName}}', siteName));
		}else {
			formatterList.add(LocaleContext.getLabel(userLanguage, KEY_SUBSCRIPTION_REJECTED_BODY).replace('{{siteName}}', siteName));
		}
		formatterList.add(notificationsSubscriptionLink);

		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(preferenceObj.People__r);

		formatterList.add(brandingInfo.general_primaryColor);
		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));		
		pendingSubscriptionRequestApprovalRejectionBody = EmailUtility.format(pendingSubscriptionRequestApprovalRejectionBody, formatterList);
		formatterList.clear();
		return getEmailTemplateWithNewHeaderFooter(preferenceObj, pendingSubscriptionRequestApprovalRejectionBody, brandingInfo);
	}
	
	@testVisible 
	public string getRSVPRemovedNotificationEmailBody(Simpplr_Content__c contentObj, People_Preference__c preferenceObj, String userLanguage, String message) {
		List<String> formatterList = new List<String>();
		
		String profileDisplayIcon = getProfileImageURL(contentObj.Primary_Author__r.External_Photo_URL__c, contentObj.Primary_Author__r.External_Photo_URL_Expiry_Date__c);
		
		String removeRsvpPeopleBody = EmailTemplateService.templatePartMap.get('removeRsvpPeopleEventBody');
		String badgeForEvent = EmailTemplateService.contentMustReadsPartMap.get('BadgeForEvent');
		String hiLocalizedString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION);
		String startsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS);
		String startsEndsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS_ENDS);
		String endsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_ENDS);
		if (String.isNotBlank(preferenceObj.People__r.First_Name__c)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.First_Name__c));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.Last_Name__c));
		}

		String trimmedTitle = contentObj.Title__c.length()>100 ? contentObj.Title__c.substring(0,97)+'...' : contentObj.Title__c;
		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_RSVP_REMOVED_MSG));
		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_HIGHLIGHTED_RSVP_REMOVED_MSG));

		String viewUrl = baseUrl + Page.PageRedirector.getUrl() + 
													'?siteId=' + contentObj.site__c +
													'&contentId=' + contentObj.Id +
													'&pageToRedirect=ContentDetailPage' + 
													'&origin=ne&contentType=' + contentObj.type__c.tolowercase() +
													'&utm_medium=email&utm_source=activity_notifications_email&utm_term=event_removed_from_rsvp';
		
		formatterList.add(getEventIcon(contentObj, userLanguage, preferenceObj));

		formatterList.add(viewUrl);

		formatterList.add(trimmedTitle);
		
		String startsEndsBadgeString;
		if(contentObj.Event_Is_All_Day__c == false) {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(preferenceObj.User__r.Timezonesidkey);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_Start_Datetime__c,userLanguage, preferenceObj.User__r.timeZonesidkey)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_End_DateTime__c,userLanguage, preferenceObj.User__r.timeZonesidkey) + ' (' + timeZoneLabel + ')'});
		} else if(!(contentObj.Event_Start_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c).equalsIgnoreCase(
			contentObj.Event_End_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c)))) {
	
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_End_DateTime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		} else {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsEndsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		}
		formatterList.add(startsEndsBadgeString);

		formatterList.add(contentObj.Event_Location__c);

		formatterList.add(viewUrl);

		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
		
		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_EVENT_AUTHOR));
		
		formatterList.add(profileDisplayIcon);

		formatterList.add(contentObj.Primary_Author__r.Full_Name__c);

		// Event published on Mar 11, 2019 (Edited Mar 18, 2019)
		String eventPublishedAndEditedString = LocaleContext.getLabel(userLanguage, KEY_EVENT_PUBLISHED_EDITED_TEXT).replace('{{publishedDate}}', LocaleContext.getLocalisedDateAsMMMDDYYYY(contentObj.Publish_Start_DateTime__c, userLanguage, contentObj.Event_TimezoneSidKey__c))
											.replace('{{editedDate}}', LocaleContext.getLocalisedDateAsMMMDDYYYY(contentObj.Last_Edited_DateTime__c, userLanguage, contentObj.Event_TimezoneSidKey__c));
		formatterList.add(eventPublishedAndEditedString);

		formatterList.add(message);

		removeRsvpPeopleBody = EmailUtility.format(removeRsvpPeopleBody, formatterList);
		
		formatterList.clear();

		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(preferenceObj.People__r);
		removeRsvpPeopleBody = removeRsvpPeopleBody.replace('{20}','#'+brandingInfo.general_primaryColor);
		return getEmailTemplateWithWithoutMobilePromotion(preferenceObj, removeRsvpPeopleBody, brandingInfo, contentObj.Id, 'event_removed_from_rsvp');
	}

	@testVisible
	public string getEventActionNotificationEmailBody(Simpplr_Content__c contentObj, People_Preference__c preferenceObj, String userLanguage, String eventAction, Boolean isManagingEvent) {
		String highLightBarColorRedCode = 'rgba(208, 2, 27, 0.1)';
		String highLightBarColorGreenCode = '#e5f3eb';
		
		List<String> formatterList = new List<String>();
		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(preferenceObj.People__r);

		String profileDisplayIcon = getProfileImageURL(contentObj.Primary_Author__r.External_Photo_URL__c, contentObj.Primary_Author__r.External_Photo_URL_Expiry_Date__c);
		String profileLink = PageContext.getPageURL(Pages.app)+'?u=/people/'+contentObj.Primary_Author__c;
		// Event published on Mar 11, 2019 (Edited Mar 18, 2019)
		String eventPublishedAndEditedString = LocaleContext.getLabel(userLanguage, KEY_EVENT_PUBLISHED_EDITED_TEXT).replace('{{publishedDate}}', LocaleContext.getLocalisedDateAsMMMDDYYYY(contentObj.Publish_Start_DateTime__c, userLanguage, contentObj.Event_TimezoneSidKey__c))
											.replace('{{editedDate}}', LocaleContext.getLocalisedDateAsMMMDDYYYY(contentObj.Last_Edited_DateTime__c, userLanguage, contentObj.Event_TimezoneSidKey__c));
		
		String eventActionBody = EmailTemplateService.templatePartMap.get('eventActionBody');
		String badgeForEvent = EmailTemplateService.contentMustReadsPartMap.get('BadgeForEvent');
		String hiLocalizedString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION);
		String startsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS);
		String startsEndsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_STARTS_ENDS);
		String endsString = LocaleContext.getLabel(userLanguage, KEY_LABEL_ENDS);

		// {0} Greeting
		if (String.isNotBlank(preferenceObj.People__r.First_Name__c)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.First_Name__c));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', preferenceObj.People__r.Last_Name__c));
		}
		
		String subjectMessageKey = null;
		String highlightedBarColor = null;
		String highlightedTextKey = null;
		String eventURL = null;
		String viewButtonHtml = '';
		String authorInfoHtml = '';
		String action = '';
		if('eventDeleted'.equalsIgnoreCase(eventAction)){
			subjectMessageKey = isManagingEvent ? KEY_EVENT_MANAGING_DELETED_MSG : KEY_EVENT_RESPONDED_DELETED_MSG;
			highlightedBarColor = highLightBarColorRedCode;
			highlightedTextKey = KEY_HIGHLIGHTED_EVENT_DELETED_MSG;
			eventURL = '';
			viewButtonHtml = '';
			action = 'event_deleted';
			authorInfoHtml = getAuthorInfoHtml(profileDisplayIcon, profileLink, contentObj.Primary_Author__r.Full_Name__c, eventPublishedAndEditedString, '', userLanguage);

		} else if('eventUnpublished'.equalsIgnoreCase(eventAction)){
			subjectMessageKey = isManagingEvent ? KEY_EVENT_MANAGING_UNPUBLISHED_MSG : KEY_EVENT_RESPONDED_UNPUBLISHED_MSG;
			highlightedBarColor = highLightBarColorRedCode;
			highlightedTextKey = KEY_HIGHLIGHTED_EVENT_UNPUBLISHED_MSG;
			eventURL = baseUrl + Page.PageRedirector.getUrl() + 
													'?siteId=' + contentObj.site__c +
													'&contentId=' + contentObj.Id +
													'&pageToRedirect=ContentDetailPage' + 
													'&origin=ne&contentType=' + contentObj.type__c.tolowercase() +
													'&utm_medium=email&utm_source=activity_notifications_email&utm_term=event_unpublished';
			action = 'event_unpublished';
			viewButtonHtml = getViewButtonHtml(eventURL, userLanguage, eventAction);
			viewButtonHtml = viewButtonHtml.replace('{20}','#'+ brandingInfo.general_primaryColor);
			authorInfoHtml = getAuthorInfoHtml(profileDisplayIcon, profileLink, contentObj.Primary_Author__r.Full_Name__c, eventPublishedAndEditedString, '', userLanguage);
		
		} else if('eventUpdated'.equalsIgnoreCase(eventAction)){
			subjectMessageKey = isManagingEvent ? KEY_EVENT_MANAGING_UPDATED_MSG : KEY_EVENT_RESPONDED_UPDATED_MSG;
			highlightedBarColor = highLightBarColorGreenCode;
			highlightedTextKey = KEY_HIGHLIGHTED_EVENT_UPDATED_MSG;
			eventURL = baseUrl + Page.PageRedirector.getUrl() + 
													'?siteId=' + contentObj.site__c +
													'&contentId=' + contentObj.Id +
													'&pageToRedirect=ContentDetailPage' + 
													'&origin=ne&contentType=' + contentObj.type__c.tolowercase() +
													'&utm_medium=email&utm_source=activity_notifications_email&utm_term=event_updated';
			action = 'event_updated';
			viewButtonHtml = getViewButtonHtml(eventURL, userLanguage, eventAction);	
			viewButtonHtml = viewButtonHtml.replace('{20}','#'+ brandingInfo.general_primaryColor);							
			authorInfoHtml = '';
		}
		
		// {1} Subject
		formatterList.add(LocaleContext.getLabel(userLanguage, subjectMessageKey).replace('{{eventName}}', contentObj.Title__c.length() > 100 ? contentObj.Title__c.substring(0, 97) + '...' : contentObj.Title__c));
		// {2} Highlighted bar color
		formatterList.add(highlightedBarColor);
		// {3} Highlighted bar text
		formatterList.add(LocaleContext.getLabel(userLanguage, highlightedTextKey));
		// {4} Event icon (Date or Image)
		formatterList.add(getEventIcon(contentObj, userLanguage, preferenceObj));
		// {5} Event URL
		formatterList.add(eventURL);
		// {6} Event URL
		formatterList.add(contentObj.Title__c.length()>100 ? contentObj.Title__c.substring(0,97)+'...' : contentObj.Title__c);
		// {7} Event starttime
		String startsEndsBadgeString;
		if(contentObj.Event_Is_All_Day__c == false) {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(preferenceObj.User__r.Timezonesidkey);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_Start_Datetime__c,userLanguage, preferenceObj.User__r.timeZonesidkey)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDateAsUMMDDYYYYHHMMAA(contentObj.Event_End_DateTime__c,userLanguage, preferenceObj.User__r.timeZonesidkey) + ' (' + timeZoneLabel + ')'});
		} else if(!(contentObj.Event_Start_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c).equalsIgnoreCase(
			contentObj.Event_End_DateTime__c.format('dd-MM-yyyy', contentObj.Event_TimezoneSidKey__c)))) {
	
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c)});
			startsEndsBadgeString += EmailUtility.format(badgeForEvent, new List<String>{endsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_End_DateTime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		} else {
			String timeZoneLabel = Utility.timezoneIdToDisplayLabel(contentObj.Event_TimezoneSidKey__c);
			startsEndsBadgeString = EmailUtility.format(badgeForEvent, new List<String>{startsEndsString + ': ' + LocaleContext.getLocalisedDayAndDate(contentObj.Event_Start_Datetime__c,userLanguage, contentObj.Event_TimezoneSidKey__c) + ' (' + timeZoneLabel + ')'});
		}
		formatterList.add(startsEndsBadgeString);
		// {8} Event Location
		formatterList.add(contentObj.Event_Location__c);
		// {9} Event url for event details link (Leave empty if not required)
		formatterList.add('');
		// {10} Label - View event detail (label for above link), if above is empty then leave this empty too
		formatterList.add('');
		// {11} View Button (Leave Empty if not required)
		formatterList.add(viewButtonHtml);
		// {12} Author info (Leave Empty if not required)
		formatterList.add(authorInfoHtml);

		eventActionBody = EmailUtility.format(eventActionBody, formatterList);
		
		formatterList.clear();

		eventActionBody = eventActionBody.replace('{20}','#'+brandingInfo.general_primaryColor);
		return getEmailTemplateWithWithoutMobilePromotion(preferenceObj, eventActionBody, brandingInfo, contentObj.Id, action);
	}

	private String getViewButtonHtml(String contentUrl, String userLanguage, String eventAction){
		List<String> formatterList = new List<String>();
		
		String viewButtonHtml = EmailTemplateService.templatePartMap.get('viewButtonHtml');
		// {0} content url
		formatterList.add(contentUrl);
		// {1} Label - View event
		if('eventUpdated'.equalsIgnoreCase(eventAction) || 'eventUnpublished'.equalsIgnoreCase(eventAction)) {
			formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_EVENT_BUTTON));
		}
		else {
			formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
		}
		return EmailUtility.format(viewButtonHtml, formatterList);
	}

	private String getAuthorInfoHtml(String authorImage, String authorUrl, String authorName, String eventPublishedDateText, String message, String userLanguage){
		List<String> formatterList = new List<String>();
		String authorInfoHtml = EmailTemplateService.templatePartMap.get('authorInfoHtml');

		// {0} Event author label
		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_EVENT_AUTHOR));
		// {1} Author image
		formatterList.add(authorImage);
		// {2} Author url
		formatterList.add(authorUrl);
		// {3} Author name
		formatterList.add(authorName);
		// {4} Event published on Mar 11, 2019 (Edited Mar 18, 2019)
		formatterList.add(eventPublishedDateText);
		// {5} Message
		formatterList.add(message);

		return EmailUtility.format(authorInfoHtml, formatterList);
	}

	@testVisible
	private string getEmailTemplateWithWithoutMobilePromotion(People_Preference__c peoplePrefObj, String emailBody, NotificationHelper.BrandingInfo brandingInfo, String contentId, String action){
		String finalEmailWithTemplate = '';
		String languagelocalekey = peoplePrefObj.User__r.languagelocalekey;
		languagelocalekey = Utility.getSimpplrLanguageLocaleKey(languagelocalekey);
		String pid = UserInfo.getOrganizationId().subString(0,15) + String.valueOf(peoplePrefObj.People__c).subString(0,15); 
		List<String> formatterList = new List<String>();
		String templateWithHeaderFooter = '';
		//{0}
		formatterList.add('<style>          @media all {          .ExternalClass {          width: 100%;          }          .ExternalClass,          .ExternalClass p,          .ExternalClass span,          .ExternalClass font,          .ExternalClass td,          .ExternalClass div {          line-height: 100%;          }          .apple-link a {          color: inherit !important;          font-family: inherit !important;          font-size: inherit !important;          font-weight: inherit !important;          line-height: inherit !important;          text-decoration: none !important;          }          }          /* -------------------------------------          RESPONSIVE AND MOBILE FRIENDLY STYLES          ------------------------------------- */          @media only screen and (max-width:620px) {          table[class=body] .wrapper,          table[class=body] .header,          table[class=body] .article {          padding: 10px !important;          }          table[class=body] .content {          padding: 0 !important;          }          table[class=body] .container {          padding: 0 !important;          width: 100% !important;          }          table[class=body] .main {          border-left-width: 0 !important;          border-radius: 0 !important;          border-right-width: 0 !important;          }          table[class=body] .main {          border-left-width: 0 !important;          border-radius: 0 !important;          border-right-width: 0 !important;          }          table[class=body] .btn a {          width: 100% !important;          }          table[class=body] .img-responsive {          height: auto !important;          max-width: 100% !important;          width: auto !important;          }          td[class="mobile-hide"] {          display: none;          }          .mobile-hide {          display: none;          }          .newsletter-item .media {          width: 100px !important;          }          .newsletter-item .media .Calendar .CalendarMonth {          font-size: 14px !important;          }          .newsletter-item .media .Calendar .CalendarDay {          font-size: 33px !important;          }          .newsletter-item--showCase .media {          width: 100% !important;          }          .newsletter-item--showCase .media .Calendar .CalendarMonth {          font-size: 20px !important;          }          .newsletter-item--showCase .media .Calendar .CalendarDay {          font-size: 40px !important;          }          .wrapper,          .header,          .article {          padding: 10px !important;          }          .content {          padding: 0 !important;          }          .container {          padding: 0 !important;          width: 100% !important;          }          .main {          border-left-width: 0 !important;          border-radius: 0 !important;          border-right-width: 0 !important;          }          .btn table {          width: 100% !important;          }          .btn a {          width: 100% !important;          }          .img-responsive {          height: auto !important;          max-width: 100% !important;          width: auto !important;          }          }          a[x-apple-data-detectors] {          color: inherit !important;          text-decoration: none !important;          font-size: inherit !important;          font-family: inherit !important;          font-weight: inherit !important;          line-height: inherit !important;          }       </style>');
		//{1}
		formatterList.add(brandingInfo.logo_url);
		//{2}
		formatterList.add(LocaleContext.getLocalisedDateAsMMMMDDYYYY(DateTime.now(), languagelocalekey, peoplePrefObj.User__r.timeZonesidkey));// current date
		//{3}
		formatterList.add(emailBody);

		if (SimpplrContext.appConfig.Mobile_Promotion_Enabled__c) {
			templateWithHeaderFooter = EmailTemplateService.templatePartMap.get('newTemplateWithHeaderFooterWithMobilePromotion');
			//{4} Promotion heading
			formatterList.add(LocaleContext.getLabel(languagelocalekey, 
					KEY_FOOTER_PROMOTION_HEADING).replace('{{appName}}',
					SimpplrContext.applicationName));
			//{5} Promotion text 
			formatterList.add(LocaleContext.getLabel(languagelocalekey, 
					KEY_FOOTER_PROMOTION_TEXT).replace('{{appName}}',
					SimpplrContext.applicationName));
			//{6} iOS APP LInk 
			formatterList.add(EmailConstants.MOBILE_PROMOTION_LINK + 'iOS&utm_source=email_footer&utm_term=' + pid);
			//{7} IOS badge 
			formatterList.add(EmailConstants.footerPromotionBadgeIOS.replace('{{locale}}',languagelocalekey));
			//{8} Android app link 
			formatterList.add(EmailConstants.MOBILE_PROMOTION_LINK + 'android&utm_source=email_footer&utm_term='  + pid);
			//{9} Android badge 
			formatterList.add(EmailConstants.footerPromotionBadgeAndroid.replace('{{locale}}',languagelocalekey));

		} else {
			templateWithHeaderFooter = EmailTemplateService.templatePartMap.get('newTemplateWithHeaderFooter');
		}

		//{4} || {10}
		formatterList.add(baseUrl + Page.PageRedirector.getUrl()+'?userId='+peoplePrefObj.people__c+'&pageToRedirect='+Pages.MySettingsEmail+'&origin=ne');
		//{5} || {11}
		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_FOOTER_SETTINGS).replace('{{appName}}',SimpplrContext.applicationName));
		//{6} || {12}
 		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_COPYRIGHT).replace('{{year}}',''+DateTime.now().year()));
		//{7} || {13}
		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_POWERED_BY));
		
		//{8} || {14}
		if ('dark'.equalsIgnoreCase(brandingInfo.header_preset)) {
			
			formatterList.add('000000');

		} else if ('primary'.equalsIgnoreCase(brandingInfo.header_preset)) {
			formatterList.add(brandingInfo.general_primaryColor);
		
		} else if ('default'.equalsIgnoreCase(brandingInfo.header_preset)) {
			formatterList.add('ffffff');
		
		} else {
			formatterList.add(brandingInfo.header_backgroundColor);
		}

		//{9} || {15}
		String trackingUrl = SimpplrContext.simpplrAPIEndpoint+'/sneot?td='
							+ Utility.getNewsletterTrackerCode(contentId, peoplePrefObj.people__r.User_Hash__c)+'&action='+action; 
		formatterList.add(trackingUrl);
		
		finalEmailWithTemplate = EmailUtility.format(templateWithHeaderFooter, formatterList);

		return finalEmailWithTemplate;
	}

	private String getEventIcon(Simpplr_Content__c contentObj, String localeKey, People_Preference__c preferenceObj){
		List<String> formatterList = new List<String>();
		String componentTemplate = '';
		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(preferenceObj.People__r);

		componentTemplate = EmailTemplateService.templatePartMap.get('eventBodyWithoutImage');
		componentTemplate = componentTemplate.replace('{20}','#'+brandingInfo.general_primaryColor);
		String monthStr = '';
		String dateStr = '';
		if(contentObj.Event_Is_All_Day__c == true) {
			monthStr = LocaleContext.getLocalisedMonth(contentObj.Event_Start_Datetime__c, localeKey, contentObj.Event_TimezoneSidKey__c);
			dateStr = contentObj.Event_Start_Datetime__c.format('dd', contentObj.Event_TimezoneSidKey__c);
		} else {
			monthStr = LocaleContext.getLocalisedMonth(contentObj.Event_Start_Datetime__c, localeKey, preferenceObj.User__r.Timezonesidkey);
			dateStr = contentObj.Event_Start_Datetime__c.format('dd', preferenceObj.User__r.Timezonesidkey);
		}
		
		formatterList.add(monthStr);
		formatterList.add(dateStr);


		return EmailUtility.format(componentTemplate, formatterList);
	}
	
	public static void sendCommentLikeNotificationAndEmail(String feedCommentId, String feedItemId){
		
		try {
			String body = '';
			List<FeedItem> feedItemList = [Select id, type, createdById,createdBy.Name,parentId,parent.name,parent.type, (select createdById,createdBy.Name, createdDate, parentId, CommentType, CommentBody, RelatedRecordId from feedcomments where id=:feedCommentId order by createdDate desc) from feeditem where id=:feedItemId limit 1];
			FeedComment feedCommentObj = feedItemList[0].feedComments[0];
			String commentParentId = feedCommentObj.parentId;
			String replySnippet = '';
			String relatedContentId;
			String parentSiteId;
			Boolean isNotificationAllowed = true;
			List<Simpplr_Content__c> simpplrContentList = new List<Simpplr_Content__c>();
			NotificationDao.Notification notificationObj = new NotificationDao.Notification();
			Integer filesCountOnReply = 0;
			
			if(feedItemList[0].type.equalsIgnoreCase('TrackedChange')) {
				isNotificationAllowed = false;
			
			} else if(UserContext.id.equalsIgnoreCase(feedCommentObj.createdById)) {
				isNotificationAllowed = false;

			} else if(commentParentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix)) {
				simpplrContentList = [select id,Name, title__c, type__c, Site__r.Show_In_Simpplr__c from simpplr_content__c where id=:commentParentId];
				
				if(simpplrContentList.size() > 0) {
					Simpplr_Content__c contentRecord = simpplrContentList[0];
					relatedContentId = contentRecord.Id;
					
					if (contentRecord.Site__c != NULL && contentRecord.Site__r.Show_In_Simpplr__c == false) {
						isNotificationAllowed = false;
					}
				}
			} else if('0F9'.equals(commentParentId.subString(0,3))) {
				Simpplr_Site__c siteObj = getParentSiteObj(commentParentId);
				parentSiteId = siteObj.Id;
				isNotificationAllowed = siteObj.Show_In_Simpplr__c;
			}

			List<People__c> peopleList = [select id, user__r.Id, External_Photo_URL__c, External_Photo_URL_Expiry_Date__c, 
											  Name, Segment__r.Id, Segment__r.Branding_JSON__c, Segment__r.Branding_Logo__c
											  from People__c 
											  where (User__c =:feedItemList[0].createdById or User__c =:feedCommentObj.createdById)];
				
			Map<String, String> commentOwnerIdToExtPhotoUrlMap = new Map<String,String>();
			People__c commentCreatedByPeopleObj;
			for(People__c peopleObj : peopleList) {
				if(peopleObj.External_Photo_URL_Expiry_Date__c != null && peopleObj.External_Photo_URL_Expiry_Date__c > DateTime.now()) {
					commentOwnerIdToExtPhotoUrlMap.put(peopleObj.user__r.Id, peopleObj.External_Photo_URL__c);	
				}
				if(feedCommentObj.createdById == peopleObj.user__r.Id) {
					commentCreatedByPeopleObj = peopleObj;
				}
			}
			
			insertLikeOfComment(feedCommentId,feedItemId,commentCreatedByPeopleObj.Id);
		
			if(isNotificationAllowed) {
				
				ConnectApi.FeedElement feedObject = NotificationHelper.getFeedElementObject(feedItemList,'Page');
				if(SimpplrContext.isFeatureEnabled('Full_External_Search')) {
					FeedDataAdapter.getUserIdsToConvert(feedObject);
					FeedDataAdapter.getPeopleFromUserIds();
				}
				NotificationHelper.NotificationMetadata notificationMetaObj = NotificationHelper.getNotificationInfo(feedItemList[0], feedObject);
				
				//================================
				NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(commentCreatedByPeopleObj);
				
				List<NotificationHelper.EmailWrapper> emailWrapperList = NotificationHelper.createEmailWrapperObjectList(feedItemList,feedObject, notificationMetaObj ,'Page',simpplrContentList,brandingInfo,'CommentLike', null, false);
				Map<String, NotificationDao.Notification> notificationObjMap = new Map<String, NotificationDao.Notification>();
				
				if(emailWrapperList.size() > 0){
					if('TextComment'.equalsIgnoreCase(feedCommentObj.CommentType) || ('ContentComment'.equalsIgnoreCase(feedCommentObj.CommentType) && String.isNotBlank(feedCommentObj.commentBody))){
						if(SimpplrContext.isFeatureEnabled('Full_External_Search')){
							for(ConnectApi.Comment feedComment : feedObject.capabilities.comments.page.items){
								if(feedCommentObj.id == feedComment.id){
									replySnippet = NotificationHelper.getNotificationText(feedComment.body.messageSegments);
								}
							}
						} else {
							replySnippet = feedCommentObj.CommentBody;
						}
						if(String.isNotBlank(replySnippet) && replySnippet.containsIgnoreCase(ServiceConstants.FEED_EXT_FILE_SEPRATOR)) {
							replySnippet = replySnippet.substringBefore(ServiceConstants.FEED_EXT_FILE_SEPRATOR);
						}
						replySnippet = String.isBlank(replySnippet) ? '' : Utility.getPlainText(replySnippet, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4();
					}
				}
				Map<String,NotificationHelper.NotificationMetadata> targetIdToSubjectMap = new Map<String,NotificationHelper.NotificationMetadata>();
				
				List<People_Preference__c> peoplePrefList;
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', feedCommentObj.createdById);
				String query = '';
				
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
					query = 'SELECT Id,people__r.user__c, people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c, Allow_Simpplr_Emails__c, Email_Comments_On_Post_I_Like__c, ' 
								+ ' Email_Like_My_Post_Or_Comment__c, Email_Posts_To_Me__c, People__c, People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, '  

								+ ' User__r.timeZonesidkey, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey FROM People_Preference__c ' 
								+ ' Where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\'  and  people__r.User__c =:soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
				} else {
					query = 'SELECT Id,people__r.user__c, people__r.user__r.userName, People__r.First_Name__c, People__r.Last_Name__c,People__r.Full_Name__c, Allow_Simpplr_Emails__c, Email_Comments_On_Post_I_Like__c, '  
								+ ' Email_Like_My_Post_Or_Comment__c, Email_Posts_To_Me__c, People__c, People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, '  

								+ ' User__r.timeZonesidkey, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey FROM People_Preference__c ' 
								+ '  Where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\'  and  people__r.User__c =:soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePrefList);
				String userLanguage;

				Map<String,String> userIdWithLanguageLocalekey = new Map<String,String>();
				if(!peoplePrefList.isEmpty()) {
					userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePrefList[0].User__r.languagelocalekey);
					userIdWithLanguageLocalekey.put(peoplePrefList[0].people__r.user__c, userLanguage);
				}

				NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
				
				notificationObj.snippet = replySnippet;
				notificationObj.type = TYPE_INFORMATION;
				notificationObj.subType = SUB_TYPE_LIKE;
				notificationObj.status = NOTIFICATION_STATUS;
				
				if(commentParentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix) && simpplrContentList.size() > 0) {
					notificationObj.categoryStr = 'Like_My_Reply_On_Content';
				} else {
					notificationObj.categoryStr = 'Like_My_Reply';
				}

				if (String.isNotBlank(relatedContentId)) {
					notificationObj.objectType = OBJECT_TYPE_CONTENT_FEEDCOMMENT;
					notificationObj.contentId = relatedContentId;
					if(String.isNotBlank(userLanguage)) {
						if(String.isBlank(replySnippet)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_REPLY_LIKE_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_REPLY_LIKE_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{replySnippet}}', replySnippet);
						}
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					}
				} else {
					notificationObj.objectType = OBJECT_TYPE_FEEDCOMMENT;
					if(String.isNotBlank(userLanguage)) {
						if(String.isBlank(replySnippet)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_LIKE + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{replySnippet}}', replySnippet);
						}
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					}
				}
				
				if(String.isNotBlank(commentCreatedByPeopleObj.Id)){
					notificationObj.toUser = commentCreatedByPeopleObj.Id;
				}
				notificationObj.parentObjectID = feedItemList[0].Id;
				notificationObj.objectID = feedCommentId;
				if('0F9'.equals(commentParentId.subString(0,3))){
					if(String.isNotBlank(parentSiteId)){
						notificationObj.siteId = parentSiteId;
					}
				}
				notificationObjMap.put(feedCommentObj.createdById, notificationObj);
				notiMetaObj.prefSettingType = 'LIKES A POST OR REPLY I MADE';
				targetIdToSubjectMap.put(feedCommentObj.createdById,notiMetaObj);
				
				Map<String, NotificationHelper.BrandingInfo> brandingInfoMap = new Map<String, NotificationHelper.BrandingInfo>();
				if(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled) {
					brandingInfoMap.put(commentCreatedByPeopleObj.Segment__r.Id, brandingInfo);
				} else {
					brandingInfoMap.put('APP_CONTEXT', brandingInfo);
				}
				
				Integer totalComments = feedItemList[0].feedComments.size();
				Map<String, String> mapOfSegmentIdAndBody = new Map<String, String>();

				Map<String, NotificationHelper.EmailWrapper> segmentIdAndEmailWrapperMap = NotificationHelper.createSegmentIdAndEmailWrapperMap(brandingInfoMap, feedItemList, feedObject, replySnippet, notificationMetaObj ,'page', simpplrContentList, 'Comment', null, false);
				
				if(SimpplrContext.enableEmail) {
					mapOfSegmentIdAndBody = getFinalCommentEmailBody(segmentIdAndEmailWrapperMap, brandingInfoMap, feedItemList[0].id, totalComments, simpplrContentList, commentOwnerIdToExtPhotoUrlMap,userIdWithLanguageLocalekey,feedCommentId,true);
				}

				Map<String, Integer> localisationCountsMap = new Map<String, Integer>();
				localisationCountsMap.put('commentsCount', totalComments);
				
				List<ConnectApi.Comment> commentLst = feedObject.capabilities.comments.page.items;
				localisationCountsMap.put('filesCount', filesCountOnReply);
				
				if((targetIdToSubjectMap.size() + notificationObjMap.size())> 50){
					BatchCheckAccessAndSendNotification batchToSendEmail = new BatchCheckAccessAndSendNotification(feedObject,simpplrContentList,notificationObjMap,targetIdToSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, true, localisationCountsMap);
					Database.executeBatch(batchToSendEmail, 50);
				}  
				else{
					checkAccessAndSendEmail(feedObject,simpplrContentList,notificationObjMap,targetIdToSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, true, localisationCountsMap);	
				}
			}
			//}
		} catch(Exception e){
			logger.logError('Unable to send CommentLikeNotificationAndEmail email',e); 
		}
	}
	@testVisible 
	private static void insertLikeOfComment(String commentId,String feedItemId,String peopleId){
		try{
			Like__c likeObj = new Like__c();
			String currentUserId = UserContext.getCurrentUserInfo.id;
			List<Like__c> likesForCommentsList = [select id from Like__c where Feed_Item_Comment_Id__c =:commentId AND Feed_Item_Id__c =:feedItemId AND people__c =:currentUserId limit 1];
			if(likesForCommentsList.size() == 0){
				likeObj.Like_Receiver__c = peopleId;
				likeObj.Feed_Item_Comment_Id__c = commentId;
				likeObj.Feed_Item_Id__c = feedItemId;
				likeObj.People__c = currentUserId ;

				List<Schema.SObjectField> fieldList = new List<Schema.SObjectField>();
				fieldList.add(Like__c.Like_Receiver__c);
				fieldList.add(Like__c.Feed_Item_Comment_Id__c);
				fieldList.add(Like__c.Feed_Item_Id__c);
				fieldList.add(Like__c.People__c);

				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.WITHOUT);
				SIMPESAPI.accessController().insertAsUser(likeObj, fieldList);
			}
			
		}catch(DmlException e) {
        	
		}
	}
	@testVisible 
	private static void insertLikeOfFeedpost(String feedItemId,String peopleId){
		try{
			Like__c likeObj = new Like__c();
			String currentUserId = UserContext.getCurrentUserInfo.id;
			List<Like__c> likesForFeedPost = [select id from Like__c where  Feed_Item_Id__c =:feedItemId AND people__c =:currentUserId AND Is_Deleted__c =: false limit 1];
			if(likesForFeedPost.size() == 0){
				likeObj.Like_Receiver__c = peopleId;
				likeObj.Feed_Item_Id__c = feedItemId;
				likeObj.People__c = currentUserId;

				List<Schema.SObjectField> fieldList = new List<Schema.SObjectField>();
				fieldList.add(Like__c.Like_Receiver__c);
				fieldList.add(Like__c.Feed_Item_Id__c);
				fieldList.add(Like__c.People__c);

				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.WITHOUT);
				SIMPESAPI.accessController().insertAsUser(likeObj, fieldList);
			}
			
		}catch(DmlException e) {
        	
		}
	}
	
	/* *******************************************************************************************************************************************************/
	public static void sendPostLikeNotificationAndEmail(String feedItemId) {
		try {
			String body = '';
			List<FeedItem> feedItemList = [Select id, parentId,Parent.type,parent.name, createdById,createdBy.Name, createdDate, body, title, type from feeditem where id=:feedItemId limit 1];
			String parentSiteId;
			Boolean isNotificationAllowed = true;
			String parentId = feedItemList[0].parentId;
			List<Simpplr_Content__c> simpplrContentList = new List<Simpplr_Content__c>();
			String relatedContentRecordId ;
			
			if(feedItemList[0].type.equalsIgnoreCase('TrackedChange')){
				isNotificationAllowed = false;

			} else if(feedItemList[0].type.equalsIgnoreCase('CollaborationGroupCreated')){
				isNotificationAllowed = false;

			}else if(parentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix)) {
				simpplrContentList = [select id, Name, title__c, type__c, Site__r.Show_In_Simpplr__c from simpplr_content__c where id=:parentId];
				
				if (simpplrContentList.size() > 0) {
					Simpplr_Content__c contentRecord = simpplrContentList[0];
					
					if (contentRecord.Site__c != NULL && contentRecord.Site__r.Show_In_Simpplr__c == false) {
						isNotificationAllowed = false;
					}
					relatedContentRecordId = contentRecord.Id;
				}
				
			} else if('0F9'.equals(parentId.subString(0,3))) {
				Simpplr_Site__c siteObj = getParentSiteObj(parentId);
				parentSiteId = siteObj.Id;
				isNotificationAllowed = siteObj.Show_In_Simpplr__c;
			}

			String feedpostCreatedById = feedItemList[0].createdById;
			String feedpostCreatedByPeopleId = Utility.getPeopleIdList(new List<String>{feedpostCreatedById})[0];
			insertLikeOfFeedpost(feedItemId,feedpostCreatedByPeopleId);
			
			if(isNotificationAllowed) {
				
				String createdById = feedItemList[0].createdById;
				People__c postCreatedByPeopleObj = Utility.getListOfPeopleWithSegmentationFields(new List<String>{createdById})[0];
				NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(postCreatedByPeopleObj);
				
				ConnectApi.FeedElement feedObject = NotificationHelper.getFeedElementObject(feedItemList,'Page');
				if(SimpplrContext.isFeatureEnabled('Full_External_Search')) {
					FeedDataAdapter.getUserIdsToConvert(feedObject);
					FeedDataAdapter.getPeopleFromUserIds();
				}
				NotificationHelper.NotificationMetadata notificationMetaObj = NotificationHelper.getNotificationInfo(feedItemList[0], feedObject);
				
				List<NotificationHelper.EmailWrapper> emailWrapperList = NotificationHelper.createEmailWrapperObjectList(feedItemList,feedObject, notificationMetaObj ,'Page',simpplrContentList,brandingInfo,'PostLike', null, false);
				String postSnippet = emailWrapperList[0].notificationMetadata.snippet;
				
				if(String.isNotBlank(postSnippet) && postSnippet.containsIgnoreCase(ServiceConstants.FEED_EXT_FILE_SEPRATOR)) {
					postSnippet = postSnippet.substringBefore(ServiceConstants.FEED_EXT_FILE_SEPRATOR);
				}

				String awardName = '';
				FeedElementWrapper.RecognitionResponseInfo recognitionResponseObj;
				String feedItemMsgTempStr = postSnippet;
				if (feedItemMsgTempStr.indexOf(ServiceConstants.RECOGNITION_FILE_SEPRATOR) >= 0) { // Recognition Post identify elements by us using \u2063\uFEFF\uFEFF\u200b\uFEFF\uFEFF\u2063 
					recognitionResponseObj = NotificationHelper.getRecognition(feedItemId);
					awardName = recognitionResponseObj.recognitionAwardName;
				}

				if(String.isBlank(awardName)){
					postSnippet = Utility.chompString(postSnippet, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH);
				} else {
					postSnippet = awardName;
				} 
				
				
				Map<String, NotificationDao.Notification> notificationObjMap = new Map<String, NotificationDao.Notification>();
				Map<String,NotificationHelper.NotificationMetadata> targetIdToSubjectMap = new Map<String,NotificationHelper.NotificationMetadata>();
				List<People_Preference__c> peoplePrefList;
				
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', createdById);
				String query = '';
				
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
					query = 'SELECT Id,people__r.user__c, people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c, '
								+ ' Email_Like_My_Post_Or_Comment__c, People__c, People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, '
								+ ' User__r.timeZonesidkey, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey  FROM People_Preference__c '
								+ ' Where  Allow_Simpplr_Emails__c = true  and Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__r.User__c =:soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
				} else {
					query = 'SELECT Id,people__r.user__c, people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c, '
								+ ' Email_Like_My_Post_Or_Comment__c, People__c, People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, '
								+ ' User__r.timeZonesidkey, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey  FROM People_Preference__c '
								+ ' Where  Allow_Simpplr_Emails__c = true  and Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__r.User__c =:soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePrefList);
				NotificationHelper.EmailWrapper emailWrapperObj = emailWrapperList[0];
				
				String targetUserId = createdById;
				String userLanguage;
				NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
				
				if(!targetUserId.equalsIgnoreCase(UserContext.id)) {
					NotificationDao.Notification notificationObj = new NotificationDao.Notification();
					if(peoplePrefList.isEmpty() == false) {
						userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePrefList[0].User__r.languagelocalekey);
					}
					if(parentId.subString(0,3).equalsIgnoreCase('005') || '0F9'.equals(parentId.subString(0,3))){
						notificationObj.snippet = postSnippet;
						if(String.isNotBlank(userLanguage)) {
							if(feedItemList[0].type.equalsIgnoreCase('LinkPost')){
								if(String.isBlank(postSnippet)) {
									notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_POST_LIKE + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
								} else {
									notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_POST_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', postSnippet);
								}
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_POST_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							}else if(feedItemList[0].type.equalsIgnoreCase('PollPost')){
								notificationObj.submitterComment = POST_LIKE + ' Poll ' + postSnippet;
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_POLL_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', postSnippet);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_POLL_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							}else{
								if(String.isBlank(postSnippet)) {
									notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_POST_LIKE + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
								} else {
									String subject = String.isNotBlank(awardName) ? KEY_FEED_POST_LIKE + KEY_RECOGNITION + KEY_SUBJECT : KEY_FEED_POST_LIKE + KEY_SUBJECT;
									notiMetaObj.subject = LocaleContext.getLabel(userLanguage, subject).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', postSnippet);
								}
								String heading = String.isNotBlank(awardName) ? KEY_FEED_POST_LIKE + KEY_RECOGNITION + KEY_INTRO : KEY_FEED_POST_LIKE + KEY_INTRO;
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, heading).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							}
						}
					} else if(parentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix)) {
						notificationObj.snippet = Utility.chompString(simpplrContentList[0].title__c,255);
						if(String.isNotBlank(userLanguage)) {
							if(feedItemList[0].type.equalsIgnoreCase('PollPost')) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_POLL_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', postSnippet);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_POLL_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);

							} else {
								String subject = String.isNotBlank(awardName) ? KEY_FEED_POST_LIKE + KEY_RECOGNITION + KEY_SUBJECT : KEY_FEED_POST_LIKE + KEY_SUBJECT;
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, subject).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', postSnippet);

								String heading = String.isNotBlank(awardName) ? KEY_FEED_POST_LIKE + KEY_RECOGNITION + KEY_INTRO : KEY_FEED_POST_LIKE + KEY_INTRO;
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, heading).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							}
						}
					}
					notificationObj.type = TYPE_INFORMATION;
					notificationObj.subType = SUB_TYPE_LIKE;
					notificationObj.status = NOTIFICATION_STATUS;
					notificationObj.contentId = relatedContentRecordId;
					notificationObj.objectType = String.isNotBlank(relatedContentRecordId) ? OBJECT_TYPE_CONTENT_FEEDITEM : OBJECT_TYPE_FEEDITEM;

					if(parentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix)) {
						notificationObj.snippet = postSnippet;
						notificationObj.categoryStr = 'Like_My_Comment_On_Content';
					} else if('PollPost'.equalsIgnoreCase(feedItemList[0].Type)) {
						notificationObj.categoryStr = 'Like_My_Poll';
					} else if(String.isNotBlank(awardName)){
						notificationObj.categoryStr = 'Like_My_Recognition';
					} else {	
						notificationObj.categoryStr = 'Like_My_Post';
					}

					List<String> PeopleIdList = Utility.getPeopleIdList(new List<String>{targetUserId});
					
					if(PeopleIdList!=null && !PeopleIdList.isEmpty()){
						notificationObj.toUser = PeopleIdList[0];
					}
					notificationObj.objectID = feedItemList[0].Id;
					if('0F9'.equals(parentId.subString(0,3))) {
						if(String.isNotBlank(parentSiteId)){
							notificationObj.siteId = parentSiteId;
						}
					}
					notificationObjMap.put(targetUserid,notificationObj);
					notiMetaObj.prefSettingType = 'LIKES A POST OR REPLY I MADE';
					targetIdToSubjectMap.put(targetUserId,notiMetaObj);
				}
				
				if(SimpplrContext.enableEmail && !peoplePrefList.isEmpty()){
					body = getPostLikeEmailWithTemplate(emailWrapperObj, feedItemList[0].id, peoplePrefList, brandingInfo);
				}
				
				Map<String, String> mapOfSegmentIdAndBody = new Map<String, String>();
				
				//postCreatedByPeopleObj
				if(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled) {
					mapOfSegmentIdAndBody.put(postCreatedByPeopleObj.Segment__r.Id, body);
				} else {
					mapOfSegmentIdAndBody.put('APP_CONTEXT', body);
				}

				Map<String, Integer> localisationCountsMap = new Map<String, Integer>();
				//localisationCountsMap.put('commentsCount', commentsCount);
				Integer filesCount = getFilesCountForFeedPost(feedObject);
				localisationCountsMap.put('filesCount', filesCount);

				if((targetIdToSubjectMap.size() + notificationObjMap.size())> 50){
					BatchCheckAccessAndSendNotification batchToSendEmail = new BatchCheckAccessAndSendNotification(feedObject,simpplrContentList,notificationObjMap,targetIdToSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, false, localisationCountsMap);
					Database.executeBatch(batchToSendEmail, 50);										
				} 
				else{
					checkAccessAndSendEmail(feedObject,simpplrContentList,notificationObjMap, targetIdToSubjectMap, mapOfSegmentIdAndBody, peoplePrefList, false, localisationCountsMap);	
				}	
			}
		} catch(Exception e){
			logger.logError('Unable to send PostLikeNotificationAndEmail email',e);
		}
	}
	/* *******************************************************************************************************************************************************/

	
	
	@testVisible 
	private static Map<String, String> getEmailHtmlBodyWithTemplate(Map<String, NotificationHelper.EmailWrapper> segmentIdAndEmailWrapperMap, Map<String, NotificationHelper.BrandingInfo> brandingInfoMap, String feedItemId, string userLanguage){
		Map<String, String> segmentAndEmailBodyMap = new Map<String, String>();
		
		for(String segmentId : segmentIdAndEmailWrapperMap.keySet()) {
			NotificationHelper.EmailWrapper emailWrapperObj = segmentIdAndEmailWrapperMap.get(segmentId);
			List<String> formatterList = new List<String>();
			
			NotificationHelper.BrandingInfo brandingInfo =  brandingInfoMap.get(segmentId);
			
			String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
			
			formatterList.add(viewLink(feedItemId));
			formatterList.add(viewLink(feedItemId));
			formatterList.add(brandingInfo.general_primaryColor);
			formatterList.add(VIEW_LABEL_PLACEHOLDER);

			String viewLink = EmailUtility.format(EmailTemplateService.templatePartMap.get('viewLink'),formatterList);
			
			formatterList.clear();
			
			//0=profileImage 1=title 2=body 3=view
			formatterList.add(profileDisplayIcon);
			formatterList.add(emailWrapperObj.title);
			if(String.isNotBlank(emailWrapperObj.pollBody)) {
				formatterList.add(emailWrapperObj.pollBody);
			} else {
				formatterList.add(emailWrapperObj.body+emailWrapperObj.contentBody+emailWrapperObj.linkBody);
			}
			formatterList.add(viewLink);
			formatterList.add('(ToBeReplacedDate' + 0 + ')');
			listOfCreatedDateTime.add(emailWrapperObj.createdDate);
			String postSection = EmailUtility.format(EmailTemplateService.templatePartMap.get('postSection'),formatterList);
			formatterList.clear();
			//return postSection;
			segmentAndEmailBodyMap.put(segmentId, postSection);
		}
		
		return segmentAndEmailBodyMap;
	}
	@testVisible
	private static string getOriginalPostHtmlBodyWithTemplate(NotificationHelper.EmailWrapper emailWrapperObj, Integer totalComments, String feedItemId, List<Simpplr_Content__c> simpplrContentList, Map<String, String> commentOwnerIdToExtPhotoUrlMap) {
		
		List<String> formatterList = new List<String>();

		String profileDisplayIcon = '';
		if(!commentOwnerIdToExtPhotoUrlMap.isEmpty()) {
			profileDisplayIcon = getProfileDisplayIcon(commentOwnerIdToExtPhotoUrlMap.get(emailWrapperObj.createdById));
		} else {
			profileDisplayIcon = getProfileDisplayIcon(null);
		}

		String otherReplySection='';
		if(totalComments>1) {
			formatterList.add(viewLink(feedItemId)+'#feed-comment-'+feedItemId);
			formatterList.add(REPLIES_LABEL_PLACEHOLDER);
			
			//0=link 1= total comment count
			otherReplySection = EmailUtility.format(EmailTemplateService.templatePartMap.get('otherReplySection'),formatterList);
			formatterList.clear();
		} 

		//0=profileImage 1=title 2= body 3=date 4=other replies
		formatterList.add(profileDisplayIcon);
		formatterList.add(emailWrapperObj.title);

		if(String.isNotBlank(emailWrapperObj.pollBody)){
			formatterList.add(emailWrapperObj.pollBody);
		} else {
			formatterList.add(emailWrapperObj.body+emailWrapperObj.contentBody+emailWrapperObj.linkBody);
		}
		listOfCreatedDateTime.add(emailWrapperObj.createdDate);
		formatterList.add('(ToBeReplacedDate' + 0 + ')');
		formatterList.add(otherReplySection);
		formatterList.add(ORGINAL_POST_LABEL_PLACEHOLDER);
		
		String OriginalPostSection  = EmailUtility.format(EmailTemplateService.templatePartMap.get('OriginalPostSection'), formatterList);

		formatterList.clear();
		
		return OriginalPostSection;
	}

	public static void sendFeedCommentNotificationsAndEmail(List<FeedComment> feedCommentList) {
		sendFeedCommentNotificationsAndEmail(feedCommentList, null, false);
	}
	/**
	 * IF 2nd param is provided then it will be used as sentBy for notification(s) (implemented for slack 2.0)
	 * ELSE sentBy is currentUserContext
	 */
	public static void sendFeedCommentNotificationsAndEmail(List<FeedComment> feedCommentList, Id createdByUserId, Boolean isUpdatingPlaceholderFeed) {
		try {
			String body = '';
			String commentParentId = feedCommentList[0].parentId;
			String replySnippet = '';
			Map<String, String> mapOfSegmentIdAndBody = new Map<String, String>();
			
			List<FeedItem> feedItemList = new List<FeedItem>();
			String commentFeedItemId = feedCommentList[0].feedItemId;
			String queryForFeedItem  = 'select id, parentId,Parent.type,parent.name, createdById,createdBy.Name, createdDate, type, (select createdById, createdBy.Name from FeedComments order by createdDate desc),(select createdById, createdBy.Name from FeedLikes order by createdDate desc) from feedItem where id=:commentFeedItemId'; 
			if(SimpplrContext.isCommunitiesEnabled){
				queryForFeedItem=queryForFeedItem+' AND (NetworkScope = null OR NetworkScope = \'AllNetworks\')';
			}
			feedItemList = Database.query(queryForFeedItem);
			for(FeedItem feedItemObj : feedItemList) {
				FeedDataAdapter.addUserIdsToConvert(feedItemObj.parentId);
				FeedDataAdapter.addUserIdsToConvert(feedItemObj.createdById);
				for(FeedComment fcObj : feedItemObj.FeedComments) {
					FeedDataAdapter.addUserIdsToConvert(fcObj.createdById);
				}
				for(FeedLike flObj : feedItemObj.FeedLikes) {
					FeedDataAdapter.addUserIdsToConvert(flObj.createdById);
				}
			}
			FeedDataAdapter.getPeopleFromUserIds();
			List<Simpplr_Content__c> simpplrContentList = new List<Simpplr_Content__c>();
			
			String parentSiteId;
			String relatedContentId ;
			Boolean isNotificationAllowed = true;

			if(feedItemList[0].type.equalsIgnorecase('TrackedChange')) {
				isNotificationAllowed = false;

			}else if(feedItemList[0].type.equalsIgnorecase('CollaborationGroupCreated')) {
				isNotificationAllowed = false;

			} else if(commentParentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix)) {
				simpplrContentList = [select id,Name, title__c, Primary_Author__c, Primary_Author__r.Full_Name__c, type__c, Site__r.Chatter_Group_Id__c, Site__r.Show_In_Simpplr__c, Site__c from simpplr_content__c where id=:commentParentId];
				
				if(!simpplrContentList.isEmpty() && String.isNotBlank(simpplrContentList[0].Site__c)){
					parentSiteId = simpplrContentList[0].Site__c;
					isNotificationAllowed = simpplrContentList[0].Site__r.Show_In_Simpplr__c;
					relatedContentId =  simpplrContentList[0].Id; 
				}
			} else if('0F9'.equals(commentParentId.subString(0,3))){
				Simpplr_Site__c siteObj = getParentSiteObj(commentParentId);
				parentSiteId = siteObj.Id;
				isNotificationAllowed = siteObj.Show_In_Simpplr__c;
			}
			
			if(isNotificationAllowed) {
				Integer commentIndex = 0;
				Map<String,String> commentedEarlierMap = new Map<String,String>();
				for(FeedComment feedCommentObj:feedItemList[0].feedComments) {
					if(commentIndex >0){
						commentedEarlierMap.put(feedCommentObj.createdById, (FeedDataAdapter.mapUserIdToPeople.containsKey(feedCommentObj.createdById) ? FeedDataAdapter.mapUserIdToPeople.get(feedCommentObj.createdById).Full_Name__c : feedCommentObj.createdBy.Name));
					}
					commentIndex = commentIndex +1;
				}
				
				Map<String,People__c> peopleMap = new Map<String,People__c>([select id, user__r.Id, External_Photo_URL__c, External_Photo_URL_Expiry_Date__c, 
											  								Name, Segment__r.Id, Segment__r.Branding_JSON__c, Segment__r.Branding_Logo__c
											  								from People__c 
																			where (User__c =:feedItemList[0].createdById or User__c =:feedCommentList[0].createdById)]);
				
				Map<String, String> commentOwnerIdToExtPhotoUrlMap = new Map<String,String>();
				People__c commentCreatedByPeopleObj;
				for(People__c peopleObj : peopleMap.values()){
					if(peopleObj.External_Photo_URL_Expiry_Date__c != null && peopleObj.External_Photo_URL_Expiry_Date__c > DateTime.now()) {
						commentOwnerIdToExtPhotoUrlMap.put(peopleObj.User__c, peopleObj.External_Photo_URL__c);	
					}
					if(feedCommentList[0].createdById  == peopleObj.user__r.Id) {
						commentCreatedByPeopleObj = peopleObj;
					}
				}
				
				ConnectApi.FeedElement feedObject = NotificationHelper.getFeedElementObjectWithSortedComments(feedItemList[0]);
				if(SimpplrContext.isFeatureEnabled('Full_External_Search')) {
					FeedDataAdapter.getUserIdsToConvert(feedObject);
					FeedDataAdapter.getPeopleFromUserIds();
				}
				NotificationHelper.NotificationMetadata notificationMetaObj = NotificationHelper.getNotificationInfo(feedItemList[0], feedObject);
				String postSnippetStr = String.isNotBlank(notificationMetaObj.snippet) ? notificationMetaObj.snippet.substringBefore(ServiceConstants.FEED_EXT_FILE_SEPRATOR).trim() : '';

				String awardName = '';
				FeedElementWrapper.RecognitionResponseInfo recognitionResponseObj;
				String feedItemMsgTempStr = notificationMetaObj.snippet;
				if (feedItemMsgTempStr.indexOf(ServiceConstants.RECOGNITION_FILE_SEPRATOR) >= 0) { // Recognition Post identify elements by us using \u2063\uFEFF\uFEFF\u200b\uFEFF\uFEFF\u2063 
					recognitionResponseObj = NotificationHelper.getRecognition(feedCommentList[0].feedItemId);
					awardName = recognitionResponseObj.recognitionAwardName;
				}

				String replySnippet255Char =  '';
				String messageStr = '';
				ConnectApi.Comment currentComment = null;
				List<ConnectApi.Comment> commentLst = feedObject.capabilities.comments.page.items;

				for(ConnectApi.Comment feedCommentObj : commentLst){
					if(feedCommentObj.id == feedCommentList[0].id){
						messageStr = SimpplrContext.isFeatureEnabled('Full_External_Search') ? NotificationHelper.getNotificationText(feedCommentObj.body.messageSegments) : feedCommentObj.body.text;
						currentComment = feedCommentObj;
					}
				}

				NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(commentCreatedByPeopleObj);
				List<NotificationHelper.EmailWrapper> emailWrapperList = NotificationHelper.createEmailWrapperObjectList(feedItemList, feedObject, notificationMetaObj , 'page', simpplrContentList, brandingInfo, 'Comment', currentComment, isUpdatingPlaceholderFeed);
				NotificationHelper.EmailWrapper emailWrapperObj = emailWrapperList[0];
				
				Integer filesCount = getFilesCountForComment(currentComment);

				if('TextComment'.equalsIgnoreCase(feedCommentList[0].CommentType) || 
							('ContentComment'.equalsIgnoreCase(feedCommentList[0].CommentType) &&
							 	String.isNotBlank(feedCommentList[0].commentBody))){
					if(String.isNotBlank(messageStr) && messageStr.containsIgnoreCase(ServiceConstants.FEED_EXT_FILE_SEPRATOR)) {
						messageStr = messageStr.subStringBefore(ServiceConstants.FEED_EXT_FILE_SEPRATOR);
					}
					if(String.isNotBlank(messageStr)){
						replySnippet255Char = Utility.getPlainText(messageStr, 255, true).unescapeHtml4();
						replySnippet = Utility.getPlainText(messageStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4();
					}
				}

				Integer index = 0;
				NotificationHelper.EmailCommentWrapper emailCommentWrapperObj = emailWrapperObj.commentList[emailWrapperObj.commentList.size()-1];
				emailCommentWrapperObj.notificationMetadata.isRecognition = String.isNotBlank(awardName) ? true : false;
				postSnippetStr = awardName;
				NotificationHelper.NotificationMetadata commentNotiMetaObj = emailCommentWrapperObj.notificationMetadata;
				
				Map<String,String> postLikeduserMap = new Map<String,String>();
				for(FeedLike likeObj : feedItemList[0].FeedLikes){
					postLikeduserMap.put(likeObj.createdbyid, (FeedDataAdapter.mapUserIdToPeople.containsKey(likeObj.CreatedById) ? FeedDataAdapter.mapUserIdToPeople.get(likeObj.CreatedById).Full_Name__c : likeObj.createdby.name));
				}
				Map<String,String> mentionedUserMap = commentNotiMetaObj.mentionedUserMap!=null?commentNotiMetaObj.mentionedUserMap:new Map<String,String>();
				Map<String,String> profileIdMap = commentNotiMetaObj.profileIdMap!=null?commentNotiMetaObj.profileIdMap:new Map<String,String>();
				Map<String,String> postOwnerMap = commentNotiMetaObj.postOwnerMap!=null?commentNotiMetaObj.postOwnerMap:new Map<String,String>();
				
				Set<String> consolidatedNotiRelatedUserSet = new Set<String>();

				if(!mentionedUserMap.isEmpty()) {
					consolidatedNotiRelatedUserSet.addAll(mentionedUserMap.keySet());
				}
				if(!postLikeduserMap.isEmpty()) {
					consolidatedNotiRelatedUserSet.addAll(postLikeduserMap.keySet());
				}
				if(!commentedEarlierMap.isEmpty()) {
					consolidatedNotiRelatedUserSet.addAll(commentedEarlierMap.keySet());
				}
				if(commentParentId.subString(0,3).equalsIgnoreCase('005')){
					consolidatedNotiRelatedUserSet.addAll(profileIdMap.keySet());
				}
				consolidatedNotiRelatedUserSet.addAll(postOwnerMap.keySet());

				Set<String> contentNotiSettingEnabledUserIds = new Set<String>();
				if(!simpplrContentList.isEmpty() && String.isNotBlank(simpplrContentList[0].Site__c)){
					contentNotiSettingEnabledUserIds =  NotificationDao.getUserIdsWithContentNotificationsEnabled(simpplrContentList[0].Id);
					contentNotiSettingEnabledUserIds.removeAll(consolidatedNotiRelatedUserSet);
				}
				consolidatedNotiRelatedUserSet.addAll(contentNotiSettingEnabledUserIds);
				
				consolidatedNotiRelatedUserSet.add(UserInfo.getUserId());
				
				Integer totalComments = feedItemList[0].feedComments.size();

				Map<String,NotificationHelper.NotificationMetadata> targetUserToEmailSubjectMap = new Map<String,NotificationHelper.NotificationMetadata>();
				List<People_Preference__c> peoplePrefList = new List<People_Preference__c>();
				if(consolidatedNotiRelatedUserSet.size() > 0) {
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', consolidatedNotiRelatedUserSet);
				String query = '';
					if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
						soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
						query = 'SELECT Id,people__r.user__c, people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, ' 
									+ '	Email_Posts_To_Me__c, People__c, User__r.timeZonesidkey, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey ' 
									+ '	FROM People_Preference__c Where  Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__r.User__c IN :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
					} else {
						query = 'SELECT Id,people__r.user__c, people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, ' 
									+ '	Email_Posts_To_Me__c, People__c, User__r.timeZonesidkey, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey '  
									+ '	FROM People_Preference__c Where  Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__r.User__c IN :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
					}
					SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
					peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
					targetUserToEmailSubjectMap = getTargetUserToEmailSubjectMapForFeedComment(emailCommentWrapperObj.notificationMetadata, 
																	contentNotiSettingEnabledUserIds, profileIdMap, postOwnerMap,
																	mentionedUserMap, postLikeduserMap, commentedEarlierMap, simpplrContentList,peoplePrefList,
																	filesCount, postSnippetStr, replySnippet, (FeedDataAdapter.mapUserIdToPeople.containsKey(feedItemList[0].CreatedById) ? FeedDataAdapter.mapUserIdToPeople.get(feedItemList[0].CreatedById).Full_Name__c : feedItemList[0].createdby.name));
				}

				Map<String, NotificationHelper.BrandingInfo> brandingInfoMap = new Map<String, NotificationHelper.BrandingInfo>();
				Map<String, People_Preference__c> peoplePreferMap = new Map<String, People_Preference__c>();
				Map<String, String> userIdToLanguageLocaleKeyMap =new Map<String,String>();
				for(People_Preference__c peoplePreferObj : peoplePrefList){
					peoplePreferMap.put(peoplePreferObj.people__r.user__c, peoplePreferObj);
					userIdToLanguageLocaleKeyMap.put(peoplePreferObj.people__r.user__c, peoplePreferObj.user__r.languagelocalekey);
					if(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled) {
						if(brandingInfoMap.containsKey(peoplePreferObj.People__r.Segment__r.Id) == false) {
							brandingInfoMap.put(peoplePreferObj.People__r.Segment__r.Id, EmailUtility.getBrandingInfo4People(peoplePreferObj.People__r));
						}
					}
				}
				
				Map<String,String> targetUserToNotiCategoryMap = new Map<String,String>();
				String profileId = (new List<String>(profileIdMap.keySet()))[0];
				String postOwnerId = (new List<String>(postOwnerMap.keySet()))[0];
				
				for(String likedUserId : postLikeduserMap.keySet()) {
					targetUserToNotiCategoryMap.put(likedUserId, 'Comments_On_Post_I_Like');
				}

				for(String nSEUserId : contentNotiSettingEnabledUserIds) {
					targetUserToNotiCategoryMap.put(nSEUserId, 'Content_Post');
				}

				//Replied on a change to 
				for(String commentedEarlierUserId : commentedEarlierMap.keySet()) {
					if(UserInfo.getUserId().equalsIgnoreCase(postOwnerId)) {
						if(String.isNotBlank(relatedContentId)) {
							targetUserToNotiCategoryMap.put(commentedEarlierUserId, 'Also_Replied_On_My_Comment');
						} else {
							targetUserToNotiCategoryMap.put(commentedEarlierUserId, 'Also_Replied_On_My_Post');
						}
					} else {
						if(String.isNotBlank(relatedContentId)) {
							targetUserToNotiCategoryMap.put(commentedEarlierUserId, 'Also_Replied_On_Comment');
						} else {
							targetUserToNotiCategoryMap.put(commentedEarlierUserId, 'Also_Replied_On_Post');
						}
					}
				}
				
				if(profileId.equalsIgnoreCase(postOwnerId)) {
					if('PollPost'.equalsIgnoreCase(feedItemList[0].Type)) {
						targetUserToNotiCategoryMap.put(profileId, 'Comments_On_My_Poll');
					} else if(String.isNotBlank(awardName)) {
						targetUserToNotiCategoryMap.put(profileId, 'Comments_On_My_Recognition');
					} else if(filesCount > 0 && String.isNotBlank(messageStr) && postedAFileStrings.contains(messageStr) ) {
						targetUserToNotiCategoryMap.put(profileId, 'Comments_On_My_Post_With_File');
					} else {
						targetUserToNotiCategoryMap.put(profileId, 'Comments_On_My_Post');
					}
				} else { 
					if(String.isNotBlank(relatedContentId)) {
						targetUserToNotiCategoryMap.put(postOwnerId, 'Comments_On_My_Content_Post');	
						
					} else if(profileId.subString(0,3).equalsIgnoreCase('005')){
						targetUserToNotiCategoryMap.put(profileId, 'Comments_On_Post_On_My_Profile');
						if('PollPost'.equalsIgnoreCase(feedItemList[0].Type)) {
							targetUserToNotiCategoryMap.put(postOwnerId, 'Comments_On_My_Poll');
						} else if(String.isNotBlank(awardName)) {
							targetUserToNotiCategoryMap.put(profileId, 'Comments_On_My_Recognition');
						} else if(filesCount > 0 && String.isNotBlank(messageStr) && postedAFileStrings.contains(messageStr) ) {
							targetUserToNotiCategoryMap.put(postOwnerId, 'Comments_On_My_Post_With_File');
						} else {
							targetUserToNotiCategoryMap.put(postOwnerId, 'Comments_On_My_Post');
						}
					} else {
						if('PollPost'.equalsIgnoreCase(feedItemList[0].Type)) {
							targetUserToNotiCategoryMap.put(postOwnerId, 'Comments_On_My_Poll');
						} else if(String.isNotBlank(awardName)) {
							targetUserToNotiCategoryMap.put(profileId, 'Comments_On_My_Recognition');
						} else if(filesCount > 0 && String.isNotBlank(messageStr) && postedAFileStrings.contains(messageStr) ) {
							targetUserToNotiCategoryMap.put(postOwnerId, 'Comments_On_My_Post_With_File');
						} else {
							targetUserToNotiCategoryMap.put(postOwnerId, 'Comments_On_My_Post');
						}
					}
				}
				for(String mentionedUserId : mentionedUserMap.keySet()) {
					targetUserToNotiCategoryMap.put(mentionedUserId, 'Mentions_Me_In_Reply');
				}	

				targetUserToNotiCategoryMap.remove(UserInfo.getUserId());
				
				Map<String, String> userIdToPeopleIdMap =new Map<String,String>();
				
				Map<String, Object> soqlParamMap2 = new  Map<String, Object>();
				soqlParamMap2.put('soqlParam1', consolidatedNotiRelatedUserSet);
				soqlParamMap2.put('soqlParam2', createdByUserId);
				String query = 'SELECT Id, User__c FROM People__c WHERE User__c IN :soqlParam1 OR User__c = :soqlParam2';
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.WITHOUT);
				List<People__c> peopleList = (List<People__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap2);
				
				for(People__c people: peopleList) {
					userIdToPeopleIdMap.put(people.user__c, people.id);
				}

				Map<String, NotificationDao.Notification> notificationObjMap = new Map<String, NotificationDao.Notification>();
				for(String targetUserId : targetUserToNotiCategoryMap.keySet()) {
					NotificationDao.Notification notificationObj = new NotificationDao.Notification();
					
					notificationObj.categoryStr = targetUserToNotiCategoryMap.get(targetUserId);
					if('Comments_On_My_Content_Post'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet	= simpplrContentList[0].Title__c;
					} else if('Comments_On_Post_On_My_Profile'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet = String.isNotBlank(replySnippet255Char) ? replySnippet255Char : '';
					} else if('Comments_On_My_Post'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet = String.isNotBlank(postSnippetStr) ? Utility.getPlainText(postSnippetStr, 255, true).unescapeHtml4() : '';
					} else if('Comments_On_My_RECOGNITION'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet = awardName;
					} else if('Comments_On_My_Poll'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet = String.isNotBlank(postSnippetStr) ? Utility.getPlainText(postSnippetStr, 255, true).unescapeHtml4() : '';
					} else if('Comments_On_My_Post_With_File'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet = String.isNotBlank(postSnippetStr) ? Utility.getPlainText(postSnippetStr, 255, true).unescapeHtml4() : '';
					} else if('Also_Replied_On_My_Comment'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet = (FeedDataAdapter.mapUserIdToPeople.containsKey(feedItemList[0].CreatedById) ? FeedDataAdapter.mapUserIdToPeople.get(feedItemList[0].CreatedById).Full_Name__c : feedItemList[0].createdby.name);
					} else if('Also_Replied_On_My_Post'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet = String.isNotBlank(postSnippetStr) ? Utility.getPlainText(postSnippetStr, 255, true).unescapeHtml4() : '';
					} else if('Also_Replied_On_Comment'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet = (FeedDataAdapter.mapUserIdToPeople.containsKey(feedItemList[0].CreatedById) ? FeedDataAdapter.mapUserIdToPeople.get(feedItemList[0].CreatedById).Full_Name__c : feedItemList[0].createdby.name);
					} else if('Also_Replied_On_Post'.equalsIgnoreCase(notificationObj.categoryStr)) {
						notificationObj.snippet = (FeedDataAdapter.mapUserIdToPeople.containsKey(feedItemList[0].CreatedById) ? FeedDataAdapter.mapUserIdToPeople.get(feedItemList[0].CreatedById).Full_Name__c : feedItemList[0].createdby.name);
					} else {
						notificationObj.snippet	= replySnippet255Char;
					}
					
					notificationObj.subType = 'Mentions_Me_In_Reply'.equalsIgnoreCase(notificationObj.categoryStr) ? SUB_TYPE_MENTION:SUB_TYPE_COMMENT;
					notificationObj.toUser = userIdToPeopleIdMap.get(targetUserId);
					notificationObj.type = TYPE_INFORMATION;
					notificationObj.status = NOTIFICATION_STATUS;
					notificationObj.contentId = relatedContentId;
					notificationObj.objectType = String.isNotBlank(relatedContentId) ? OBJECT_TYPE_CONTENT_FEEDCOMMENT : OBJECT_TYPE_FEEDCOMMENT;
					notificationObj.objectID = feedCommentList[0].Id;
					notificationObj.parentObjectID = feedCommentList[0].feedItemId;
					
					if(String.isNotBlank(parentSiteId)){
						notificationObj.siteId = parentSiteId;
					}

					if(createdByUserId != null) {
						notificationObj.fromUser = userIdToPeopleIdMap.get(createdByUserId);
					}

					notificationObjMap.put(targetUserId,notificationObj);
				}
				
				if( !(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled)) {
					brandingInfoMap.put('APP_CONTEXT', EmailUtility.getBrandingInfo4People(commentCreatedByPeopleObj));
				}
				
				Map<String, NotificationHelper.EmailWrapper> segmentIdAndEmailWrapperMap = NotificationHelper.createSegmentIdAndEmailWrapperMap(brandingInfoMap, feedItemList, feedObject, replySnippet, notificationMetaObj ,'page', simpplrContentList, 'Comment', currentComment, isUpdatingPlaceholderFeed);
				
				if(SimpplrContext.enableEmail) {
					mapOfSegmentIdAndBody = getFinalCommentEmailBody(segmentIdAndEmailWrapperMap, brandingInfoMap, commentFeedItemId, totalComments, simpplrContentList, commentOwnerIdToExtPhotoUrlMap,userIdToLanguageLocaleKeyMap,null,false);
				}

				Map<String, Integer> localisationCountsMap = new Map<String, Integer>();
				localisationCountsMap.put('commentsCount', totalComments);
				localisationCountsMap.put('filesCount', filesCount);

				if((targetUserToEmailSubjectMap.size() + notificationObjMap.size())> 50){
					BatchCheckAccessAndSendNotification batchToSendEmail = new BatchCheckAccessAndSendNotification(feedObject,simpplrContentList,notificationObjMap,targetUserToEmailSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, false, localisationCountsMap);
					Database.executeBatch(batchToSendEmail, 50);										
				} 
				else{
					checkAccessAndSendEmail(feedObject,simpplrContentList,notificationObjMap,targetUserToEmailSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, false, localisationCountsMap);	
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send FeedCommentNotificationsAndEmail email',e);
		}
		
	}
	
	public static void sendFeedCommentNotificationsAndEmailOnUpdate(Id commentId, Set<String>targetMentionUserIdSet) {
		try {
			List<FeedComment> feedCommentList = [select Id, FeedItemId, createdById,createdBy.Name, createdDate, parentId, CommentType, CommentBody, RelatedRecordId from feedcomment where Id =: commentId];
			String body = '';
			String commentParentId = feedCommentList[0].parentId;
			String replySnippet = '';
			Map<String, String> mapOfSegmentIdAndBody = new Map<String, String>();
			
			List<FeedItem> feedItemList = new List<FeedItem>();
			String commentFeedItemId = feedCommentList[0].feedItemId;
			String queryForFeedItem  = 'select id, parentId,Parent.type,parent.name, createdById,createdBy.Name, createdDate, type, (select createdById, createdBy.Name from FeedComments order by createdDate desc),(select createdById, createdBy.Name from FeedLikes order by createdDate desc) from feedItem where id=:commentFeedItemId'; 
			if(SimpplrContext.isCommunitiesEnabled){
				queryForFeedItem=queryForFeedItem+' AND (NetworkScope = null OR NetworkScope = \'AllNetworks\')';
			}
			feedItemList = Database.query(queryForFeedItem);
			for(FeedItem feedItemObj : feedItemList) {
				FeedDataAdapter.addUserIdsToConvert(feedItemObj.parentId);
				FeedDataAdapter.addUserIdsToConvert(feedItemObj.createdById);
				for(FeedComment fcObj : feedItemObj.FeedComments) {
					FeedDataAdapter.addUserIdsToConvert(fcObj.createdById);
				}
				for(FeedLike flObj : feedItemObj.FeedLikes) {
					FeedDataAdapter.addUserIdsToConvert(flObj.createdById);
				}
			}
			FeedDataAdapter.getPeopleFromUserIds();
			List<Simpplr_Content__c> simpplrContentList = new List<Simpplr_Content__c>();
			
			String parentSiteId;
			Boolean isNotificationAllowed = true;
			String relatedContentId;
			
			if(feedItemList[0].type.equalsIgnorecase('TrackedChange')) {
				isNotificationAllowed = false;

			}else if(feedItemList[0].type.equalsIgnorecase('CollaborationGroupCreated')) {
				isNotificationAllowed = false;

			} else if(commentParentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix)) {
				simpplrContentList = [select id,Name, title__c, type__c, Primary_Author__c, Primary_Author__r.Full_Name__c, Site__r.Chatter_Group_Id__c, Site__r.Show_In_Simpplr__c, Site__c from simpplr_content__c where id=:commentParentId];
				
				if(!simpplrContentList.isEmpty() && String.isNotBlank(simpplrContentList[0].Site__c)){
					parentSiteId = simpplrContentList[0].Site__c;
					isNotificationAllowed = simpplrContentList[0].Site__r.Show_In_Simpplr__c;
					relatedContentId = simpplrContentList[0].Id;
				}
			} else if('0F9'.equals(commentParentId.subString(0,3))) {
				Simpplr_Site__c siteObj = getParentSiteObj(commentParentId);
				parentSiteId = siteObj.Id;
				isNotificationAllowed = siteObj.Show_In_Simpplr__c;
			}
			
			if(isNotificationAllowed) {
				Integer commentIndex = 0;
				Map<String,String> commentedEarlierMap = new Map<String,String>();
				List<String> lastThreeCommentsOwnerId = new List<String>();
				for(FeedComment feedCommentObj:feedItemList[0].feedComments) {
					String commentOwner = feedCommentObj.createdById;
					if(commentIndex < 3 && commentIndex !=0) {
						lastThreeCommentsOwnerId.add(commentOwner);
					}
					if(commentIndex>0){
						commentedEarlierMap.put(commentOwner, (FeedDataAdapter.mapUserIdToPeople.containsKey(feedCommentObj.createdById) ? FeedDataAdapter.mapUserIdToPeople.get(feedCommentObj.createdById).Full_Name__c : feedCommentObj.createdBy.Name));
					}
					
					commentIndex = commentIndex +1;
				}
				
				Map<String,People__c> peopleMap = new Map<String,People__c>([select id ,User__c, External_Photo_URL__c, External_Photo_URL_Expiry_Date__c from People__c where (User__c IN: lastThreeCommentsOwnerId or User__c =:feedItemList[0].createdById or User__c =:feedCommentList[0].createdById) and (External_Photo_URL_Expiry_Date__c >=: DateTime.now() or External_Photo_URL__c = null)]);
				
				Map<String, String> commentOwnerIdToExtPhotoUrlMap = new Map<String,String>();
				for(People__c peopleObj : peopleMap.values()){
					if(peopleObj.External_Photo_URL_Expiry_Date__c != null && peopleObj.External_Photo_URL_Expiry_Date__c > DateTime.now()) {
						commentOwnerIdToExtPhotoUrlMap.put(peopleObj.User__c, peopleObj.External_Photo_URL__c);	
					}
				}
				
				ConnectApi.FeedElement feedObject = NotificationHelper.getFeedElementObjectWithSortedComments(feedItemList[0]);
				if(SimpplrContext.isFeatureEnabled('Full_External_Search')) {
					FeedDataAdapter.getUserIdsToConvert(feedObject);
					FeedDataAdapter.getPeopleFromUserIds();
				}
				NotificationHelper.NotificationMetadata notificationMetaObj = NotificationHelper.getNotificationInfo(feedItemList[0], feedObject);
				String postSnippetStr = String.isNotBlank(notificationMetaObj.snippet) ? (notificationMetaObj.snippet).substringBefore(ServiceConstants.FEED_EXT_FILE_SEPRATOR).trim() : '';
				
				String messageStr = '';
				ConnectApi.Comment currentComment = null;
				List<ConnectApi.Comment> commentLst = feedObject.capabilities.comments.page.items;
				for(ConnectApi.Comment feedCommentObj : commentLst){
					if(feedCommentObj.id == feedCommentList[0].id){
						messageStr = feedCommentObj.body.text;
						currentComment = feedCommentObj;
					}
				}

				NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(null);
				List<NotificationHelper.EmailWrapper> emailWrapperList = NotificationHelper.createEmailWrapperObjectList(feedItemList, feedObject, notificationMetaObj , 'page',simpplrContentList, brandingInfo, 'Comment', currentComment, false);
				NotificationHelper.EmailWrapper emailWrapperObj = emailWrapperList[0];
				
				Integer filesCount = getFilesCountForComment(currentComment);

				if('TextComment'.equalsIgnoreCase(feedCommentList[0].CommentType) || ('ContentComment'.equalsIgnoreCase(feedCommentList[0].CommentType) && String.isNotBlank(feedCommentList[0].commentBody))){
					replySnippet = Utility.getPlainText(messageStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4();
				}

				Integer totalComments = feedItemList[0].feedComments.size();
				Integer index = 0;
				NotificationHelper.EmailCommentWrapper emailCommentWrapperObj = emailWrapperObj.commentList[emailWrapperObj.commentList.size()-1];
				NotificationHelper.NotificationMetadata commentNotiMetaObj = emailCommentWrapperObj.notificationMetadata;
				
				Map<String,String> postLikeduserMap = new Map<String,String>();
				for(FeedLike likeObj : feedItemList[0].FeedLikes){
					postLikeduserMap.put(likeObj.createdbyid, (FeedDataAdapter.mapUserIdToPeople.containsKey(likeObj.createdbyId) ? FeedDataAdapter.mapUserIdToPeople.get(likeObj.createdbyId).Full_Name__c : likeObj.createdby.name));
				}
				Map<String,String> mentionedUserMap = commentNotiMetaObj.mentionedUserMap!=null?commentNotiMetaObj.mentionedUserMap:new Map<String,String>();
				Map<String,String> profileIdMap = commentNotiMetaObj.profileIdMap!=null?commentNotiMetaObj.profileIdMap:new Map<String,String>();
				Map<String,String> postOwnerMap = commentNotiMetaObj.postOwnerMap!=null?commentNotiMetaObj.postOwnerMap:new Map<String,String>();
				
				Set<String> consolidatedNotiRelatedUserSet = new Set<String>();
				
				if(!mentionedUserMap.isEmpty()) {
					consolidatedNotiRelatedUserSet.addAll(mentionedUserMap.keySet());
				}
				if(!postLikeduserMap.isEmpty()) {
					consolidatedNotiRelatedUserSet.addAll(postLikeduserMap.keySet());
				}
				if(!commentedEarlierMap.isEmpty()) {
					consolidatedNotiRelatedUserSet.addAll(commentedEarlierMap.keySet());
				}
				if(commentParentId.subString(0,3).equalsIgnoreCase('005')){
					consolidatedNotiRelatedUserSet.addAll(profileIdMap.keySet());
				}
				consolidatedNotiRelatedUserSet.addAll(postOwnerMap.keySet());

				Set<String> contentNotiSettingEnabledUserIds = new Set<String>();
				if(!simpplrContentList.isEmpty() && String.isNotBlank(simpplrContentList[0].Site__c)){
					contentNotiSettingEnabledUserIds =  NotificationDao.getUserIdsWithContentNotificationsEnabled(simpplrContentList[0].Id);
					contentNotiSettingEnabledUserIds.removeAll(consolidatedNotiRelatedUserSet);
				}
				consolidatedNotiRelatedUserSet.addAll(contentNotiSettingEnabledUserIds);
				
				consolidatedNotiRelatedUserSet.add(UserInfo.getUserId());
				
				Map<String,NotificationHelper.NotificationMetadata> targetUserToEmailSubjectMap = new Map<String,NotificationHelper.NotificationMetadata>();
				List<People_Preference__c> peoplePrefList = new List<People_Preference__c>();
				if(consolidatedNotiRelatedUserSet.size() > 0){
					Map<String, Object> soqlParamMap = new  Map<String, Object>();
					soqlParamMap.put('soqlParam1', consolidatedNotiRelatedUserSet);
					String query = '';
					
					if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
						soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
						query = 'SELECT Id,people__r.user__c, people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, '
									+ ' Email_Posts_To_Me__c, People__c, User__r.timeZonesidkey, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey '
									+ ' FROM People_Preference__c Where  Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__r.User__c IN : soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
					} else {
						query = 'SELECT Id,people__r.user__c, people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, '
									+ ' Email_Posts_To_Me__c, People__c, User__r.timeZonesidkey, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey ' 
									+ ' FROM People_Preference__c Where  Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and  people__r.User__c IN : soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
					}
					SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
					peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
					targetUserToEmailSubjectMap = getTargetUserToEmailSubjectMapForFeedComment(emailCommentWrapperObj.notificationMetadata, 
																	contentNotiSettingEnabledUserIds, profileIdMap, postOwnerMap,
																	mentionedUserMap, postLikeduserMap, commentedEarlierMap, simpplrContentList,peoplePrefList, 
																	filesCount, postSnippetStr, replySnippet, (FeedDataAdapter.mapUserIdToPeople.containsKey(feedItemList[0].createdbyId) ? FeedDataAdapter.mapUserIdToPeople.get(feedItemList[0].createdbyId).Full_Name__c : feedItemList[0].createdby.name));
				}

				Map<String, NotificationHelper.BrandingInfo> brandingInfoMap = new Map<String, NotificationHelper.BrandingInfo>();
				Map<String, People_Preference__c> peoplePreferMap = new Map<String, People_Preference__c>();
				Map<String, String> userIdToLanguageLocaleKeyMap =new Map<String,String>();
				for(People_Preference__c peoplePreferObj : peoplePrefList){
					peoplePreferMap.put(peoplePreferObj.people__r.user__c, peoplePreferObj);
					userIdToLanguageLocaleKeyMap.put(peoplePreferObj.people__r.user__c, peoplePreferObj.user__r.languagelocalekey);
					if(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled) {
						if(brandingInfoMap.containsKey(peoplePreferObj.People__r.Segment__r.Id) == false) {
							brandingInfoMap.put(peoplePreferObj.People__r.Segment__r.Id, EmailUtility.getBrandingInfo4People(peoplePreferObj.People__r));
						}
					}
				}
				
				Map<String, String> userIdToPeopleIdMap =new Map<String,String>();
				
				List<People__c> peopleList = [select id, user__c from people__c where user__c IN:mentionedUserMap.keySet()];
				for(People__c people: peopleList) {
					userIdToPeopleIdMap.put(people.user__c, people.id);
				}
				
				Map<String, NotificationDao.Notification> notificationObjMap = new Map<String, NotificationDao.Notification>();
				
				mentionedUserMap.remove(UserInfo.getUserId());
				
				for(String targetUserId : mentionedUserMap.keySet()) {
						NotificationDao.Notification notificationObj = new NotificationDao.Notification();
						notificationObj.subType = SUB_TYPE_MENTION;
						notificationObj.toUser = userIdToPeopleIdMap.get(targetUserId);
						notificationObj.categoryStr = 'Mentions_Me_In_Reply';
						notificationObj.snippet = replySnippet;
						notificationObj.type = TYPE_INFORMATION;
						notificationObj.status = NOTIFICATION_STATUS;
						notificationObj.contentId = relatedContentId;
						notificationObj.objectType = String.isNotBlank(relatedContentId) ? OBJECT_TYPE_CONTENT_FEEDCOMMENT : OBJECT_TYPE_FEEDCOMMENT;
						notificationObj.objectID = feedCommentList[0].Id;
						notificationObj.parentObjectID = feedCommentList[0].feedItemId;
						
						if(String.isNotBlank(parentSiteId)){
							notificationObj.siteId = parentSiteId;
						}
						notificationObjMap.put(targetUserId,notificationObj);
				}
				
				if( !(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled)) {
					brandingInfoMap.put('APP_CONTEXT', EmailUtility.getBrandingInfo4People(null));
				}
				
				Map<String, NotificationHelper.EmailWrapper> segmentIdAndEmailWrapperMap = NotificationHelper.createSegmentIdAndEmailWrapperMap(brandingInfoMap, feedItemList, feedObject, replySnippet, notificationMetaObj ,'page', simpplrContentList, 'Comment', currentComment, false);
				
				if(SimpplrContext.enableEmail) {
					mapOfSegmentIdAndBody = getFinalCommentEmailBody(segmentIdAndEmailWrapperMap, brandingInfoMap, commentFeedItemId, totalComments, simpplrContentList, commentOwnerIdToExtPhotoUrlMap,userIdToLanguageLocaleKeyMap,null,false);
				}

				Map<String, Integer> localisationCountsMap = new Map<String, Integer>();
				localisationCountsMap.put('commentsCount', totalComments);
				
				localisationCountsMap.put('filesCount', filesCount);
				
				if((targetUserToEmailSubjectMap.size() + notificationObjMap.size())> 50){
					BatchCheckAccessAndSendNotification batchToSendEmail = new BatchCheckAccessAndSendNotification(feedObject,simpplrContentList,notificationObjMap,targetUserToEmailSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, false, localisationCountsMap);
					Database.executeBatch(batchToSendEmail, 50);										
				} 
				else{
					checkAccessAndSendEmail(feedObject,simpplrContentList,notificationObjMap,targetUserToEmailSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, false, localisationCountsMap);	
				}
			}
			
		} catch(Exception e){
			logger.logError('Unable to send FeedCommentNotificationsAndEmail email',e);
		}
		
	}
	
	@testVisible 
	private static Map<String,NotificationHelper.NotificationMetadata> getTargetUserToEmailSubjectMapForFeedComment(NotificationHelper.NotificationMetadata notiMetadata, 
																	Set<String> contentNotiSettingEnabledUserIds,
																	Map<String,String> profileIdMap, Map<String,String> postOwnerMap, 
																	Map<String,String> commentMentionedUserMap, Map<String,String> postLikeduserMap, 
																	Map<String,String> userCommentedEarlierMap, List<Simpplr_Content__c> simpplrContentList, List<People_Preference__c> peoplePrefList, 
																	Integer filesCount, String postSnippetStr, String replySnippet, String postOwnerName){
		initLangKeyValueMap(peoplePrefList);

		Map<String,NotificationHelper.NotificationMetadata> userToNotiTypeMap = new Map<String,NotificationHelper.NotificationMetadata>();
		Set<String> mentionUsers = new Set<String>();
		mentionUsers = commentMentionedUserMap.keySet();
		
		Set<String> likedUsers = new Set<String>();
		likedUsers = postLikeduserMap.keySet();
		Set<String> commentAfterUsers = new Set<String>();
		commentAfterUsers = userCommentedEarlierMap.keySet();
		String profileId = (new List<String>(profileIdMap.keySet()))[0];
		String postOwnerId = (new List<String>(postOwnerMap.keySet()))[0];
		Map<String,People_Preference__c> userIdToPreferenceMap = new Map<String,People_Preference__c>();
		for(People_Preference__c pref : peoplePrefList) {
			userIdToPreferenceMap.put(pref.people__r.User__c, pref);
		}


		postSnippetStr = String.isNotBlank(postSnippetStr) && postSnippetStr.indexOf(ServiceConstants.RECOGNITION_FILE_SEPRATOR) >= 0 ? '' : postSnippetStr; 
		replySnippet = String.isNotBlank(replySnippet) ? replySnippet.substringBefore(ServiceConstants.FEED_EXT_FILE_SEPRATOR) : ''; 

		String userLanguage;

		if(simpplrContentList != null && simpplrContentList.size() > 0) {
			String KEY_CONTENT_COMMENT = null;

			for(String nSEUserId : contentNotiSettingEnabledUserIds) {
				NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
				String subject = '';
				String heading = '';
				if(userIdToPreferenceMap.get(nSEUserId)!=null){	
					userLanguage = Utility.getSimpplrLanguageLocaleKey(userIdToPreferenceMap.get(nSEUserId).User__r.languagelocalekey);
					
					Simpplr_Content__c contentObj = simpplrContentList[0];

					String contentType =  (contentObj.Type__c).toLowerCase();

					if('album'.equalsIgnoreCase(contentType)) {
						KEY_CONTENT_COMMENT = 'email.notification.content.manage.album.comment';
					} else if('blogpost'.equalsIgnoreCase(contentType)) {
						KEY_CONTENT_COMMENT = 'email.notification.content.manage.blog_post.comment';
					} else if('event'.equalsIgnoreCase(contentType)) {
						KEY_CONTENT_COMMENT = 'email.notification.content.manage.event.comment';
					} else if('page'.equalsIgnoreCase(contentType)) {
						KEY_CONTENT_COMMENT = 'email.notification.content.manage.page.comment';
					}

					notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_COMMENT + KEY_SUBJECT)
										.replace('{{fullName}}', UserContext.getCurrentUserInfo.Full_Name__c)
										.replace('{{contentType}}', contentType)
										.replace('{{contentType, lowercase}}', contentType)
										.replace('{{contentTitle}}', Utility.chompString(contentObj.Title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH));
				
					notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_CONTENT_COMMENT + KEY_INTRO)
										.replace('{{fullName}}', UserContext.getCurrentUserInfo.Full_Name__c)
										.replace('{{contentType}}', contentType)
										.replace('{{contentType, lowercase}}', contentType);

					notiMetaObj.prefSettingType = 'REPLIES AFTER ME';
					userToNotiTypeMap.put(nSEUserId, notiMetaObj);
				}
			}
		}

		for(String likedUserId : likedUsers) {
			String subject = '';
			String heading = '';
			NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
			if(userIdToPreferenceMap.get(likedUserId)!=null){	
				userLanguage = Utility.getSimpplrLanguageLocaleKey(userIdToPreferenceMap.get(likedUserId).User__r.languagelocalekey);
				if(userIdToPreferenceMap.get(likedUserId).Email_Comments_On_Post_I_Like__c){
					if(profileId.subString(0,3).equalsIgnoreCase(contentKeyPrefix) && !notiMetadata.type.equalsIgnorecase('TrackedChange')){
						if(String.isBlank(replySnippet)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_POST_LIKE + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_POST_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{replySnippet}}', replySnippet);
						}
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_POST_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					}else{
						if(String.isBlank(replySnippet)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_POST_LIKE + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_POST_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{replySnippet}}', replySnippet);
						}
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLY_POST_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					}
					notiMetaObj.prefSettingType = 'REPLIES ON POSTS I LIKE';
					userToNotiTypeMap.put(likedUserId, notiMetaObj);
				}
			}
		}

		for(String commentedEarlierUserId : commentAfterUsers) {
			NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
			String subject = '';
			String heading = '';
			if(userIdToPreferenceMap.get(commentedEarlierUserId)!=null){	
				if(userIdToPreferenceMap.get(commentedEarlierUserId).Email_Comments_After_Me__c){
					userLanguage = Utility.getSimpplrLanguageLocaleKey(userIdToPreferenceMap.get(commentedEarlierUserId).User__r.languagelocalekey);
					 
					if(simpplrContentList != null && simpplrContentList.size() > 0) {
						String contentTitle = Utility.getPlainText(simpplrContentList[0].Title__c, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4();

						if(loggedInUserInfo.Full_Name__c.equalsIgnoreCase(postOwnerName)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_COMMENT_REPLIED_AFTER_OWN + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{commentAuthorUsername}}', postOwnerName)
													.replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_COMMENT_REPLIED_AFTER_OWN + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{commentAuthorUsername}}', postOwnerName);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_COMMENT_REPLIED_AFTER + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{commentAuthorUsername}}', postOwnerName)
													.replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_COMMENT_REPLIED_AFTER + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{commentAuthorUsername}}', postOwnerName);
						}
					} else {
						if(loggedInUserInfo.Full_Name__c.equalsIgnoreCase(postOwnerName)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLIED_AFTER_OWN + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{commentAuthorUsername}}', postOwnerName)
													.replace('{{postSnippet}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLIED_AFTER_OWN + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{commentAuthorUsername}}', postOwnerName);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLIED_AFTER + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{commentAuthorUsername}}', postOwnerName)
													.replace('{{postSnippet}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_REPLIED_AFTER + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{commentAuthorUsername}}', postOwnerName);
						}
					}
					notiMetaObj.prefSettingType = 'REPLIES AFTER ME';
					userToNotiTypeMap.put(commentedEarlierUserId, notiMetaObj);
				}
			}
		}

		if(profileId.equalsIgnoreCase(postOwnerId)) {
			if(userIdToPreferenceMap.get(profileId)!=null){
				if(userIdToPreferenceMap.get(profileId).Email_Comments_On_My_Post__c){
					NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
					userLanguage = Utility.getSimpplrLanguageLocaleKey(userIdToPreferenceMap.get(profileId).User__r.languagelocalekey);
					if(filesCount > 0 && (String.isBlank(replySnippet) || '"'.equalsIgnoreCase(replySnippet))){ // reply with file but no text
						notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FILE_POST_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FILE_POST_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					} else if(notiMetadata.isRecognition){
						notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_RECOGNITION + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_RECOGNITION + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					} else {
						if(notiMetadata.type.equalsIgnoreCase('PollPost')) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POLL_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postTitle}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POLL_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							if(String.isBlank(postSnippetStr)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
							}
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						}
					}
					notiMetaObj.prefSettingType = 'REPLIES ON POSTS I MADE';
					userToNotiTypeMap.put(profileId,notiMetaObj);
				}
			}
		} else {
			if(profileId.subString(0,3).equalsIgnoreCase('005')){
				if(userIdToPreferenceMap.get(profileId)!=null){
					userLanguage = Utility.getSimpplrLanguageLocaleKey(userIdToPreferenceMap.get(profileId).User__r.languagelocalekey);
					if(userIdToPreferenceMap.get(profileId).Email_Comments_On_My_Post__c){
						NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
						if(String.isBlank(postSnippetStr)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_SHARED_WITH_YOU_NO_TEXT_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_SHARED_WITH_YOU_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
						}
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POST_SHARED_WITH_YOU_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						notiMetaObj.prefSettingType = 'REPLIES ON POSTS I MADE';
						userToNotiTypeMap.put(profileId, notiMetaObj);
					}
				}
				if(userIdToPreferenceMap.get(postOwnerId)!=null){
					if(userIdToPreferenceMap.get(postOwnerId).Email_Comments_On_My_Post__c){
						userLanguage = Utility.getSimpplrLanguageLocaleKey(userIdToPreferenceMap.get(postOwnerId).User__r.languagelocalekey);
						NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
						if(notiMetadata.type.equalsIgnoreCase('PollPost')) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POLL_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postTitle}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POLL_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if(notiMetadata.isRecognition){
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_RECOGNITION + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_RECOGNITION + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							if(filesCount > 0 && (String.isBlank(replySnippet) || '"'.equalsIgnoreCase(replySnippet))) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FILE_POST_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FILE_POST_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else {
								if(String.isBlank(postSnippetStr)) {
									notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
								} else {
									notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
								}
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							}
						}

						notiMetaObj.prefSettingType = 'REPLIES ON POSTS I MADE';
						userToNotiTypeMap.put(postOwnerId,notiMetaObj);
					}
				}
			} else if('0F9'.equals(profileId.subString(0,3))) {
				if(userIdToPreferenceMap.get(postOwnerId)!=null){
					if(userIdToPreferenceMap.get(postOwnerId).Email_Comments_On_My_Post__c){
						NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
						userLanguage = Utility.getSimpplrLanguageLocaleKey(userIdToPreferenceMap.get(postOwnerId).User__r.languagelocalekey);
						if(notiMetadata.type.equalsIgnoreCase('PollPost')) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POLL_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postTitle}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POLL_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if(notiMetadata.isRecognition){
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_RECOGNITION + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_RECOGNITION + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							if(String.isBlank(postSnippetStr)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', Utility.getPlainText(postSnippetStr, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4());
							}
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POST_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						}
						notiMetaObj.prefSettingType = 'REPLIES ON POSTS I MADE';
						userToNotiTypeMap.put(postOwnerId,notiMetaObj);
					}
				}
			} else if(profileId.subString(0,3).equalsIgnoreCase(contentKeyPrefix)) {

				String contentTitle = '';
				if(simpplrContentList != null && simpplrContentList.size() > 0) {
					contentTitle = Utility.getPlainText(simpplrContentList[0].Title__c, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH, true).unescapeHtml4();
				}

				if(userIdToPreferenceMap.get(postOwnerId)!=null){
					if(userIdToPreferenceMap.get(postOwnerId).Email_Comments_On_My_Post__c){
						NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
						userLanguage = Utility.getSimpplrLanguageLocaleKey(userIdToPreferenceMap.get(postOwnerId).User__r.languagelocalekey);
						
						notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_COMMENT_REPLY + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_COMMENT_REPLY + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);

						notiMetaObj.prefSettingType = 'REPLIES ON POSTS I MADE';
						userToNotiTypeMap.put(postOwnerId, notiMetaObj);
					}
				}
			}
		}
			

		for(String mentionedUserId : mentionUsers) {
			if(userIdToPreferenceMap.get(mentionedUserId)!=null ){	
				if(userIdToPreferenceMap.get(mentionedUserId).Email_Posts_To_Me__c){
					NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();					
					userLanguage = Utility.getSimpplrLanguageLocaleKey(userIdToPreferenceMap.get(mentionedUserId).User__r.languagelocalekey);

					notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_MENTION + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					notiMetaObj.subject = (notiMetaObj.subject).replace('{{mentionSnippet}}', replySnippet);
					
					notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_MENTION + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);

					notiMetaObj.prefSettingType = 'MENTIONS ME IN REPLY';
					userToNotiTypeMap.put(mentionedUserId, notiMetaObj);
				}
			}
		}

		NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata();
		notiMetaObj.subject = 'UNKNOWN';
		notiMetaObj.prefSettingType = 'Not Applicable';
		userToNotiTypeMap.put(UserContext.Id, notiMetaObj);	
		return userToNotiTypeMap;
	}
	
	
	public static void sendEmailForOnholdNewsletter(String targetUserId,String newsletterTitle,String newsletterId,String reasonToSendMail) {
		try {
			List<People_Preference__c> peoplePrefList;
			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', targetUserId);
			String query = '';
			
			if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
				soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
				query = 'Select id, people__c, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, people__r.user__r.username, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey,User__r.timeZonesidkey From People_Preference__c where  Allow_Simpplr_Emails__c=true AND people__c=: soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
			} else {
				query = 'Select id, people__c, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, people__r.user__r.username, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey,User__r.timeZonesidkey From People_Preference__c where Allow_Simpplr_Emails__c=true AND people__c=: soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
			}
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
			initLangKeyValueMap(peoplePrefList);
			if(!peoplePrefList.isEmpty()) {
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				
				String localeKey = Utility.getSimpplrLanguageLocaleKey(peoplePrefList[0].User__r.languagelocalekey);
				String subject = LocaleContext.getLabel(localeKey,KEY_FAILED_NEWSLETTER + KEY_SUBJECT);

				People__c peopleObj = (People__c)peoplePrefList[0].People__r;

				NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
				
				String emailBody = getOnholdNewsletterHTMLEmailBody(peoplePrefList[0], newsletterTitle, newsletterId,reasonToSendMail,localeKey ,peoplePrefList[0].User__r.timeZonesidkey, brandingInfo);
				emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody, peoplePrefList[0].people__r.user__c, SimpplrContext.SEDFromEmail));

				if(!emailObjList.isEmpty()) {
					sendEmails(emailObjList);
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send EmailForOnHoldNewsletters',e);
		}
	}
	
	public static void sendEmailForFollow(String targetUserId) {
		try {
			List<People_Preference__c> peoplePreList;
			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', targetUserId);
			String query = '';
					
			if (String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
				soqlParamMap.put('soqlParam2', SimpplrContext.packageName);	
				query = 'SELECT id, people__r.user__c, people__r.user__r.username, People__r.First_Name__c, ' 
							+ ' People__r.Last_Name__c, People__r.About__c, Email_Follows_Me__c, People__r.Segment__r.Id, ' 
							+ ' People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, ' 
							+ ' User__r.languagelocalekey,User__r.TimezoneSIDKey '
							+ ' FROM People_Preference__c '
							+ ' WHERE Allow_Simpplr_Emails__c = true ' 
							+ ' and Email_Notification_Digest_Frequency__c=\'Immediate\' and '  
							+ ' people__r.user__c=: soqlParam1 and people__r.User__r.IsActive=true and '
							+ ' people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from ' 
							+ ' UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
			
			} else {
				query = 'SELECT id,people__r.user__c, ' 
							+ ' people__r.user__r.username, People__r.First_Name__c, ' 
							+ ' People__r.Last_Name__c, People__r.About__c, ' 
							+ ' Email_Follows_Me__c, People__r.Segment__r.Id, ' 
							+ ' People__r.Segment__r.Branding_JSON__c, '
							+ ' People__r.Segment__r.Branding_Logo__c, '
							+ ' User__r.languagelocalekey,User__r.TimezoneSIDKey ' 
							+ ' FROM People_Preference__c ' 
							+ ' WHERE Allow_Simpplr_Emails__c = true and ' 
							+ ' Email_Notification_Digest_Frequency__c=\'Immediate\' and '  
							+ ' people__r.user__c=: soqlParam1 and ' 
							+ ' people__r.User__r.IsActive=true and ' 
							+ ' people__r.User__r.UserType=\'Standard\'';
			}
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
			if (!peoplePreList.isEmpty()) {
				
				if (peoplePreList[0].Email_Follows_Me__c) {
					initLangKeyValueMap(peoplePreList);

					NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)peoplePreList[0].People__r);
					
					List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
					String subject = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey),KEY_FOLLOW_SUBJECT).replace('{{fullName}}',loggedInUserInfo.Full_Name__c);
					List<EntitySubscription> entitySubObj = [SELECT id 
							FROM EntitySubscription 
							WHERE parentId=:UserContext.id and subscriberId=:targetUserId and 
							isDeleted=false limit 1];
					Boolean isUserAlreadyFollowed = false;
					
					if (!entitySubObj.isEmpty()) {
						isUserAlreadyFollowed = true;
					} 
					
					String emailBody = getFollowHTMLEmailBody(peoplePreList[0], 
							isUserAlreadyFollowed);
					emailObjList.add(EmailUtility.getSingleEmailElement(subject, 
							emailBody, targetUserId, SimpplrContext.SEDFromEmail));
					
					if (!emailObjList.isEmpty()) {
						sendEmails(emailObjList);
					}

				}

			}

		} catch (Exception e) {
			logger.logError('Unable to send EmailForFollow email',e);
		}

	}
	
	@testVisible 
	private static String getOnholdNewsletterHTMLEmailBody(People_Preference__c peoplePrefObj, String newsletterTitle,String newsletterId,String reasonToSendMail, String localeKey,String timeZonesidkey, NotificationHelper.BrandingInfo brandingInfo){
		List<String> formatterList = new List<String>();
		String viewURL = PageContext.getPageURL(Pages.app)+'?u=/newsletter/'+newsletterId+'/review';
		formatterList.add(LocaleContext.getLabel(localeKey,KEY_FAILED_NEWSLETTER + KEY_INTRO));
		formatterList.add(LocaleContext.getLabel(localeKey,KEY_FAILED_NEWSLETTER + KEY_BODY).replace('{{newsletterName}}',newsletterTitle));
		
		formatterList.add(viewURL);
		formatterList.add(brandingInfo.general_primaryColor);
		formatterList.add(LocaleContext.getLabel(localeKey,KEY_EMAIL_COMMON_VIEW_BUTTON));

		String emailBodyTableOnholdNL = EmailTemplateService.templatePartMap.get('emailBodyTableForNL');
		emailBodyTableOnholdNL = EmailUtility.format(emailBodyTableOnholdNL, formatterList);
		formatterList.clear();

		return getEmailTemplateWithNewHeaderFooterWithNoSettings(peoplePrefObj, emailBodyTableOnholdNL, brandingInfo);
	}
	
	@testVisible 
	private static String getFollowHTMLEmailBody(People_Preference__c peoplePrefObj, 
			Boolean isUserAlreadyFollowed){
		NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c) peoplePrefObj.People__r);
		List<String> formatterList = new List<String>();
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
		String languagelocalekey = Utility.getSimpplrLanguageLocaleKey(peoplePrefObj.User__r.languagelocalekey);
		String alreadyFollowedTable = '';
		
		if (isUserAlreadyFollowed) {
			alreadyFollowedTable = EmailTemplateService.templatePartMap.get('alreadyFollowedTable');
			formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_ALREADY_FOLLOWING).replace('{{fullName}}',loggedInUserInfo.Full_Name__c));
			alreadyFollowedTable = EmailUtility.format(alreadyFollowedTable,formatterList);
		}
		
		formatterList.clear();

		if (String.isNotBlank(peoplePrefObj.People__r.First_Name__c)) {
			formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}',peoplePrefObj.People__r.First_Name__c));
		
		} else {
			formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}',peoplePrefObj.People__r.Last_Name__c));
		}

		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_FOLLOW_INTRO).replace('{{fullName}}',UserContext.getCurrentUserInfo.Full_Name__c.escapeHtml4()));
		formatterList.add(alreadyFollowedTable);
		formatterList.add(profileDisplayIcon);
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c.escapeHtml4());
		
		if (String.isNotBlank(UserContext.getCurrentUserInfo.About__c)) {
			formatterList.add(String.format('<table style="-ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; width: 100%;"><tr><td class="Post-body" style="-ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; border-collapse: collapse; color: #333; font-family:\'Helvetica Neue\',Helvetica,Arial,sans-serif; font-size: 14px; mso-table-lspace: 0pt; mso-table-rspace: 0pt; text-align: left; vertical-align: top;"><p style="-ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; font-family: \'Helvetica Neue\',Helvetica,Arial,sans-serif; font-size: 14px; font-weight: normal; margin: 0; margin-bottom: 15px;">{0}</p></td> </tr> </table>',new String[] {(UserContext.getCurrentUserInfo.About__c).escapeHtml4()}));
		
		} else {
			formatterList.add('');
		}

		formatterList.add(baseUrl + Page.PageRedirector.getUrl() + '?userId=' + UserContext.id +'&profileId=' + UserContext.peopleId +'&pageToRedirect='+Pages.ProfileAbout+'&origin=ne&notificationType=follow');
		formatterList.add(brandingInfo.general_primaryColor);
		/*view button*/formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_EMAIL_COMMON_VIEW_BUTTON));
		formatterList.add(brandingInfo.general_primaryColor);
		
		String emailBodyTableFollow = EmailTemplateService.templatePartMap.get('emailBodyTableFollow');
		emailBodyTableFollow = EmailUtility.format(emailBodyTableFollow, formatterList);
		formatterList.clear();
		return getEmailTemplateWithNewHeaderFooter(peoplePrefObj, emailBodyTableFollow, brandingInfo);
	}
	
	@testVisible
	private static string getEmailTemplateWithNewHeaderFooter(People_Preference__c peoplePrefObj, String emailBody, NotificationHelper.BrandingInfo brandingInfo){
		String finalEmailWithTemplate = '';
		String languagelocalekey = peoplePrefObj.User__r.languagelocalekey;
		languagelocalekey = Utility.getSimpplrLanguageLocaleKey(languagelocalekey);
		String pid = UserInfo.getOrganizationId().subString(0,15) + String.valueOf(peoplePrefObj.People__c).subString(0,15); 
		List<String> formatterList = new List<String>();
		String templateWithHeaderFooter = '';
		//{0}
		formatterList.add('<style>@media all{.ExternalClass{width:100%}.ExternalClass,.ExternalClass p,.ExternalClass span,.ExternalClass font,.ExternalClass td,.ExternalClass div{line-height:100%}.apple-link a{color:inherit!important;font-family:inherit!important;font-size:inherit!important;font-weight:inherit!important;line-height:inherit!important;text-decoration:none!important}}@media only screen and (max-width:620px){table[class=body] .wrapper,table[class=body] .header,table[class=body] .article{padding:10px!important}table[class=body] .content{padding:0!important}table[class=body] .container{padding:0!important;width:100%!important}table[class=body] .main{border-left-width:0!important;border-radius:0!important;border-right-width:0!important}table[class=body] .main{border-left-width:0!important;border-radius:0!important;border-right-width:0!important}table[class=body] .btn a{width:100%!important}table[class=body] .img-responsive{height:auto!important;max-width:100%!important;width:auto!important}td[class="mobile-hide"]{display:none}.mobile-hide{display:none}.newsletter-item .media{width:100px!important}.newsletter-item .media .Calendar .CalendarMonth{font-size:14px!important}.newsletter-item .media .Calendar .CalendarDay{font-size:33px!important}.newsletter-item--showCase .media{width:100%!important}.newsletter-item--showCase .media .Calendar .CalendarMonth{font-size:20px!important}.newsletter-item--showCase .media .Calendar .CalendarDay{font-size:40px!important}.wrapper,.header,.article{padding:10px!important}.content{padding:0!important}.container{padding:0!important;width:100%!important}.main{border-left-width:0!important;border-radius:0!important;border-right-width:0!important}.btn table{width:100%!important}.btn a{width:100%!important}.img-responsive{height:auto!important;max-width:100%!important;width:auto!important}}a[x-apple-data-detectors]{color:inherit!important;text-decoration:none!important;font-size:inherit!important;font-family:inherit!important;font-weight:inherit!important;line-height:inherit!important}</style>');
		//***url to backyard logo not used anymore*** formatterList.add(PageContext.getPageURL(Pages.app)+'?u=/&origin=ne');
		//{1}
		formatterList.add(brandingInfo.logo_url);
		//{2}
		formatterList.add(LocaleContext.getLocalisedDateAsMMMMDDYYYY(DateTime.now(),languagelocalekey, peoplePrefObj.User__r.timeZonesidkey));// current date
		//{3}
		formatterList.add(emailBody);

		if (SimpplrContext.appConfig.Mobile_Promotion_Enabled__c) {
			templateWithHeaderFooter = EmailTemplateService.templatePartMap.get('templateWithHeaderFooterForMobilePromotion');
			//{4} Promotion heading
			formatterList.add(LocaleContext.getLabel(languagelocalekey, 
					KEY_FOOTER_PROMOTION_HEADING).replace('{{appName}}',
					SimpplrContext.applicationName));
			//{5} Promotion text 
			formatterList.add(LocaleContext.getLabel(languagelocalekey, 
					KEY_FOOTER_PROMOTION_TEXT).replace('{{appName}}',
					SimpplrContext.applicationName));
			//{6} iOS APP LInk 
			formatterList.add(EmailConstants.MOBILE_PROMOTION_LINK + 'iOS&utm_source=email_footer&utm_term=' + pid);
			//{7} IOS badge 
			formatterList.add(EmailConstants.footerPromotionBadgeIOS.replace('{{locale}}',languagelocalekey));
			//{8} Android app link 
			formatterList.add(EmailConstants.MOBILE_PROMOTION_LINK + 'android&utm_source=email_footer&utm_term='  + pid);
			//{9} Android badge 
			formatterList.add(EmailConstants.footerPromotionBadgeAndroid.replace('{{locale}}',languagelocalekey));

		} else {
			templateWithHeaderFooter = EmailTemplateService.templatePartMap.get('templateWithHeaderFooter');
		}

		//{4} || {10}
		formatterList.add(baseUrl + Page.PageRedirector.getUrl()+'?userId='+peoplePrefObj.people__c+'&pageToRedirect='+Pages.MySettingsEmail+'&origin=ne');
		//{5} || {11}
		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_FOOTER_SETTINGS).replace('{{appName}}',SimpplrContext.applicationName));
		//{6} || {12}
 		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_COPYRIGHT).replace('{{year}}',''+DateTime.now().year()));
		//{7} || {13}
		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_POWERED_BY));
		
		//{8}
		if (!SimpplrContext.appConfig.Mobile_Promotion_Enabled__c) {
			formatterList.add('');
		}
		//{9} || {14}
		if ('dark'.equalsIgnoreCase(brandingInfo.header_preset)) {
			
			formatterList.add('000000');

		} else if ('primary'.equalsIgnoreCase(brandingInfo.header_preset)) {
			formatterList.add(brandingInfo.general_primaryColor);
		
		} else if ('default'.equalsIgnoreCase(brandingInfo.header_preset)) {
			formatterList.add('ffffff');
		
		} else {
			formatterList.add(brandingInfo.header_backgroundColor);
		}
		
		finalEmailWithTemplate = EmailUtility.format(templateWithHeaderFooter, formatterList);
		return finalEmailWithTemplate;
	}

	@testVisible
	private static string getEmailTemplateWithNewHeaderFooterWithNoSettings(People_Preference__c peoplePrefObj, String emailBody, NotificationHelper.BrandingInfo brandingInfo){
		String finalEmailWithTemplate = '';
		String languagelocalekey = peoplePrefObj.User__r.languagelocalekey;

		languagelocalekey = Utility.getSimpplrLanguageLocaleKey(languagelocalekey);

		List<String> formatterList = new List<String>();
		String templateWithHeaderFooter = EmailTemplateService.templatePartMap.get('templateWithHeaderFooterWithNoSettings');
		formatterList.add('<style>@media all{.ExternalClass{width:100%}.ExternalClass,.ExternalClass p,.ExternalClass span,.ExternalClass font,.ExternalClass td,.ExternalClass div{line-height:100%}.apple-link a{color:inherit!important;font-family:inherit!important;font-size:inherit!important;font-weight:inherit!important;line-height:inherit!important;text-decoration:none!important}}@media only screen and (max-width:620px){table[class=body] .wrapper,table[class=body] .header,table[class=body] .article{padding:10px!important}table[class=body] .content{padding:0!important}table[class=body] .container{padding:0!important;width:100%!important}table[class=body] .main{border-left-width:0!important;border-radius:0!important;border-right-width:0!important}table[class=body] .main{border-left-width:0!important;border-radius:0!important;border-right-width:0!important}table[class=body] .btn a{width:100%!important}table[class=body] .img-responsive{height:auto!important;max-width:100%!important;width:auto!important}td[class="mobile-hide"]{display:none}.mobile-hide{display:none}.newsletter-item .media{width:100px!important}.newsletter-item .media .Calendar .CalendarMonth{font-size:14px!important}.newsletter-item .media .Calendar .CalendarDay{font-size:33px!important}.newsletter-item--showCase .media{width:100%!important}.newsletter-item--showCase .media .Calendar .CalendarMonth{font-size:20px!important}.newsletter-item--showCase .media .Calendar .CalendarDay{font-size:40px!important}.wrapper,.header,.article{padding:10px!important}.content{padding:0!important}.container{padding:0!important;width:100%!important}.main{border-left-width:0!important;border-radius:0!important;border-right-width:0!important}.btn table{width:100%!important}.btn a{width:100%!important}.img-responsive{height:auto!important;max-width:100%!important;width:auto!important}}a[x-apple-data-detectors]{color:inherit!important;text-decoration:none!important;font-size:inherit!important;font-family:inherit!important;font-weight:inherit!important;line-height:inherit!important}</style>');
		//***url to backyard logo not used anymore*** formatterList.add(PageContext.getPageURL(Pages.app)+'?u=/&origin=ne');
		formatterList.add(brandingInfo.logo_url);
		
		formatterList.add(LocaleContext.getLocalisedDateAsMMMMDDYYYY(DateTime.now(),languagelocalekey, peoplePrefObj.User__r.timeZonesidkey));// current date
		formatterList.add(emailBody);
		//formatterList.add(baseUrl + Page.PageRedirector.getUrl()+'?userId='+peoplePrefObj.people__c+'&pageToRedirect='+Pages.MySettingsEmail+'&origin=ne');
		//formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_FOOTER_SETTINGS).replace('{{appName}}',SimpplrContext.applicationName));
		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_COPYRIGHT).replace('{{year}}',''+DateTime.now().year()));
		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_POWERED_BY));
		
		if('dark'.equalsIgnoreCase(brandingInfo.header_preset)){
			formatterList.add('000000');
		} else if('primary'.equalsIgnoreCase(brandingInfo.header_preset)) {
			formatterList.add(brandingInfo.general_primaryColor);
		} else if('default'.equalsIgnoreCase(brandingInfo.header_preset)){
			formatterList.add('ffffff');
		} else {
			formatterList.add(brandingInfo.header_backgroundColor);
		}

		// 7 mobile promotion footer
		formatterList.add(EmailUtility.getMobilePromotionFooterDiv(languagelocalekey, peoplePrefObj.People__c));
		
		finalEmailWithTemplate = EmailUtility.format(templateWithHeaderFooter, formatterList);

		return finalEmailWithTemplate;
	}

    /**
     * @description This method is used to send email notification based on sharepoint upgrade status
     */
    public static void sendSPUpgradeDoneEmailNotification() {
		try {
            NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(UserContext.getCurrentUserInfo);
            EmailUtility.EmailParts parts = new EmailUtility.EmailParts();
            parts.sender = ServiceConstants.EMAIL_SIMPPLR_USER_SERVICES;
            parts.to = new List<String>{UserContext.getCurrentUserInfo.Email__c, ServiceConstants.EMAIL_SIMPPLR_SUPPORT};
            parts.subject = LocaleContext.getLabel(UserContext.languageLocaleKey, KEY_EMAIL_SP_UPGRADE_DONE).replace('{{appName}}', SimpplrContext.applicationName);
            parts.body = getSharepointUpgradeDoneEmailBody(UserContext.firstName, UserContext.getCurrentUserInfo.Last_Name__c, brandingInfo);
            new EmailUtility().sendEmailByAws(parts);
		} catch(Exception e) {
			logger.logError('Unable to send Email Notification for sharepoint upgrade completed', e);
		}
	}

    /**
     * @description this method is used to get the email template body for sharepoint upgrade done
     * @param targetUserFirstName first name of the recipient
     * @param targetUserLastName last name of the recipient
     * @param brandingInfo email branding information
     * @return  `String` return email content
     */
    @testVisible
    private static String getSharepointUpgradeDoneEmailBody(String targetUserFirstName, String targetUserLastName, NotificationHelper.BrandingInfo brandingInfo){
		List<String> formatterList = new List<String>();
		String sharepointUpgradeDoneBody = EmailTemplateService.templatePartMap.get('sharepointUpgradeDone');
		if(String.isNotBlank(targetUserFirstName)){
			formatterList.add(targetUserFirstName);
		} else {
			formatterList.add(targetUserLastName);
		}
		formatterList.add(SimpplrContext.applicationName);
        formatterList.add(baseUrl + Page.PageRedirector.getUrl()+'?pageToRedirect='+Pages.ManageApplicationFileIntegrations);
		sharepointUpgradeDoneBody = EmailUtility.format(sharepointUpgradeDoneBody, formatterList);
		formatterList.clear();
		return getEmailTemplateWithHeaderFooterNoDate(UserContext.languageLocaleKey, sharepointUpgradeDoneBody, brandingInfo);
	}

    /**
     * @description This method is fetching the email template with header footer but no date
     * @param targetUserLanguagelocalekey locale key to fetch label value based on locale
     * @param emailBody actual email body
     * @param brandingInfo email branding information
     * @return  `string` returns email content body
     */
	@testVisible
	private static string getEmailTemplateWithHeaderFooterNoDate(String targetUserLanguagelocalekey, String emailBody, NotificationHelper.BrandingInfo brandingInfo){
		String finalEmailWithTemplate = '';
        String targetPeopleId = UserContext.getCurrentUserInfo.Id;
		List<String> formatterList = new List<String>();
		String templateWithHeaderFooter = EmailTemplateService.templatePartMap.get('templateWithHeaderFooter');
		formatterList.add('<style> @media all {.ExternalClass {width: 100%;}.ExternalClass,.ExternalClass p,.ExternalClass span,.ExternalClass font, .ExternalClass td,.ExternalClass div {line-height: 100%; }.apple-link a {color: inherit !important;font-family: inherit !important;font-size: inherit !important;font-weight: inherit !important; line-height: inherit !important; text-decoration: none !important;}}@media only screen and (max-width: 620px) {table[class=body] .wrapper,table[class=body] .header, table[class=body] .article { padding: 10px !important; } table[class=body] .content { padding: 0 !important; } table[class=body] .container {padding: 0 !important; width: 100% !important; }table[class=body] .main {border-left-width: 0 !important;border-radius: 0 !important;border-right-width: 0 !important;} table[class=body] .btn table {width: 100% !important;}table[class=body] .btn a {width: 100% !important; }table[class=body] .img-responsive {height: auto !important;max-width: 100% !important;width: auto !important; }td[class="mobile-hide"] {display: none; }.mobile-hide {display: none;} .wrapper,.header, .article { padding: 10px !important;} .content { padding: 0 !important;}.container {padding: 0 !important;width: 100% !important;}.main { border-left-width: 0 !important;border-radius: 0 !important; border-right-width: 0 !important;}.btn table { width: 100% !important;} .btn a { width: 100% !important; }.img-responsive { height: auto !important;max-width: 100% !important;width: auto !important;}} a[x-apple-data-detectors] {color: inherit !important;text-decoration: none !important;font-size: inherit !important;font-family: inherit !important; font-weight: inherit !important;line-height: inherit !important; }</style>');
		formatterList.add(brandingInfo.logo_url);
		formatterList.add('');// current date
		formatterList.add(emailBody);
		formatterList.add(baseUrl + Page.PageRedirector.getUrl()+'?userId='+targetPeopleId+'&pageToRedirect='+Pages.MySettingsEmail+'&origin=ne');
		formatterList.add(LocaleContext.getLabel(targetUserLanguagelocalekey, KEY_FOOTER_SETTINGS).replace('{{appName}}',SimpplrContext.applicationName));
		formatterList.add(LocaleContext.getLabel(targetUserLanguagelocalekey, KEY_COPYRIGHT).replace('{{year}}',''+DateTime.now().year()));
		formatterList.add(LocaleContext.getLabel(targetUserLanguagelocalekey, KEY_POWERED_BY));
        formatterList.add(brandingInfo.general_primaryColor);
		if('dark'.equalsIgnoreCase(brandingInfo.header_preset)){
			formatterList.add('000000');
		} else if('primary'.equalsIgnoreCase(brandingInfo.header_preset)) {
			formatterList.add(brandingInfo.general_primaryColor);
		} else if('default'.equalsIgnoreCase(brandingInfo.header_preset)){
			formatterList.add('ffffff');
		} else {
			formatterList.add(brandingInfo.header_backgroundColor);
		}
		formatterList.add('f8f8f8');
		formatterList.add('333333');
		finalEmailWithTemplate = EmailUtility.format(templateWithHeaderFooter, formatterList);
		return finalEmailWithTemplate;
	}

    /**
     * @description This method fetches email body for showing csv with document libraries
     * @return  `String` returns email content body
     */
	public static String getSharepointUpgradeInProgressEmailBody(){
		List<String> formatterList = new List<String>();
        NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(UserContext.getCurrentUserInfo);
		String sharepointUpgradeDoneBody = EmailTemplateService.templatePartMap.get('sharepointUpgradeInProgress');
		if(String.isNotBlank(UserContext.firstName)){
			formatterList.add(UserContext.firstName);
		} else {
			formatterList.add(UserContext.getCurrentUserInfo.Last_Name__c);
		}
		formatterList.add(SimpplrContext.applicationName);
		sharepointUpgradeDoneBody = EmailUtility.format(sharepointUpgradeDoneBody, formatterList);
		formatterList.clear();
		return getEmailTemplateWithHeaderNoFooterNoDate(UserContext.languageLocaleKey, sharepointUpgradeDoneBody, brandingInfo);
	}

    /**
     * @description fetching email template with header and no footer/date
     * @param targetUserLanguagelocalekey locale key to fetch label value based on locale
     * @param emailBody actual email body
     * @param brandingInfo email branding information
     * @return  `string` returns email content
     */
    @testVisible
	private static string getEmailTemplateWithHeaderNoFooterNoDate(String targetUserLanguagelocalekey, String emailBody, NotificationHelper.BrandingInfo brandingInfo){
		String finalEmailWithTemplate = '';
		List<String> formatterList = new List<String>();
		String templateWithHeaderFooter = EmailTemplateService.templatePartMap.get('templateWithoutFooter');
		formatterList.add('<style> @media all {.ExternalClass {width: 100%;}.ExternalClass,.ExternalClass p,.ExternalClass span,.ExternalClass font, .ExternalClass td,.ExternalClass div {line-height: 100%; }.apple-link a {color: inherit !important;font-family: inherit !important;font-size: inherit !important;font-weight: inherit !important; line-height: inherit !important; text-decoration: none !important;}}@media only screen and (max-width: 620px) {table[class=body] .wrapper,table[class=body] .header, table[class=body] .article { padding: 10px !important; } table[class=body] .content { padding: 0 !important; } table[class=body] .container {padding: 0 !important; width: 100% !important; }table[class=body] .main {border-left-width: 0 !important;border-radius: 0 !important;border-right-width: 0 !important;} table[class=body] .btn table {width: 100% !important;}table[class=body] .btn a {width: 100% !important; }table[class=body] .img-responsive {height: auto !important;max-width: 100% !important;width: auto !important; }td[class="mobile-hide"] {display: none; }.mobile-hide {display: none;} .wrapper,.header, .article { padding: 10px !important;} .content { padding: 0 !important;}.container {padding: 0 !important;width: 100% !important;}.main { border-left-width: 0 !important;border-radius: 0 !important; border-right-width: 0 !important;}.btn table { width: 100% !important;} .btn a { width: 100% !important; }.img-responsive { height: auto !important;max-width: 100% !important;width: auto !important;}} a[x-apple-data-detectors] {color: inherit !important;text-decoration: none !important;font-size: inherit !important;font-family: inherit !important; font-weight: inherit !important;line-height: inherit !important; }</style>');
		formatterList.add(brandingInfo.logo_url);
		formatterList.add(emailBody);
        if('dark'.equalsIgnoreCase(brandingInfo.header_preset)){
			formatterList.add('000000');
		} else if('primary'.equalsIgnoreCase(brandingInfo.header_preset)) {
			formatterList.add(brandingInfo.general_primaryColor);
		} else if('default'.equalsIgnoreCase(brandingInfo.header_preset)){
			formatterList.add('ffffff');
		} else {
			formatterList.add(brandingInfo.header_backgroundColor);
		}
		finalEmailWithTemplate = EmailUtility.format(templateWithHeaderFooter, formatterList);
		return finalEmailWithTemplate;
	}

    @testVisible
	private static string getEmailTemplateWithHeaderFooter(String targetPeopleId,String targetUerId, String targetUserName, String targetUserLanguagelocalekey, String emailBody, NotificationHelper.BrandingInfo brandingInfo){
		String finalEmailWithTemplate = '';

		List<String> formatterList = new List<String>();
		String templateWithHeaderFooter = EmailTemplateService.templatePartMap.get('templateWithHeaderFooter');
		//0=link to targetuserHomeMyDashbaord 1=Brangin logo image url   2=Date string in format June 27, 2015 3=Email Body table 4=link to email setting 5=link to email setting 
		//6=link to open dashboard of target User 7=UserName of the target User 8=copyright text 9=PrimaryColor 10=Header BG Color 11=Footer BG Color 12=footer text Color
		//0
		formatterList.add('<style> @media all {.ExternalClass {width: 100%;}.ExternalClass,.ExternalClass p,.ExternalClass span,.ExternalClass font, .ExternalClass td,.ExternalClass div {line-height: 100%; }.apple-link a {color: inherit !important;font-family: inherit !important;font-size: inherit !important;font-weight: inherit !important; line-height: inherit !important; text-decoration: none !important;}}@media only screen and (max-width: 620px) {table[class=body] .wrapper,table[class=body] .header, table[class=body] .article { padding: 10px !important; } table[class=body] .content { padding: 0 !important; } table[class=body] .container {padding: 0 !important; width: 100% !important; }table[class=body] .main {border-left-width: 0 !important;border-radius: 0 !important;border-right-width: 0 !important;} table[class=body] .btn table {width: 100% !important;}table[class=body] .btn a {width: 100% !important; }table[class=body] .img-responsive {height: auto !important;max-width: 100% !important;width: auto !important; }td[class="mobile-hide"] {display: none; }.mobile-hide {display: none;} .wrapper,.header, .article { padding: 10px !important;} .content { padding: 0 !important;}.container {padding: 0 !important;width: 100% !important;}.main { border-left-width: 0 !important;border-radius: 0 !important; border-right-width: 0 !important;}.btn table { width: 100% !important;} .btn a { width: 100% !important; }.img-responsive { height: auto !important;max-width: 100% !important;width: auto !important;}} a[x-apple-data-detectors] {color: inherit !important;text-decoration: none !important;font-size: inherit !important;font-family: inherit !important; font-weight: inherit !important;line-height: inherit !important; }</style>');
		//***url to backyard logo not used anymore*** formatterList.add(PageContext.getPageURL(Pages.app)+'?u=/&origin=ne');
		
		//1
		formatterList.add(brandingInfo.logo_url);
		
		//2
		formatterList.add(LocaleContext.getLocalisedDateAsMMMMDDYYYY(DateTime.now(), targetUserLanguagelocalekey));// current date
		
		//3
		formatterList.add(emailBody);
		
		//4
		formatterList.add(baseUrl + Page.PageRedirector.getUrl()+'?userId='+targetPeopleId+'&pageToRedirect='+Pages.MySettingsEmail+'&origin=ne');
		
		//5
		formatterList.add(LocaleContext.getLabel(targetUserLanguagelocalekey, KEY_FOOTER_SETTINGS).replace('{{appName}}',SimpplrContext.applicationName));
		
		//6
		formatterList.add(LocaleContext.getLabel(targetUserLanguagelocalekey, KEY_COPYRIGHT).replace('{{year}}',''+DateTime.now().year()));
		
		//7
		formatterList.add(LocaleContext.getLabel(targetUserLanguagelocalekey, KEY_POWERED_BY));

		//8
		formatterList.add(brandingInfo.general_primaryColor);
		
		if('dark'.equalsIgnoreCase(brandingInfo.header_preset)){
			formatterList.add('000000');
		} else if('primary'.equalsIgnoreCase(brandingInfo.header_preset)) {
			formatterList.add(brandingInfo.general_primaryColor);
		} else if('default'.equalsIgnoreCase(brandingInfo.header_preset)){
			formatterList.add('ffffff');
		} else {
			formatterList.add(brandingInfo.header_backgroundColor);
		}
		
		formatterList.add('f8f8f8');
		formatterList.add('333333');
		finalEmailWithTemplate = EmailUtility.format(templateWithHeaderFooter, formatterList);

		return finalEmailWithTemplate;
	}
	
	public static void sendEmailForEndorsement(People__c targetPeople, People__c fromPeople, Map<String,String> expertiseMap) {
		try {							
			List<People_Preference__c> peoplePreList;
			
			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', targetPeople.id);
			String query = '';
			
			if (String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
				soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
				query = 'Select id, People__r.First_Name__c,People__r.Last_Name__c, people__r.User__c, people__r.user__r.username,  People__r.About__c, Email_Endorses_Me__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey From People_Preference__c where  Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\'  and people__r.id=: soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
			
			} else {
				query = 'Select id, People__r.First_Name__c,People__r.Last_Name__c, people__r.User__c, people__r.user__r.username,  People__r.About__c, Email_Endorses_Me__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey From People_Preference__c where  Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\'  and people__r.id=: soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
			}
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
			initLangKeyValueMap(peoplePreList);
			
			if (!peoplePreList.isEmpty()) {
				
				if (peoplePreList[0].Email_Endorses_Me__c ) {
					String subject = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey),KEY_ENDORSEMENT_SUBJECT).replace('{{fullName}}',fromPeople.Full_Name__c).replace('{{expertise}}',expertiseMap.values()[0]);
					
					NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)peoplePreList[0].People__r);
					
					String emailBody = getEndorsementHTMLEmailBody(peoplePreList[0], fromPeople, expertiseMap);
					List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
					emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody, targetPeople.User__c, SimpplrContext.SEDFromEmail));
					
					if (!emailObjList.isEmpty()){
						sendEmails(emailObjList);
					}

				}

			}

		} catch(Exception e){
			logger.logError('Unable to send sendEmailForEndorsement email',e);
		}
	}
	
	@testVisible 
	private static String getEndorsementHTMLEmailBody (People_Preference__c peoplePreObj, People__c fromPeople,
			Map<String,String> topicMap){
		NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c) peoplePreObj.People__r);
		List<String> formatterList = new List<String>();
		
		String languagelocalekey = Utility.getSimpplrLanguageLocaleKey(peoplePreObj.User__r.languagelocalekey);
		String profileDisplayIcon = getProfileDisplayIcon(fromPeople.External_Photo_URL__c, fromPeople.External_Photo_URL_Expiry_Date__c);
		
		String emailBodyTableEndorsement = EmailTemplateService.templatePartMap.get('emailBodyTableEndorsement');
		//0=Target User First Name 1=No Of Endorsement  2=EndorsementOrEndorsements 3=http://satzcreate.com/simpplr/emailer/img/profile-2.jpg 4=Logged in user Full Name 5=Comma separated topics 6=Link to targetUserProfile 7=Link to targetUserProfile
		if(String.isNotBlank(peoplePreObj.People__r.First_Name__c)){
			formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}',peoplePreObj.People__r.First_Name__c));
		} else {
			formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}',peoplePreObj.People__r.Last_Name__c));
		}
		
		formatterList.add(profileDisplayIcon);
		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_ENDORSEMENT_INTRO).replace('{{fullName}}',fromPeople.Full_Name__c).replace('{{expertise}}', topicMap.values()[0]));
		formatterList.add(fromPeople.Full_Name__c);
		if(String.isNotBlank(fromPeople.About__c)) {
			formatterList.add(String.format('<table style="-ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; width: 100%;"><tr><td class="Post-body" style="-ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; border-collapse: collapse; color: #333; font-family:\'Helvetica Neue\',Helvetica,Arial,sans-serif; font-size: 14px; mso-table-lspace: 0pt; mso-table-rspace: 0pt; text-align: left; vertical-align: top;"><p style="-ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; font-family: \'Helvetica Neue\',Helvetica,Arial,sans-serif; font-size: 14px; font-weight: normal; margin: 0; margin-bottom: 15px;">{0}</p></td> </tr> </table>',new String[] {(fromPeople.About__c).escapeHtml4()}));
		} else {
			formatterList.add('');
		}
		formatterList.add(baseUrl + Page.PageRedirector.getUrl() + '?userId=' + peoplePreObj.people__r.user__c +'&profileId=' + peoplePreObj.People__c+'&pageToRedirect='+Pages.ProfileAbout+'&origin=ne&notificationType=Endorse');
		/*view button*/formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_EMAIL_COMMON_VIEW_BUTTON));
		formatterList.add(brandingInfo.general_primaryColor);
		emailBodyTableEndorsement = EmailUtility.format(emailBodyTableEndorsement, formatterList);
		formatterList.clear();
		return getEmailTemplateWithNewHeaderFooter(peoplePreObj, emailBodyTableEndorsement, brandingInfo);
	}
	
	public static void sendEmailForContentLike(Simpplr_Content__c simpplrContentObj) {

		String KEY_CONTENT_ALBUM_LIKE = 'email.notification.content.album.like';
		String KEY_CONTENT_BLOGPOST_LIKE = 'email.notification.content.blog_post.like';
		String KEY_CONTENT_EVENT_LIKE = 'email.notification.content.event.like';
		String KEY_CONTENT_PAGE_LIKE = 'email.notification.content.page.like';
		
		String KEY_CONTENT_MANAGE_ALBUM_LIKE = 'email.notification.content.manage.album.like';
		String KEY_CONTENT_MANAGE_BLOGPOST_LIKE = 'email.notification.content.manage.blog_post.like';
		String KEY_CONTENT_MANAGE_EVENT_LIKE = 'email.notification.content.manage.event.like';
		String KEY_CONTENT_MANAGE_PAGE_LIKE = 'email.notification.content.manage.page.like';

		try {
			if(SimpplrContext.enableEmail){
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();

				Set<String> targetUserIdSet = NotificationDao.getUserIdsWithContentNotificationsEnabled(simpplrContentObj.Id);
				targetUserIdSet.add(simpplrContentObj.Primary_Author__r.User__c);

				List<People_Preference__c> peoplePrefList;
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', targetUserIdSet);
				soqlParamMap.put('soqlParam2', UserContext.id);
				String query = '';
				
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam3', SimpplrContext.packageName);
					query = 'Select id, People__r.First_Name__c,People__r.Last_Name__c, People__r.user__r.userName, People__r.About__c, Email_My_Content_Like_Or_Share__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_My_Content_Like_Or_Share__c=true and  People__r.User__c = :soqlParam1 and people__r.User__c !=: soqlParam2 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam3)';
				} else {
					query = 'Select id, People__r.First_Name__c, People__r.Last_Name__c,People__r.user__r.userName, People__r.About__c, Email_My_Content_Like_Or_Share__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_My_Content_Like_Or_Share__c=true and  People__r.User__c = :soqlParam1 and people__r.User__c !=: soqlParam2 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePrefList);

				Map<String,People_Preference__c> userIdToPeoplePrefMap = new Map<String,People_Preference__c>();
				for(People_Preference__c prefObj : peoplePrefList) {
					userIdToPeoplePrefMap.put(prefObj.People__r.User__c, prefObj);
				}

				for(String targetUserId : targetUserIdSet) {
					if(!targetUserId.equalsIgnoreCase(UserContext.id)) {
						
						People_Preference__c pPrefObj = userIdToPeoplePrefMap.get(targetUserId);
						
						if(pPrefObj != null) {
							People__c peopleObj = (People__c)pPrefObj.People__r;
							String userLanguage = Utility.getSimpplrLanguageLocaleKey(pPrefObj.User__r.languagelocalekey);
					
							NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
							
							String contentType = simpplrContentObj.Type__c;
							String introtext, subject, body;

							if(targetUserId.equalsIgnoreCase(simpplrContentObj.Primary_Author__r.User__c)) { // If its your content (your = targetuser)
								if(contentType.equalsIgnoreCase('BlogPost')){
									subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_BLOGPOST_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', simpplrContentObj.Title__c);
									introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_BLOGPOST_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
									body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_BLOGPOST_LIKE + KEY_BODY).replace('{{contentTitle}}', simpplrContentObj.Title__c);
								} else if(contentType.equalsIgnoreCase('Album')){
									subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_ALBUM_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', simpplrContentObj.Title__c);
									introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_ALBUM_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
									body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_ALBUM_LIKE + KEY_BODY).replace('{{contentTitle}}', simpplrContentObj.Title__c);
								} else if(contentType.equalsIgnoreCase('Event')){
									subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_EVENT_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', simpplrContentObj.Title__c);
									introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_EVENT_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
									body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_EVENT_LIKE + KEY_BODY).replace('{{contentTitle}}', simpplrContentObj.Title__c);
								} else if(contentType.equalsIgnoreCase('Page')){
									subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_PAGE_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', simpplrContentObj.Title__c);
									introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_PAGE_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
									body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_PAGE_LIKE + KEY_BODY).replace('{{contentTitle}}', simpplrContentObj.Title__c);
								}
							} else {
								if(contentType.equalsIgnoreCase('BlogPost')){
									subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_BLOGPOST_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', simpplrContentObj.Title__c);
									introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_BLOGPOST_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
									body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_BLOGPOST_LIKE + KEY_BODY).replace('{{contentTitle}}', simpplrContentObj.Title__c);
								} else if(contentType.equalsIgnoreCase('Album')){
									subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_ALBUM_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', simpplrContentObj.Title__c);
									introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_ALBUM_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
									body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_ALBUM_LIKE + KEY_BODY).replace('{{contentTitle}}', simpplrContentObj.Title__c);
								} else if(contentType.equalsIgnoreCase('Event')){
									subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_EVENT_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', simpplrContentObj.Title__c);
									introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_EVENT_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
									body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_EVENT_LIKE + KEY_BODY).replace('{{contentTitle}}', simpplrContentObj.Title__c);
								} else if(contentType.equalsIgnoreCase('Page')){
									subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_PAGE_LIKE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', simpplrContentObj.Title__c);
									introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_PAGE_LIKE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
									body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_PAGE_LIKE + KEY_BODY).replace('{{contentTitle}}', simpplrContentObj.Title__c);
								}
							}

							String contentLink = baseUrl + Page.PageRedirector.getUrl() + 
														'?siteId=' + simpplrContentObj.site__c +
														'&contentId=' + simpplrContentObj.id +
														'&pageToRedirect=ContentDetailPage' + 
														'&origin=ne&contentType=' + simpplrContentObj.type__c.tolowercase()+
														'&utm_term=content_like'+
														'&utm_source=activity_notifications_email'+
														'&utm_medium=email' ;

							String emailBody = getContentActionEmailBody(userIdToPeoplePrefMap.get(targetUserId), introText, body, null, contentLink);
							emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody, targetUserId, SimpplrContext.SEDFromEmail));
						}
					}
				}

				if(!emailObjList.isEmpty()) {
					sendEmails(emailObjList);
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send sendEmailForContentLike email',e);
		}
	}
	
	private static String getContentModerationEmailBody(People_Preference__c peoplePrefObj, 
					String introText, String body, String userComment, String viewLink, Simpplr_Content__c contentObj, NotificationHelper.BrandingInfo brandingInfo) {
		
		String targetPeopleId = peoplePrefObj.People__c;
		String targetUserFirstName = peoplePrefObj.People__r.First_Name__c;
		String targetUserName = peoplePrefObj.People__r.user__r.userName;
		String targetUserLastName = peoplePrefObj.People__r.Last_Name__c;
		
		//String profileDisplayIcon = getProfileDisplayIcon(contentObj.Primary_Author__r.External_Photo_URL__c, contentObj.Primary_Author__r.External_Photo_URL_Expiry_Date__c);
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
		
		String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePrefObj.user__r.languagelocalekey);

		List<String> formatterList = new List<String>();
		String emailBodyContentActions = EmailTemplateService.templatePartMap.get('emailBodyContentActions');
		//0=Target User First Name 1=introText  2=profileImage 3=Logged in user Full Name 4=content LinkBody 5=Link to Content 6=Link to content
		String hiLocalizedString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION);
		if(String.isNotBlank(targetUserFirstName)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserFirstName));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserLastName));
		}
		formatterList.add(introText);
		formatterList.add(profileDisplayIcon);
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c);
		formatterList.add(body);
		formatterList.add(viewLink);
		formatterList.add(viewLink);
		formatterList.add(brandingInfo.general_primaryColor);
		if(String.isNotBlank(userComment)) {
			formatterList.add(userComment);
		} else {
			formatterList.add('');
		}

		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON)); // view button
		formatterList.add(LocaleContext.getLocalisedDateAsMMMMDDYYYY(DateTime.now(), userLanguage, peoplePrefObj.User__r.timeZonesidkey));// current date

		emailBodyContentActions = EmailUtility.format(emailBodyContentActions, formatterList);
		formatterList.clear();
		return getEmailTemplateWithNewHeaderFooter(peoplePrefObj, emailBodyContentActions, brandingInfo);
	}

	private static String getContentActionEmailBody(People_Preference__c peoplePrefObj, 
					String introText, String body, String userComment, String viewLink) {
		NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c) peoplePrefObj.People__r);
		String targetPeopleId = peoplePrefObj.People__c;
		String targetUserFirstName = peoplePrefObj.People__r.First_Name__c;
		String targetUserName = peoplePrefObj.People__r.user__r.userName;
		String targetUserLastName = peoplePrefObj.People__r.Last_Name__c;
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
		String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePrefObj.user__r.languagelocalekey);

		List<String> formatterList = new List<String>();
		String emailBodyContentActions = EmailTemplateService.templatePartMap.get('emailBodyContentActions');
		//0=Target User First Name 1=introText  2=profileImage 3=Logged in user Full Name 4=content LinkBody 5=Link to Content 6=Link to content
		String hiLocalizedString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION);
		if(String.isNotBlank(targetUserFirstName)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserFirstName));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserLastName));
		}
		formatterList.add(introText);
		formatterList.add(profileDisplayIcon);
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c);
		formatterList.add(body);
		formatterList.add(viewLink);
		formatterList.add(viewLink);
		formatterList.add(brandingInfo.general_primaryColor);
		if(String.isNotBlank(userComment)) {
			formatterList.add(userComment);
		} else {
			formatterList.add('');
		}

		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON)); // view button
		formatterList.add(LocaleContext.getLocalisedDateAsMMMMDDYYYY(DateTime.now(), userLanguage, peoplePrefObj.User__r.timeZonesidkey));// current date

		emailBodyContentActions = EmailUtility.format(emailBodyContentActions, formatterList);
		formatterList.clear();
		return getEmailTemplateWithNewHeaderFooter(peoplePrefObj, emailBodyContentActions, brandingInfo);
	}
	
	/**
	* 
	* Purpose:  [Check for the notifications to be sent to different users as per settings]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/
	public static void sendNotificationForMakeManager(String userId, String siteId, String notificationCategory) {
		try {
			List<Simpplr_Site__c> listOfRelatedSite= [select Name, Chatter_Group_Id__c from Simpplr_Site__c where Id=:siteId limit 1];
			List<People_Preference__c> peoplePrefList;
			if (!listOfRelatedSite.isEmpty()) {	
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', userId);
				String query = '';
				
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
					query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c, People__c, Email_Notification_Digest_Frequency__c FROM People_Preference__c Where people__r.User__c =:soqlParam1 and people__r.User__r.IsActive=true and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
				} else {
					query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c, People__c, Email_Notification_Digest_Frequency__c FROM People_Preference__c Where people__r.User__c =:soqlParam1 and people__r.User__r.IsActive=true';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				Map<String,People_Preference__c> peoplePrefMap = new Map<String,People_Preference__c>();
				for(People_Preference__c peoplePref : peoplePrefList) {
					peoplePrefMap.put(peoplePref.people__c,peoplePref);
				}
				List<NotificationDao.Notification> listOfNotification=new List<NotificationDao.Notification>();
				if(!peoplePrefMap.isEmpty()) {
					for(String targetUser: peoplePrefMap.keySet()) {
						String guid=UserContext.id + '-' + System.currentTimeMillis(); // all user share same guid becuase later on we can process same guid's pending requests 
						NotificationDao.Notification nt =new NotificationDao.Notification();
						nt.fromUser=UserContext.peopleId;
						nt.GUID=guid;
						nt.objectID=listOfRelatedSite[0].Chatter_Group_Id__c;
						nt.objectType='CollaborationGroup';
						nt.isRead=false;
						nt.categoryStr=notificationCategory;
						nt.snippet = listOfRelatedSite[0].Name;
						nt.type=TYPE_INFORMATION;
						nt.action='Pending';
						nt.status='Pending';
						nt.subType='Managership';
						nt.toUser=targetUser;
						nt.siteId=siteId;
						listOfNotification.add(nt);
					}
					if(!listOfNotification.isEmpty() & !Test.isRunningTest()) {
						sendNotifications(listOfNotification);
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send sendNotificationForMakeManager email : ' + notificationCategory, e);
		}
	}
	
	/**
	* 
	* Purpose:  [Check for the notifications to be sent to different users as per settings]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/
	public static void sendNotificationToNewSegmentManagers(String segmentId, Set<String> peopleIdSet) {
		try {
			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', segmentId);
			String query = 'SELECT id, Name__c FROM Segment__c WHERE Id = :soqlParam1 LIMIT 1';
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			List<Segment__c> segmentList = (List<Segment__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
			if(!segmentList.isEmpty()) {
				List<People__c> peopleList = null;
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					peopleList = [SELECT id FROM People__c WHERE Id IN :peopleIdSet AND
					 				Segment__c = :segmentList[0].Id AND User__r.IsActive = true AND
				 				 	User__c IN (SELECT userid FROM UserPackageLicense WHERE 
	 				 				PackageLicense.NamespacePrefix =: SimpplrContext.packageName)];
				} else {
					peopleList = [SELECT id FROM People__c WHERE Id IN :peopleIdSet AND
					 				Segment__c = :segmentList[0].Id AND User__r.IsActive = true];
				}
				List<App_Notification__c> notificationList = new List<App_Notification__c>();
				if(!peopleList.isEmpty()) {
					String guid = UserContext.id + '-' + System.currentTimeMillis(); 
					for(People__c peopleObj : peopleList) {
						String peopleId = peopleObj.Id;
		    			
		    			App_Notification__c notificationObject = new App_Notification__c();
			            notificationObject.GUID__c = guid;
			            notificationObject.Object_Id__c = segmentId;
			            notificationObject.Object_Type__c = 'Segment';
			            notificationObject.Status__c = 'Pending';
			            notificationObject.Type__c = 'Information';
			            notificationObject.Sub_Type__c = 'Review';
			            notificationObject.Is_Read__c = false;
			            notificationObject.Is_New__c = true;
						notificationObject.Category__c = 'Made_Segment_Manager';
			            notificationObject.Snippet__c = segmentList[0].Name__c;
			            notificationObject.Sent_to__c = peopleId;
			            notificationObject.Sent_By__c = loggedInUserInfo.id;
			            notificationObject.Simpplr_Site__c = null;
			            notificationObject.Created_DateTime__c = DateTime.now();
			            
			            notificationList.add(notificationObject);
					}
				}
	    				
				if(!notificationList.isEmpty()) {
					NotificationDao.createNotifications(notificationList);
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send send notification to newly added segment Manager(s)', e);
		}
	}
	
	/**
	* 
	* Purpose:  [Check for the notifications to be sent to different users as per settings]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/
	public static void sendEmailNotificationToNewSegmentManagers(String segmentId, Set<String> peopleIdSet) {
		try{
			if(SimpplrContext.enableEmail){
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', segmentId);
				String query = 'SELECT id, Name__c FROM Segment__c WHERE Id = :soqlParam1 LIMIT 1';
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				List<Segment__c> segmentList = (List<Segment__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				if(!segmentList.isEmpty()) {
					List<People_Preference__c> peoplePrefList = null;
					Map<String, Object> soqlParamMap1 = new  Map<String, Object>();
					soqlParamMap1.put('soqlParam1', peopleIdSet);
					soqlParamMap1.put('soqlParam2', segmentList[0].Id);
					if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
						soqlParamMap1.put('soqlParam3', SimpplrContext.packageName);
						query = 'SELECT id, people__c, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, '
									+ ' People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, '
									+ ' People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, ' 
									+ ' People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey FROM People_Preference__c WHERE '
									+ ' people__c IN :soqlParam1 AND '
									+ ' People__r.Segment__c = :soqlParam2 AND Allow_Simpplr_Emails__c = true AND  '
									+ ' Email_Notification_Digest_Frequency__c = \'Immediate\' AND '
									+ ' people__r.User__r.IsActive = true AND people__r.User__r.UserType = \'Standard\' AND ' 
									+ ' User__c IN (SELECT userid FROM UserPackageLicense WHERE '
									+ ' PackageLicense.NamespacePrefix = :soqlParam3)';
					} else {
						query = 'SELECT id, people__c, people__r.user__c, People__r.First_Name__c, People__r.Last_Name__c, '
									+ ' People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, '
									+ ' People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, '
									+ ' People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey FROM People_Preference__c WHERE '
									+ ' people__c IN :soqlParam1 AND '
									+ ' People__r.Segment__c = :soqlParam2 AND Allow_Simpplr_Emails__c = true AND '
									+ '  Email_Notification_Digest_Frequency__c = \'Immediate\' AND '
									+ ' people__r.User__r.IsActive = true AND people__r.User__r.UserType = \'Standard\'';
					}
					SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
					peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap1);
					NotificationHelper.BrandingInfo brandingInfo = null;
					initLangKeyValueMap(peoplePrefList);
					for(People_Preference__c peoplePrefObj : peoplePrefList){
						brandingInfo =  EmailUtility.getBrandingInfo4People((People__c) peoplePrefList[0].people__r);
						String subject = loggedInUserInfo.Full_Name__c + ' made you a Segment Manager of the ' + segmentList[0].Name__c + ' Segment';
						String emailBody = getNewlyAddedNotificationEmailBody(peoplePrefObj.People__c, peoplePrefObj.people__r.user__c, peoplePrefObj.People__r.First_Name__c, peoplePrefObj.People__r.user__r.userName, subject, peoplePrefObj.People__r.Last_Name__c, brandingInfo);
						
						emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody, peoplePrefObj.people__r.user__c, SimpplrContext.SEDFromEmail));
					}
					
					if(!emailObjList.isEmpty()) {
						sendEmails(emailObjList);
					}
				}	
			}
		} catch(Exception e){
			logger.logError('Unable to send Email Notification to newly added Segment Manager(s)', e);
		}
	}
	
	@testVisible
	private static String getNewlyAddedNotificationEmailBody(String targetPeopleId, String targetUserId, String targetUserFirstName, String targetUserName, String subject, String targetUserLastName, NotificationHelper.BrandingInfo brandingInfo){
		List<String> formatterList = new List<String>();
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
				
		String newlyAddedManagerBody = EmailTemplateService.templatePartMap.get('newlyAddedManagerBody');
		//0=Target User First Name 1=Subject  2=profileImage 3=Logged in user Full Name
		if(String.isNotBlank(targetUserFirstName)){
			formatterList.add(targetUserFirstName);
		} else {
			formatterList.add(targetUserLastName);
		}
		formatterList.add(subject);
		formatterList.add(profileDisplayIcon);
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c);
		formatterList.add(subject);
		formatterList.add(brandingInfo.general_primaryColor);
		newlyAddedManagerBody = EmailUtility.format(newlyAddedManagerBody, formatterList);
		formatterList.clear();
		
		return getEmailTemplateWithHeaderFooter(targetPeopleId, targetUserId, targetUserName, 'en_US', newlyAddedManagerBody, brandingInfo);
	}
	
	/**
	* 
	* Purpose:  [Check for the notifications to be sent to different users as per settings]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/
	public static void sendNotificationForMakeOwner(String userId, String siteId) {
		try {
			List<Simpplr_Site__c> listOfRelatedSite= [select Name, Chatter_Group_Id__c from Simpplr_Site__c where Id=:siteId limit 1];
			List<People_Preference__c> peoplePrefList;
			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', userId);
			String query = '';
			
			if (!listOfRelatedSite.isEmpty()) {
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
					query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c, People__c, Email_Notification_Digest_Frequency__c FROM People_Preference__c Where people__r.User__c =:soqlParam1 and people__r.User__r.IsActive=true and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
				} else {
					query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c, People__c, Email_Notification_Digest_Frequency__c FROM People_Preference__c Where people__r.User__c =:soqlParam1 and people__r.User__r.IsActive=true';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				Map<String,People_Preference__c> peoplePrefMap = new Map<String,People_Preference__c>();
				for(People_Preference__c peoplePref : peoplePrefList) {
					peoplePrefMap.put(peoplePref.people__c,peoplePref);
				}
				List<NotificationDao.Notification> listOfNotification=new List<NotificationDao.Notification>();
				if(!peoplePrefMap.isEmpty()) {
					for(String targetUser: peoplePrefMap.keySet()) {
						String guid=UserContext.id + '-' + System.currentTimeMillis(); // all user share same guid becuase later on we can process same guid's pending requests 
						NotificationDao.Notification nt =new NotificationDao.Notification();
						nt.fromUser=UserContext.peopleId;
						nt.GUID=guid;
						nt.objectID=listOfRelatedSite[0].Chatter_Group_Id__c;
						nt.objectType='CollaborationGroup';
						nt.isRead=false;
						nt.categoryStr='Made_Site_Owner';
						nt.snippet = listOfRelatedSite[0].Name;
						nt.type=TYPE_INFORMATION;
						nt.action='Pending';
						nt.status='Pending';
						nt.subType='Ownership';
						nt.toUser=targetUser;
						nt.siteId=siteId;
						listOfNotification.add(nt);
					}
					if(!listOfNotification.isEmpty() & !Test.isRunningTest()) {
						sendNotifications(listOfNotification);
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send sendNotificationForMakeOwner email',e);
		}
	}
	
	public static void sendEmailForContentPromote(List<People_Preference__c> peoplePrefList, Simpplr_Content__c contentObj, String message, String messageId) {
		List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
		Map<String, People_Preference__c> peoplePrefMap = new Map<String, People_Preference__c>();
		for(People_Preference__c peoplePref : peoplePrefList) {
			peoplePrefMap.put(peoplePref.people__r.user__c, peoplePref);
		}
		initLangKeyValueMap(peoplePrefList);
		String KEY_CONTENT_PROMOTE = 'email.notification.content.promote.notification';
		if(!peoplePrefMap.isEmpty()) {
			if(String.isNotBlank(message)) {
				message = '<p>"' + message.removeStart('<p>').removeEnd('</p>') + '"</p>';
			}
			for(String targetuser: peoplePrefMap.keySet()) {
				People__c peopleObj = (People__c) peoplePrefMap.get(targetUser).People__r;

				NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
				String userLanguage = Utility.getSimpplrLanguageLocaleKey(peopleObj.user__r.languagelocalekey);
				String localizedContentType = LocaleContext.getLocalisedContentTypeLabel(userLanguage, contentObj.Type__c);
				
				String subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_PROMOTE + KEY_SUBJECT)
										.replace('{{fullName}}', UserContext.getCurrentUserInfo.Full_Name__c)
										.replace('{{contentType}}', localizedContentType)
										.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase())
										.replace('{{contentTitle}}', Utility.chompString(contentObj.Title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH));
				
				String introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_PROMOTE + KEY_INTRO)
										.replace('{{fullName}}', contentObj.Primary_Author__r.Full_Name__c)
										.replace('{{contentType}}', localizedContentType)
										.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());

				String body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_PROMOTE + KEY_BODY)
												.replace('{{fullName}}', contentObj.Primary_Author__r.Full_Name__c)
												.replace('{{contentType}}', localizedContentType)
												.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase())
												.replace('{{contentTitle}}', contentObj.Title__c);

				String contentLink = baseUrl + Page.PageRedirector.getUrl() + 
											'?contentId='+contentObj.id + 
											'&pageToRedirect=ContentDetailPage' +
											'&origin=ne&contentType=' + contentObj.type__c.tolowercase() +
											'&showContentNotification=' + messageId+
											'&utm_term=content_promotion_from_site'+
                         					'&utm_source=activity_notifications_email'+
                         				    '&utm_medium=email' ;
				String emailBody = getContentActionEmailBody(peoplePrefMap.get(targetuser), introText, body, message, contentLink);

				emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,targetUser, SimpplrContext.SEDFromEmail));
			}
			if(!emailObjList.isEmpty()) {
				sendEmails(emailObjList);
			}
		}
	}
	public static void sendEmailForContentModeration(Simpplr_Content__c contentObj) {
		try{
			String KEY_ALBUM_SUBMISSION = 'email.notification.content.album.submission.approval';
			String KEY_CONTENT_SUBMISSION = 'email.notification.content.content_type.submission.approval';
			String KEY_EVENT_SUBMISSION = 'email.notification.content.event.submission.approval';

			if(SimpplrContext.enableEmail){
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				Set<String> targetPeopleIdSet = new Set<String>();
				List<Simpplr_Content__c> contentList = [select id, title__c,type__c,site__c,Site__r.Site_type__c, Site__r.Chatter_Group_Id__c, Primary_Author__c,Primary_Author__r.User__c, Display_Excerpt__c, Site__r.Name,Primary_Author__r.External_Photo_URL__c, Primary_Author__r.External_Photo_URL_Expiry_Date__c, Primary_Author__r.Full_Name__c from simpplr_content__c where id=:contentObj.id limit 1 ];
				if(!contentList.isEmpty()){
					Set<User> targetUserSet = new Set<User>();
					if('Public'.equalsIgnoreCase(contentList[0].Site__r.Site_type__c)) {
						targetUserSet.addAll(Utility.getAllAppModeratorsWithContentModedrnOn('appManagerNotifications'));
					}
					targetUserSet.addAll(getManagersOfSelectedSimpplrGroup(contentList[0].Site__r.Chatter_Group_Id__c));
					
					targetPeopleIdSet.addAll(NotificationDao.getUniquePeopleIds(new List<User>(targetUserSet)));
					
					SiteDao siteDaoObj = new SiteDao();
					targetPeopleIdSet.addAll(siteDaoObj.getSiteContentManagerIdsSet(contentList[0].Site__c));
					targetPeopleIdSet.addAll(NotificationDao.getPeopleIdsWithContentNotificationsEnabled(contentList[0].id));
				}

				List<People_Preference__c> peoplePreList;
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', targetPeopleIdSet);
				String query = '';
				
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
					query = 'Select id, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_Content_Submitted_for_Moderation__c=true and  People__c IN: soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
				} else {
					query = 'Select id, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_Content_Submitted_for_Moderation__c=true and  People__c IN: soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePreList);

				Map<String, People_Preference__c> peoplePrefMap = new Map<String, People_Preference__c>();
				for(People_Preference__c peoplePref : peoplePreList) {
					peoplePrefMap.put(peoplePref.people__r.user__c, peoplePref);
				}

				if(!peoplePrefMap.isEmpty()) {
					for(String targetuser: peoplePrefMap.keySet()) {
						if(!targetuser.equalsIgnoreCase(UserContext.id)) {
							NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)peoplePrefMap.get(targetuser).People__r);
							
							String emailHeading = '';
							String KEY_APPLIED_CONTENT_SUBMISSION;
							if(contentObj.Type__c.equalsIgnoreCase('album')) {
								KEY_APPLIED_CONTENT_SUBMISSION = KEY_ALBUM_SUBMISSION;
							} else if (contentObj.Type__c.equalsIgnoreCase('Event')) {
								KEY_APPLIED_CONTENT_SUBMISSION = KEY_EVENT_SUBMISSION;
							} else {
								KEY_APPLIED_CONTENT_SUBMISSION = KEY_CONTENT_SUBMISSION;
							}

							String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePrefMap.get(targetuser).user__r.languagelocalekey);
							String localizedContentType = LocaleContext.getLocalisedContentTypeLabel(userLanguage, contentObj.Type__c);
							String subject = LocaleContext.getLabel(userLanguage, KEY_APPLIED_CONTENT_SUBMISSION + KEY_SUBJECT)
													.replace('{{fullName}}', UserContext.getCurrentUserInfo.Full_Name__c)
													.replace('{{contentType}}', localizedContentType)
													.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase())
													.replace('{{contentTitle}}', Utility.chompString(contentObj.Title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH));
							
							String introText = LocaleContext.getLabel(userLanguage, KEY_APPLIED_CONTENT_SUBMISSION + KEY_INTRO)
													.replace('{{fullName}}', UserContext.getCurrentUserInfo.Full_Name__c)
													.replace('{{contentType}}', localizedContentType)
													.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase())
													.replace('{{contentTitle}}', Utility.chompString(contentObj.Title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH));
							
							String body = contentObj.Title__c;

							String contentLink = baseUrl + Page.PageRedirector.getUrl() +
														'?siteId=' + contentObj.site__c +
														'&contentId='+contentObj.id +
														'&pageToRedirect=ContentDetailPage' +
														'&origin=ne&moderate=1&contentType=' + contentObj.type__c.tolowercase()+
														'&utm_term=content_moderation'+
                                   						'&utm_source=activity_notifications_email'+
                                     					'&utm_medium=email' ;

														
							String emailBody = getContentModerationEmailBody(peoplePrefMap.get(targetuser), introText, body, null, contentLink, contentObj, brandingInfo);
							emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,targetUser, SimpplrContext.SEDFromEmail));
						}
					}

					if(!emailObjList.isEmpty()) {
						sendEmails(emailObjList);
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send sendEmailForContentModeration email',e);
		}
	}
	
	
	
	public static void sendEmailForContentRejection(String contentId, String rejectReason) {
		try{
			String KEY_CONTENT_REJECTED = 'email.notification.content.rejected';
			String KEY_CONTENT_MANAGE_REJECTED = 'email.notification.content.manage.rejected';
			if(SimpplrContext.enableEmail){
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				List<Simpplr_Content__c> contentList = [select id, title__c,type__c,site__c,Site__r.Chatter_Group_Id__c, Primary_Author__c,Primary_Author__r.User__c, Display_Excerpt__c, Site__r.Name,Primary_Author__r.External_Photo_URL__c, Primary_Author__r.External_Photo_URL_Expiry_Date__c, Primary_Author__r.Full_Name__c from simpplr_content__c where id=:contentId limit 1 ];
				if(!contentList.isEmpty()){
					List<People_Preference__c> peoplePrefList;

					Set<String> targetPeopleIdSet = NotificationDao.getPeopleIdsWithContentNotificationsEnabled(contentList[0].Id);
					targetPeopleIdSet.add(contentList[0].Primary_Author__c);
					
					Map<String, Object> soqlParamMap = new  Map<String, Object>();
					soqlParamMap.put('soqlParam1', targetPeopleIdSet);
					String query = '';

					if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
						soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
						query = 'Select id, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_Content_Submission_Response__c=true and  people__c = :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
					} else {
						query = 'Select id, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_Content_Submission_Response__c=true and  people__c = :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
					}
					SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
					peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
					initLangKeyValueMap(peoplePrefList);
					
					for(People_Preference__c prefObj : peoplePrefList) {
						if(!String.valueOf(prefObj.people__r.user__c).equalsIgnoreCase(UserContext.id)) {
							People__c peopleObj = (People__c) prefObj.People__r;
							String userLanguage = Utility.getSimpplrLanguageLocaleKey(prefObj.User__r.languagelocalekey);
                   
							NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
							
							String localizedContentType = LocaleContext.getLocalisedContentTypeLabel(userLanguage, contentList[0].type__c);	
							
							String subject;
							String introText;
							String body;
							if(((String)prefObj.People__c).equalsIgnoreCase((String)contentList[0].Primary_Author__c)) {
								subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_REJECTED + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase()).replace('{{contentTitle}}',  contentList[0].Title__c);
								introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_REJECTED + KEY_INTRO).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());
								body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_REJECTED + KEY_BODY).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase()).replace('{{contentTitle}}',  contentList[0].Title__c);
							} else {
								subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_REJECTED + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase()).replace('{{contentTitle}}',  contentList[0].Title__c);
								introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_REJECTED + KEY_INTRO).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());
								body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_REJECTED + KEY_BODY).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase()).replace('{{contentTitle}}',  contentList[0].Title__c);
							}
							
							Map<String,People_Preference__c> peopleIdToPeoplePrefMap = new Map<String,People_Preference__c>();
							peopleIdToPeoplePrefMap.put(prefObj.people__r.user__c, prefObj);

							String contentLink = baseUrl + Page.PageRedirector.getUrl() + 
													'?siteId=' + contentList[0].site__c +
													'&contentId=' + contentList[0].id +
													'&pageToRedirect=ContentDetailPage' + 
													'&origin=ne&contentType=' + contentList[0].type__c.tolowercase()+
													'&utm_term=content_rejected'+
													'&utm_source=activity_notifications_email'+
													'&utm_medium=email' ;
							String emailBody = getContentActionEmailBody(peopleIdToPeoplePrefMap.get(prefObj.people__r.user__c), introText, body, null, contentLink);

							emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,prefObj.people__r.user__c, SimpplrContext.SEDFromEmail));
						}
					}

					if(!emailObjList.isEmpty()) {
						sendEmails(emailObjList);
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send sendEmailForContentRejection email',e);
		}
	}
	
	public static void sendEmailForContentApproval(String contentId) {
		try{
			String KEY_CONTENT_APPROVED = 'email.notification.content.approved';
			String KEY_CONTENT_MANAGE_APPROVED = 'email.notification.content.manage.approved';
			if(SimpplrContext.enableEmail){
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				List<Simpplr_Content__c> contentList = [select id, title__c,type__c,site__c,Site__r.Chatter_Group_Id__c, Primary_Author__c,Primary_Author__r.User__c, Display_Excerpt__c, Site__r.Name,Primary_Author__r.External_Photo_URL__c, Primary_Author__r.External_Photo_URL_Expiry_Date__c, Primary_Author__r.Full_Name__c from simpplr_content__c where id=:contentId limit 1 ];
				if(!contentList.isEmpty()){
					List<People_Preference__c> peoplePrefList;

					Set<String> targetPeopleIdSet = NotificationDao.getPeopleIdsWithContentNotificationsEnabled(contentList[0].Id);
					targetPeopleIdSet.add(contentList[0].Primary_Author__c);
					Map<String, Object> soqlParamMap = new  Map<String, Object>();
					soqlParamMap.put('soqlParam1', targetPeopleIdSet);
					String query = '';
					
					if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
						soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
						query = 'Select id, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_Content_Submission_Response__c=true and  people__c = :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
					} else {
						query = 'Select id, people__r.user__c, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_Content_Submitted_for_Moderation__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.languagelocalekey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_Content_Submission_Response__c=true and  people__c = :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
					}
					SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
					peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
					initLangKeyValueMap(peoplePrefList);

					for(People_Preference__c prefObj : peoplePrefList) {
						if(!String.valueOf(prefObj.people__r.user__c).equalsIgnoreCase(UserContext.id)) {
							People__c peopleObj = (People__c) prefObj.People__r;
							String userLanguage = Utility.getSimpplrLanguageLocaleKey(prefObj.User__r.languagelocalekey);
                   
							NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
							
							String localizedContentType = LocaleContext.getLocalisedContentTypeLabel(userLanguage, contentList[0].type__c);	

							String subject;
							String introText;
							String body;
							if(((String)prefObj.People__c).equalsIgnoreCase((String)contentList[0].Primary_Author__c)) {
								subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_APPROVED + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase()).replace('{{contentTitle}}',  contentList[0].Title__c);
								introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_APPROVED + KEY_INTRO).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());
								body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_APPROVED + KEY_BODY).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase()).replace('{{contentTitle}}',  contentList[0].Title__c);
							} else {
								subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_APPROVED + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase()).replace('{{contentTitle}}',  contentList[0].Title__c);
								introText = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_APPROVED + KEY_INTRO).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());
								body = LocaleContext.getLabel(userLanguage, KEY_CONTENT_MANAGE_APPROVED + KEY_BODY).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentType}}', localizedContentType.toLowerCase()).replace('{{contentType, lowercase}}', localizedContentType.toLowerCase()).replace('{{contentTitle}}',  contentList[0].Title__c);
							}

							Map<String,People_Preference__c> peopleIdToPeoplePrefMap = new Map<String,People_Preference__c>();
							peopleIdToPeoplePrefMap.put(prefObj.people__r.user__c, prefObj);

							String contentLink = baseUrl + Page.PageRedirector.getUrl() + 
													'?siteId=' + contentList[0].site__c +
													'&contentId=' + contentList[0].id +
													'&pageToRedirect=ContentDetailPage' + 
													'&origin=ne&contentType=' + contentList[0].type__c.tolowercase()+
													'&utm_term=content_approved'+
													'&utm_source=activity_notifications_email'+
													'&utm_medium=email' ;

							String emailBody = getContentActionEmailBody(peopleIdToPeoplePrefMap.get(prefObj.people__r.user__c), introText, body, null, contentLink);

							emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,prefObj.people__r.user__c, SimpplrContext.SEDFromEmail));
							sendEmails(emailObjList);
						}
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send sendEmailForContentApproval email',e);
		}
	}
	
	private static List<User> getManagersOfSelectedSimpplrGroup(String collaborationGrpId)
	{
		List<CollaborationGroupMember> listOfGroupAdmin= new List<CollaborationGroupMember>();
		String baseQuery = 'Select MemberId From CollaborationGroupMember c where CollaborationRole=\'Admin\' and Member.IsActive=true and CollaborationGroupId =:collaborationGrpId';	
		if(SimpplrContext.isCommunitiesEnabled){
			baseQuery = baseQuery+' and CollaborationGroup.NetworkId = null';
		}
		String subCondition = ' Limit 10000';
		String query = baseQuery+subCondition;
		listOfGroupAdmin = Database.query(query);	
		List<String> listOfUserId=new List<String>();
		for(CollaborationGroupMember cgm: listOfGroupAdmin) {
		 	listOfUserId.add(cgm.MemberId);
		}
		return [select id,name,isActive from user where name!=null and isActive=true and id=:listOfUserId];
	}

	public static void sendEmailForContentShare(Simpplr_Content__c simpplrContentObj, String url, ConnectApi.FeedElement feedElementObj) {
		try {
			if(SimpplrContext.enableEmail){
				List<People_Preference__c> peoplePrefList;
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				
				Set<String> targetPeopleIdSet = NotificationDao.getPeopleIdsWithContentNotificationsEnabled(simpplrContentObj.Id);
				targetPeopleIdSet.add(simpplrContentObj.Primary_Author__r.User__c);
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', targetPeopleIdSet);
				soqlParamMap.put('soqlParam2', UserContext.id);
				String query = '';
				
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam3', SimpplrContext.packageName);
					query = 'Select id, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_My_Content_Like_Or_Share__c, People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.LanguageLocaleKey From People_Preference__c where Allow_Simpplr_Emails__c = true  and Email_My_Content_Like_Or_Share__c=true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__c = :soqlParam1 and people__r.User__c !=: soqlParam2 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam3)';
				} else {
					query = 'Select id, People__r.First_Name__c,People__r.Last_Name__c, People__r.About__c, People__r.user__r.userName, Email_My_Content_Like_Or_Share__c, People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.TimeZoneSidKey, User__r.LanguageLocaleKey From People_Preference__c where Allow_Simpplr_Emails__c = true  and Email_My_Content_Like_Or_Share__c=true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__c = :soqlParam1 and people__r.User__c !=: soqlParam2 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePrefList);

				if(SimpplrContext.isFeatureEnabled('Full_External_Search')) {
					FeedDataAdapter.getUserIdsToConvert(feedElementObj);
					FeedDataAdapter.getPeopleFromUserIds();
				}
				
				for(People_Preference__c prefObj : peoplePrefList) {
					People__c peopleObj = (People__c) prefObj.People__r;
					NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
					
					String userLanguage = Utility.getSimpplrLanguageLocaleKey(prefObj.User__r.LanguageLocaleKey);

					String subject, introText;
					String contentTitle = simpplrContentObj.Title__c;
				
					if(((String)prefObj.People__c).equalsIgnoreCase((String)simpplrContentObj.Primary_Author__c)) {
						if('album'.equalsIgnoreCase(simpplrContentObj.Type__c)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_ALBUM_SHARE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_ALBUM_SHARE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('blogpost'.equalsIgnoreCase(simpplrContentObj.Type__c)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_BLOGPOST_SHARE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_BLOGPOST_SHARE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('event'.equalsIgnoreCase(simpplrContentObj.Type__c)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_EVENT_SHARE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{eventTitle}}', contentTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_EVENT_SHARE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('page'.equalsIgnoreCase(simpplrContentObj.Type__c)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_PAGE_SHARE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_PAGE_SHARE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						}
					} else {
						if('album'.equalsIgnoreCase(simpplrContentObj.Type__c)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_ALBUM_SHARE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_MANAGE_ALBUM_SHARE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('blogpost'.equalsIgnoreCase(simpplrContentObj.Type__c)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_BLOGPOST_SHARE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_MANAGE_BLOGPOST_SHARE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('event'.equalsIgnoreCase(simpplrContentObj.Type__c)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_EVENT_SHARE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{eventTitle}}', contentTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_MANAGE_EVENT_SHARE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('page'.equalsIgnoreCase(simpplrContentObj.Type__c)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_PAGE_SHARE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_MANAGE_PAGE_SHARE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						}
					}

					Map<String,People_Preference__c> peopleIdToPeoplePrefMap = new Map<String,People_Preference__c>();
					peopleIdToPeoplePrefMap.put(prefObj.people__r.user__c,prefObj);

					List<ConnectApi.MessageSegment> messageSegments = feedElementObj.body.messageSegments;
					String body = NotificationHelper.getNotificationText(messageSegments);

					String contentLink = baseUrl + Page.PageRedirector.getUrl() + 
												'?siteId=' + simpplrContentObj.site__c +
												'&contentId='+simpplrContentObj.id +
												'&pageToRedirect=ContentDetailPage' + 
												'&origin=ne&contentType=' + simpplrContentObj.type__c.tolowercase()+
												'&utm_term=content_share'+
												'&utm_source=activity_notifications_email'+
												'&utm_medium=email' ;
						
					
					String emailBody = getContentActionEmailBody(peopleIdToPeoplePrefMap.get(prefObj.people__r.user__c), introText, body, null, contentLink);
					
					emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,prefObj.people__r.user__c, SimpplrContext.SEDFromEmail));
				}
				if(!emailObjList.isEmpty()) {
					sendEmails(emailObjList);
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send sendEmailForContentShare email',e);
		}
	}
	
	public static void sendNotificationForContentShare(Simpplr_Content__c simpplrContentObj,ConnectApi.FeedElement feedObj) {
		try {
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();

			Set<String> targetPeopleIdSet = NotificationDao.getPeopleIdsWithContentNotificationsEnabled(simpplrContentObj.Id);
			targetPeopleIdSet.add(simpplrContentObj.Primary_Author__c);

			for(String targetPeopleId : targetPeopleIdSet) {
				NotificationDao.Notification notificationObj = new NotificationDao.Notification();
				notificationObj.snippet = Utility.chompString(simpplrContentObj.Title__c,255);
				notificationObj.type = TYPE_INFORMATION;
				notificationObj.subType = SUB_TYPE_SHARE;
				notificationObj.status = NOTIFICATION_STATUS;
				notificationObj.objectType = simpplrContentObj.Type__c;
				notificationObj.toUser = targetPeopleId;
				notificationObj.objectID = feedObj.id;
				notificationObj.contentId = simpplrContentObj.id;
				notificationObj.siteId = simpplrContentObj.site__c;
				if(targetPeopleId.equalsIgnoreCase(simpplrContentObj.Primary_Author__c)) {
					notificationObj.categoryStr = 'My_Content_Share';
				} else {
					notificationObj.categoryStr = 'Content_Share';
				}

				notificationObjList.add(notificationObj);
			}

			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}
	
	public static void sendNotificationForCampaignFeedShare(Social_Campaign__c socialCampaignObj,ConnectApi.FeedElement feedObj, String chatterGroupId) {
		try {
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			NotificationDao.Notification notificationObj = new NotificationDao.Notification();
			 
			CampaignWrapper.OembedWrapper campaignJSONPreview = (CampaignWrapper.OembedWrapper)JSON.deserialize(socialCampaignObj.URL_Preview_Json__c, CampaignWrapper.OembedWrapper.class);
			logger.logDebug('title ' + campaignJSONPreview.title);
			String title = campaignJSONPreview.title;
			notificationObj.submitterComment = ' shared your Social Campaign "'+Utility.chompString(title,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH)+'"';
			notificationObj.snippet = Utility.chompString(title,255);
			notificationObj.type = TYPE_INFORMATION;
			notificationObj.subType = SUB_TYPE_SHARE;
			notificationObj.status = NOTIFICATION_STATUS;
			notificationObj.objectType = OBJECT_TYPE_FEEDITEM;
			notificationObj.toUser = socialCampaignObj.People__c;
			notificationObj.objectID = feedObj.id;    
			notificationObj.categoryStr = 'Campaign_Share';
			if(String.isNotBlank(chatterGroupid)){
				List<Simpplr_Site__c> siteObj = [Select Id, Chatter_Group_Id__c from Simpplr_Site__c where Chatter_Group_Id__c = :chatterGroupId];	
				if(!siteObj.isEmpty()){
					notificationObj.siteId = siteObj[0].id;   	
				}
				
			}
			
			notificationObjList.add(notificationObj);
			logger.logDebug('notificationObjList ' + notificationObjList);
			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}	
	
	// send notification for adding a video/images to album
	public static void sendNotificationForAddInAlbum(Simpplr_Content__c simpplrContentObj,
																		Integer videoCount, Integer imageCount ) {
		try {
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			NotificationDao notificationDaoObj = new NotificationDao();
			List<String> albumVideoNotificationTargetUserList = notificationDaoObj.getAlbumNotificationTargetUsers(simpplrContentObj.Id);
			Set<String> albumVideoNotificationTargetUserSet = new Set<String>();
			
			if (albumVideoNotificationTargetUserList.size() > 0 ) {
				albumVideoNotificationTargetUserSet.addAll(albumVideoNotificationTargetUserList);
			} 
			albumVideoNotificationTargetUserSet.add(simpplrContentObj.Primary_Author__c);
			albumVideoNotificationTargetUserSet.addAll(NotificationDao.getPeopleIdsWithContentNotificationsEnabled(simpplrContentObj.Id));
			
			String submitterSubText = '';
			String imageText = imageCount > 1 ? 'images' : 'image';
			String videoText = videoCount > 1 ? 'videos' : 'video';
			
			if (videoCount > 0 && imageCount > 0) {
				submitterSubText = ' added '+ imageCount + ' ' + imageText + ' and ' + videoCount + ' ' + videoText;
			} else if (videoCount > 0 && imageCount == 0) {
				submitterSubText = ' added '+ videoCount + ' ' + videoText ;	
			} else if (imageCount > 0 && videoCount == 0) {
				submitterSubText = ' added '+ imageCount + ' ' + imageText ;
			}
			
			for (String receiver : albumVideoNotificationTargetUserSet) {
				NotificationDao.Notification notificationObj = new NotificationDao.Notification();

				Map<String,String> dataMap = new Map<String,String>{
					't' => Utility.chompString(simpplrContentObj.Title__c, 230),
					'v' => String.valueOf(videoCount),
					'i' => String.valueOf(imageCount)
				};
				
				notificationObj.snippet = JSON.serialize(dataMap);
				notificationObj.type = TYPE_INFORMATION;
				notificationObj.subType = SUB_TYPE_ADD_MEDIA_TO_ALBUM;
				notificationObj.status = NOTIFICATION_STATUS;
				notificationObj.objectType = simpplrContentObj.Type__c;
				notificationObj.toUser = receiver;
				notificationObj.objectID = simpplrContentObj.id;
				notificationObj.contentId = simpplrContentObj.id;
				notificationObj.siteId = simpplrContentObj.site__c;
				notificationObj.categoryStr = 'Album_Media_Add';
				notificationObjList.add(notificationObj);
			}
			// to show in moderation history that a user had added photo to open album 
			NotificationDao.Notification notificationObj = new NotificationDao.Notification();
			notificationObj.submitterComment = submitterSubText;
			notificationObj.type = TYPE_INFORMATION;
			notificationObj.subType = SUB_TYPE_ADD_MEDIA_MODERATION;
			notificationObj.status = NOTIFICATION_STATUS;
			notificationObj.objectType = simpplrContentObj.Type__c;
			notificationObj.toUser = UserContext.peopleId;
			notificationObj.objectID = simpplrContentObj.id;
			notificationObj.contentId = simpplrContentObj.id;
			notificationObj.siteId = simpplrContentObj.site__c;
			notificationObjList.add(notificationObj);
			
			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}
	
	public static void sendNotificationForContentAuthorChange(Simpplr_Content__c simpplrContentObj) {
		try {
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			
			Set<String> targetPeopleIdSet = NotificationDao.getPeopleIdsWithContentNotificationsEnabled(simpplrContentObj.Id);
			targetPeopleIdSet.add(simpplrContentObj.Primary_Author__c);

			for(String targetPeopleId : targetPeopleIdSet) {
				NotificationDao.Notification notificationObj = new NotificationDao.Notification();
				if(targetPeopleId.equalsIgnoreCase(simpplrContentObj.Primary_Author__c)) {
					notificationObj.categoryStr = 'Made_Content_Author';
				} else {
					notificationObj.categoryStr = 'Changed_Content_Author';
				}
				notificationObj.snippet = Utility.chompString(simpplrContentObj.Title__c,255);
				notificationObj.type = TYPE_INFORMATION;
				notificationObj.subType = SUB_TYPE_MADE_CONTENT_AUTHOR;
				notificationObj.status = NOTIFICATION_STATUS;
				notificationObj.objectType = simpplrContentObj.Type__c;
				notificationObj.toUser = targetPeopleId;
				notificationObj.objectID = simpplrContentObj.id;
				notificationObj.contentId = simpplrContentObj.id;
				if(!ServiceConstants.TYPE_BLOGPOST.equalsIgnoreCase(simpplrContentObj.Type__c)) {
					notificationObj.siteId = simpplrContentObj.site__c;
				}
				notificationObjList.add(notificationObj);
			}
			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}

	public static void sendNotificationForPublishedOnYourBehalf(Simpplr_Content__c simpplrContentObj) {
		try {
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			
			//Set<String> targetPeopleIdSet = NotificationDao.getPeopleIdsWithContentNotificationsEnabled(simpplrContentObj.Id);
			//targetPeopleIdSet.add(simpplrContentObj.Primary_Author__c);

			//for(String targetPeopleId : targetPeopleIdSet) {
				NotificationDao.Notification notificationObj = new NotificationDao.Notification();
				notificationObj.categoryStr = 'Published_On_Behalf';
				notificationObj.snippet = Utility.chompString(simpplrContentObj.Title__c,255);
				notificationObj.type = TYPE_INFORMATION;
				notificationObj.subType = SUB_TYPE_MADE_CONTENT_AUTHOR;
				notificationObj.status = NOTIFICATION_STATUS;
				notificationObj.objectType = simpplrContentObj.Type__c;
				notificationObj.toUser = simpplrContentObj.Primary_Author__c;
				notificationObj.objectID = simpplrContentObj.id;
				notificationObj.contentId = simpplrContentObj.id;
				if(!ServiceConstants.TYPE_BLOGPOST.equalsIgnoreCase(simpplrContentObj.Type__c)) {
					notificationObj.siteId = simpplrContentObj.site__c;
				}
				notificationObjList.add(notificationObj);
			//}
			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}

	public static void sendNotificationForContentLike(Simpplr_Content__c simpplrContentObj) {
		try {
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			
			Set<String> targetPeopleIdSet = NotificationDao.getPeopleIdsWithContentNotificationsEnabled(simpplrContentObj.Id);
			targetPeopleIdSet.add(simpplrContentObj.Primary_Author__c);

			for(String targetPeopleId : targetPeopleIdSet) {
				NotificationDao.Notification notificationObj = new NotificationDao.Notification();
				notificationObj.snippet = Utility.chompString(simpplrContentObj.Title__c,255);
				notificationObj.type = TYPE_INFORMATION;
				notificationObj.subType = SUB_TYPE_LIKE;
				notificationObj.status = NOTIFICATION_STATUS;
				notificationObj.objectType = simpplrContentObj.Type__c;
				notificationObj.toUser = targetPeopleId;
				notificationObj.objectID = simpplrContentObj.id;
				notificationObj.contentId = simpplrContentObj.id;
				notificationObj.siteId = simpplrContentObj.site__c;
				if(targetPeopleId.equalsIgnoreCase(simpplrContentObj.Primary_Author__c)) {
					notificationObj.categoryStr = 'My_Content_Like';
				} else {
					notificationObj.categoryStr = 'Content_Like';
				}

				notificationObjList.add(notificationObj);
			}

			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}
	
	
	
	public static void sendNotificationForFollow(String targetUserId) {
		try {
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			NotificationDao.Notification notificationObj = new NotificationDao.Notification();
			notificationObj.submitterComment = FOLLOW_SUBJECT;
			notificationObj.type = TYPE_INFORMATION;
			notificationObj.subType = 'Follow';
			notificationObj.status = NOTIFICATION_STATUS;
			notificationObj.objectType = 'People';
			notificationObj.categoryStr = 'Follows_Me'; 
			List<String> peopleIdListTo = Utility.getPeopleIdList(new List<String>{targetUserId});
			if(!peopleIdListTo.isEmpty()){
				notificationObj.toUser = peopleIdListTo[0];
			}
			notificationObj.objectID = UserContext.peopleId;
			notificationObjList.add(notificationObj);
			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}
	
	public static void sendNotificationForGrantingNewsletterAccess (Set<String> userIdSet, 
			Map<String, List<CollaborationGroupMember>> userIdWithCollabGrpMemberMap, 
			Map<String, String> siteIdWithGrpIdMap) {
		try {
			Set<String> totalUsersIdSet = new Set<String>();
			totalUsersIdSet.addAll(userIdSet);
			totalUsersIdSet.addAll(userIdWithCollabGrpMemberMap.keySet());
			List<String> listOfUsersId = new List<String>(totalUsersIdSet);
			Map<String, People__c> userIdToPeopleMap = Utility.userIdToPeopleMap(listOfUsersId);
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			
			for (String targetUserId: totalUsersIdSet) {
				NotificationDao.Notification notificationObj = null;
				
				if (userIdSet.contains(targetUserId)) {
					notificationObj = new NotificationDao.Notification();
					notificationObj.type = TYPE_INFORMATION;
					notificationObj.subType = 'Grant NL Access';
					notificationObj.categoryStr = 'Grant_Newsletter_Access';
					notificationObj.status = NOTIFICATION_STATUS;
					notificationObj.objectType = SimpplrContext.newsletterPlusEnabled ? 'Newsletterv2' : 'Mailer';
					notificationObj.toUser = userIdToPeopleMap.get(targetUserId).Id;
					notificationObjList.add(notificationObj);
				
				} else if (userIdWithCollabGrpMemberMap.containsKey(targetUserId)) {
					
					for (CollaborationGroupMember grpMember: userIdWithCollabGrpMemberMap.get(targetUserId)) {
						notificationObj = new NotificationDao.Notification();
						notificationObj.snippet = Utility.chompString(grpMember.CollaborationGroup.Name,255);
						notificationObj.type = TYPE_INFORMATION;
						notificationObj.subType = 'Grant NL Access';
						notificationObj.categoryStr = 'Grant_Site_Newsletter_Access';
						notificationObj.status = NOTIFICATION_STATUS;
						notificationObj.objectType = SimpplrContext.newsletterPlusEnabled ? 'Newsletterv2' : 'Mailer';
						notificationObj.siteId = siteIdWithGrpIdMap.get(grpMember.CollaborationGroupId);
						notificationObj.toUser = userIdToPeopleMap.get(targetUserId).Id;
						notificationObjList.add(notificationObj);
					}
					
				}
				
			}
			
			sendNotifications(notificationObjList);
			
		} catch (Exception e) {
			logger.logError('Unable to send notification',e);
		}
		
	}

	public static void sendNotificationForOnboardingPrivilege (Set<String> userIdSet) {
		try {
			Set<String> totalUsersIdSet = new Set<String>();
			totalUsersIdSet.addAll(userIdSet);
			List<String> listOfUsersId = new List<String>(totalUsersIdSet);
			Map<String, People__c> userIdToPeopleMap = Utility.userIdToPeopleMap(listOfUsersId);
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			
			for (String targetUserId: totalUsersIdSet) {
				NotificationDao.Notification notificationObj = null;
				
				if (userIdSet.contains(targetUserId)) {
					notificationObj = new NotificationDao.Notification();
					notificationObj.type = TYPE_INFORMATION;
					notificationObj.subType = 'Onboarding Privilege';
					notificationObj.categoryStr = 'Granted_Org_Level_Privilege';
					notificationObj.status = NOTIFICATION_STATUS;
					notificationObj.objectType = 'Onboarding';
					notificationObj.toUser = userIdToPeopleMap.get(targetUserId).Id;
					notificationObjList.add(notificationObj);
				}
				
			}
			
			sendNotifications(notificationObjList);
			
		} catch (Exception e) {
			logger.logError('Unable to send notification',e);
		}
		
	}
	
	public static void notifyForEmployeeAdvocacyAccess (Set<String> peopleIdSet) {
		
		try {
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			
			for (String targetPeopleId: peopleIdSet) {
				NotificationDao.Notification notificationObj = null;
				notificationObj = new NotificationDao.Notification();
				notificationObj.type = TYPE_INFORMATION;
				notificationObj.subType = 'Grant Campaign Access';
				notificationObj.categoryStr = 'Grant_Campaign_Access';
				notificationObj.status = NOTIFICATION_STATUS;
				notificationObj.objectType = 'Social Campaign';
				notificationObj.toUser = targetPeopleId;
				notificationObjList.add(notificationObj);
			}
			
			sendNotifications(notificationObjList);
			
		} catch (Exception e) {
			logger.logError('Unable to send notification',e);
		}
		
	}
	
	public static void sendNotificationForOnholdNewsletter(String targetPeopleId,String newsletterId,String reasonToSendMail) {
		try {
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			NotificationDao.Notification notificationObj = new NotificationDao.Notification();
			if('Unpublished Data'.equalsIgnoreCase(reasonToSendMail)){
				notificationObj.submitterComment = 'Your Scheduled Newsletter is On Hold';
			}else if('Errors found in job'.equalsIgnoreCase(reasonToSendMail)){
				notificationObj.submitterComment = 'Failed to send, your Scheduled Newsletter is On Hold';
			}
			notificationObj.type = TYPE_INFORMATION;
			notificationObj.subType = 'NL OnHold';
			notificationObj.status = NOTIFICATION_STATUS;
			notificationObj.objectType = 'Mailer';
			notificationObj.objectID = newsletterId;
			List<String> peopleIdListTo = new List<String>{targetPeopleId};
			if(!peopleIdListTo.isEmpty()){
				notificationObj.toUser = peopleIdListTo[0];
			}
			notificationObjList.add(notificationObj);
			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}
	
	public static void sendNotificationForEndorsement(String targetPeopleId, String fromId, String topicId, String topicName) {
		try{
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			NotificationDao.Notification notificationObj = new NotificationDao.Notification();
			notificationObj.submitterComment = ' endorsed you for "'+topicName+'"';
			notificationObj.snippet = topicName;
			notificationObj.type = TYPE_INFORMATION;
			notificationObj.subType = 'Endorse';
			notificationObj.status = NOTIFICATION_STATUS;
			notificationObj.objectType = 'People';
			notificationObj.categoryStr = 'Endorses_Me';
			if(string.isNotBlank(fromId)){
				notificationObj.fromUser = fromId;
			}
			notificationObj.toUser = targetPeopleId;
			notificationObj.objectID = targetPeopleId;
			notificationObjList.add(notificationObj);
			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}
	
	@testVisible

	private static string getGreetingWithSubject(String targetUserFirstName, String userLanguage, String subject){
		String greeting = '';
		List<String> formatterList = new List<String>();

		String salutationString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}', targetUserFirstName);
		
		formatterList.add(salutationString.escapeHtml4());
		formatterList.add(subject.escapeHtml4());
		
		greeting = EmailUtility.format(EmailTemplateService.templatePartMap.get('greetingWithSubject'),formatterList);
		
		formatterList.clear();
		return greeting;
	}

	@testVisible 
	private static List<Messaging.SingleEmailMessage> getEmailList(ConnectApi.FeedElement feedObject, List<Simpplr_Content__c> simpplrContentList, Map<String,NotificationHelper.NotificationMetadata> targetIdtoSubjectMap, Map<String, String> mapOfSegmentIdAndBody,List<People_Preference__c> peoplePrefList, Boolean isReplyLike, Map<String, Integer> localisationCountsMap){
		List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
		Map<String,People_Preference__c> peopleIdToPeoplePrefMap = new Map<String,People_Preference__c>();
		
		logger.logDebug('NotificationDispatcher.getEmailList() -------------- :: localisationCountsMap :: ' + localisationCountsMap);

		String filesCount = '';
		String commentsCount = '';
		if(localisationCountsMap != null && localisationCountsMap.containsKey('commentsCount') && localisationCountsMap.get('commentsCount') != null) {
			commentsCount = String.valueOf(localisationCountsMap.get('commentsCount'));
		}
		if(localisationCountsMap != null && localisationCountsMap.containsKey('filesCount') && localisationCountsMap.get('filesCount') != null) {
			filesCount = String.valueOf(localisationCountsMap.get('filesCount'));
		}

		for(People_Preference__c peoplePref : peoplePrefList){
			peopleIdToPeoplePrefMap.put(peoplePref.people__r.user__c,peoplePref);
		}

		NotificationHelper.BrandingInfo brandingInfo = null;
		for(String targetUser : targetIdToSubjectMap.keySet()){
			if(targetIdToSubjectMap.get(targetUser).prefSettingType != null && targetIdToSubjectMap.get(targetUser).subject != null){
				if(peopleIdToPeoplePrefMap.get(targetUser) != null) {
					String emailSubject ;
					String emailHeading;
					emailSubject = targetIdToSubjectMap.get(targetUser).subject;
					if (String.isNotBlank(targetIdToSubjectMap.get(targetUser).heading)){
						emailHeading = targetIdToSubjectMap.get(targetUser).heading;
					} else {
						emailHeading = emailSubject;
					}
					
					// if segment disabled.. brandingInfo just needed to be populated once
					if(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled) {
						brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)peopleIdToPeoplePrefMap.get(targetuser).People__r);
					} else {
						brandingInfo =  EmailUtility.getBrandingInfo4People(null);
					}
					
					String userLanguage = Utility.getSimpplrLanguageLocaleKey(peopleIdToPeoplePrefMap.get(targetUser).User__r.languagelocalekey);

					String body = null;
					if(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled) {
						body = mapOfSegmentIdAndBody.get(peopleIdToPeoplePrefMap.get(targetUser).People__r.Segment__r.Id);
					} else {
						body = mapOfSegmentIdAndBody.get('APP_CONTEXT');
					}

					String KEY_COMMON_IN = 'common.in';
					String KEY_COMMON_ON = 'email.common.on.digest';
					String KEY_COMMON_TO = 'common.to';
					String KEY_COMMON_ARCHIVED_SITE = 'common.inactive';
					String KEY_COMMON_PRIVATE_SITE = 'common.private';
					String KEY_COMMON_UNLISTED_SITE = 'common.unlisted';
					String KEY_COMMON_SHARED_CONTENT = 'email.common.shared.content';
					String KEY_COMMON_SHARED_POST = 'email.common.shared.post';

					String emailBodyTitle = NotificationHelper.createEmailTitle(feedObject, simpplrContentList, userLanguage);
					body = body.replace(NotificationHelper.EMAIL_TITLE_PLACEHOLDER, emailBodyTitle);

					if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('REPLIES ON POSTS I MADE')){
						if(peopleIdToPeoplePrefMap.get(targetUser).Email_Comments_On_My_Post__c){
							List<String> formatterList = new List<String>();
							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)){
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading));
							} else {
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading));
							}
							
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_X_REPLIES_PL).replace('{{count}}', commentsCount));

							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}
							String tempBody = body;
							tempBody = EmailUtility.format(tempBody, formatterList);
							formatterList.clear();

							tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
							tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);
							emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
						}
					} else if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('MENTIONS ME IN REPLY')) {
						if(peopleIdToPeoplePrefMap.get(targetUser).Email_Posts_To_Me__c){
							List<String> formatterList = new List<String>();


							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)) {
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading));
							} else {
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading));
							}

							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_X_REPLIES_PL).replace('{{count}}', commentsCount));
							
							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}

							String tempBody = body;
							tempBody = EmailUtility.format(tempBody, formatterList);
							formatterList.clear();
							
							tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
							tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);

							emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
						}
					} else if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('REPLIES ON POSTS I LIKE')) {
						if(peopleIdToPeoplePrefMap.get(targetUser).Email_Comments_On_Post_I_Like__c){
							List<String> formatterList = new List<String>();
							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)){
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading));
							} else {
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading));
							}
							
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_X_REPLIES_PL).replace('{{count}}', commentsCount));
							
							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}

							String tempBody = body;
							tempBody = EmailUtility.format(tempBody, formatterList);
							formatterList.clear();
							tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
							tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);
							emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
						}
					} else if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('REPLIES AFTER ME')) {
						if(peopleIdToPeoplePrefMap.get(targetUser).Email_Comments_After_Me__c){
							List<String> formatterList = new List<String>();
							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)){
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading));
							} else {
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading));
							}
							
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_X_REPLIES_PL).replace('{{count}}', commentsCount));
							
							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}

							String tempBody = body;
							tempBody = EmailUtility.format(tempBody, formatterList);
							formatterList.clear();
							tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
							tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);
							emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
						}
					} else if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('MENTIONS ME IN POST')) {
						if(peopleIdToPeoplePrefMap.get(targetUser).Email_Posts_To_Me__c){
							List<String> formatterList = new List<String>();
							formatterList.add('');
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_X_REPLIES_PL).replace('{{count}}', commentsCount));

							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}

							body = EmailUtility.format(body, formatterList);
							formatterList.clear();

							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)){
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading));
							} else {
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading));
							}
							
							formatterList.add(body);
							String tempBody = EmailUtility.format(EmailtemplateService.templatePartMap.get('finalTemplate'),formatterList);
							formatterList.clear();

							tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
							tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);
							emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
						}
					} else if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('SHARES A POST I MADE')) {
						if(peopleIdToPeoplePrefMap.get(targetUser).Email_Shares_My_Post__c){
							List<String> formatterList = new List<String>();
							formatterList.add('');
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_X_REPLIES_PL).replace('{{count}}', commentsCount));
							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}

							body = EmailUtility.format(body, formatterList);
							formatterList.clear();

							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)){
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading));
							} else {
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading));
							}
							formatterList.add(body);
							String tempBody = EmailUtility.format(EmailtemplateService.templatePartMap.get('finalTemplate'),formatterList);
							formatterList.clear();
							tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
							tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);
							emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
						}
					} else if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('POSTS ON MY PROFILE')) {
						if(peopleIdToPeoplePrefMap.get(targetUser).Email_Posts_To_Me__c){
							List<String> formatterList = new List<String>();
							formatterList.add('');
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_X_REPLIES_PL).replace('{{count}}', commentsCount));
							
							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}

							body = EmailUtility.format(body, formatterList);
							formatterList.clear();
							
							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)){
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading));
							} else {
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading));
							}
							formatterList.add(body);
							String tempBody = EmailUtility.format(EmailtemplateService.templatePartMap.get('finalTemplate'),formatterList);
							formatterList.clear();
							tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
							tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);
							emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
						}
					} else if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('POSTS ON CONTENT I PUBLISHED')
								|| targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('POSTS ON CONTENT I MANAGE')) {
						if(peopleIdToPeoplePrefMap.get(targetUser).Email_My_Content_Post__c){
							List<String> formatterList = new List<String>();
							formatterList.add('');
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_X_REPLIES_PL).replace('{{count}}', commentsCount));
							
							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}
							
							body = EmailUtility.format(body, formatterList);
							formatterList.clear();
							
							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)){
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading));
							} else {
								formatterList.add(getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading));
							}
							formatterList.add(body);
							String tempBody = EmailUtility.format(EmailtemplateService.templatePartMap.get('finalTemplate'),formatterList);
							formatterList.clear();
							tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
							tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);
							emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
						}
					} else if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('LIKES A POST OR REPLY I MADE')) {
						if(peopleIdToPeoplePrefMap.get(targetUser).Email_Like_My_Post_Or_Comment__c){
							String greetingText = '';
							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)){
								greetingText = getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading);
							} else {
								greetingText = getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading);
							}
							
							List<String> formatterList = new List<String>();
							
							if(isReplyLike){
								formatterList.add(greetingText);
							} else {
								formatterList.add('');
							}

							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_X_REPLIES_PL).replace('{{count}}', commentsCount));

							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}

							body = EmailUtility.format(body, formatterList);
							formatterList.clear();
							
							String tempBody = '';
							if(isReplyLike){
								tempBody = EmailUtility.format(body, formatterList);
								formatterList.clear();
								tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
								tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);
								emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
								
							} else {
								formatterList.add(greetingText);
								formatterList.add(body);
								tempBody = EmailUtility.format(EmailtemplateService.templatePartMap.get('finalTemplate'),formatterList);
								formatterList.clear();
								tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
								emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
							}
							
						}
					} else if(targetIdToSubjectMap.get(targetUser).prefSettingType.equalsIgnoreCase('recognized')) {
							String greetingText = '';
							if(String.isNotBlank(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c)){
								greetingText = getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.First_Name__c, userLanguage, emailHeading);
							} else {
								greetingText = getGreetingWithSubject(peopleIdToPeoplePrefMap.get(targetUser).People__r.Last_Name__c, userLanguage, emailHeading);
							}
							
							List<String> formatterList = new List<String>();
							formatterList.add('');
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON));
							formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_ORG_POST));
							formatterList.add('');
							if('1'.equals(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED).replace('{{count}}', filesCount));
							} else if(String.isNotBlank(filesCount)) {
								formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_FILE_ATTACHED_PL).replace('{{count}}', filesCount));
							}

							body = EmailUtility.format(body, formatterList);
							formatterList.clear();
							
							String tempBody = '';
							formatterList.add(greetingText);
							formatterList.add(body);
							tempBody = EmailUtility.format(EmailtemplateService.templatePartMap.get('finalTemplate'),formatterList);
							formatterList.clear();
							tempBody = getEmailTemplateWithNewHeaderFooter(peopleIdToPeoplePrefMap.get(targetuser), tempBody, brandingInfo);
							tempBody = getBodyWithLocalizedDateTime(tempBody,peopleIdToPeoplePrefMap.get(targetUser).User__r.timeZonesidkey, userLanguage, listOfCreatedDateTime);
							emailObjList.add(EmailUtility.getSingleEmailElement(emailSubject, tempBody, targetUser, SimpplrContext.SEDFromEmail));
					}
				}
			}
		}
		return emailObjList;
	}

	public static void checkAccessAndSendEmail(ConnectApi.FeedElement feedObject, List<Simpplr_Content__c> simpplrContentList, Map<String, NotificationDao.Notification> notificationObjMap,Map<String,NotificationHelper.NotificationMetadata> targetIdtoSubjectMap, Map<String, String> mapOfSegmentIdAndBody,List<People_Preference__c> peoplePrefList, Boolean isReplyLike, Map<String, Integer> localisationCountsMap){
		String feedId = feedObject.id;
		List<UserRecordAccess>  userFeedParentAccessList = new List<UserRecordAccess>();
		for(String userId : notificationObjMap.keySet()){
			userFeedParentAccessList = [SELECT RecordId, HasReadAccess FROM UserRecordAccess WHERE UserId = :userId AND RecordId = :feedId];	
			if(!userFeedParentAccessList.isEmpty() && (userFeedParentAccessList[0].HasReadAccess == false)){
				if(targetIdtoSubjectMap.containsKey(userId)){
					targetIdtoSubjectMap.remove(userId);	
				}
				if(notificationObjMap.containsKey(userId)){
					notificationObjMap.remove(userId);		
				}
			}
		}
		sendNotifications(notificationObjMap.values());
		
		if( !mapOfSegmentIdAndBody.keySet().isEmpty() ){
			List<Messaging.SingleEmailMessage> emailList = new List<Messaging.SingleEmailMessage>();
			emailList = getEmailList(feedObject,simpplrContentList,targetIdToSubjectMap,mapOfSegmentIdAndBody,peoplePrefList,isReplyLike, localisationCountsMap);
			if(!emailList.isEmpty()){
				sendEmails(emailList);
			}
		}
	}	
	
	@testVisible 
	private static Map<String, String> getFinalCommentEmailBody(Map<String, NotificationHelper.EmailWrapper> segmentIdAndEmailWrapperMap, Map<String, NotificationHelper.BrandingInfo> brandingInfoMap, String feedItemId, Integer totalComments,List<Simpplr_Content__c> simpplrContentList, Map<String, String> commentOwnerIdToExtPhotoUrlMap,Map<String,String> userIdToLanguageLocaleKeyMap, String likedReplyId, boolean isReplyLike){
		Map<String, String> mapOfSegmentIdAndBody = new Map<String, String>();
		NotificationHelper.EmailWrapper emailWrapperObj = null;

		for(String segmentId : segmentIdAndEmailWrapperMap.keySet()) {
			NotificationHelper.BrandingInfo brandingInfo =  brandingInfoMap.get(segmentId);
			emailWrapperObj = segmentIdAndEmailWrapperMap.get(segmentId);
			
			// "Original post" text - (Translation/Localisation)
			//formatterList.add(ORGINAL_POST_LABEL_PLACEHOLDER);
			
			//0=OPTable 1=LastThreeCommentsTable
			String originalPost = getOriginalPostHtmlBodyWithTemplate(emailWrapperObj, totalComments,feedItemId,simpplrContentList, commentOwnerIdToExtPhotoUrlMap);
			String commentBody;
			if(isReplyLike){
				commentBody = getPrimaryLikedCommentBody(emailWrapperObj.commentList, feedItemId, commentOwnerIdToExtPhotoUrlMap, likedReplyId, brandingInfo);
			} else {
				commentBody = getPrimaryCommentBody(emailWrapperObj.commentList, feedItemId, commentOwnerIdToExtPhotoUrlMap, brandingInfo);
			}

			List<String> formatterList = new List<String>();
			//0=greeting with subject,  1=commentBody, 2=originalPost
			formatterList.add('{0}');//greeting with subject
			formatterList.add(commentBody);
			formatterList.add(originalPost);

			String finalCommentEmailTemplate = EmailUtility.format(EmailTemplateService.templatePartMap.get('finalCommentEmailTemplate'),formatterList);
			formatterList.clear();
			
			mapOfSegmentIdAndBody.put(segmentId, finalCommentEmailTemplate);
		}
		
		return mapOfSegmentIdAndBody;
		
	}
	
	@testVisible 
	private static String getPrimaryCommentBody(List<NotificationHelper.EmailCommentWrapper> commentList, String feedItemId, Map<String,String> commentOwnerIdToExtPhotoUrlMap, NotificationHelper.BrandingInfo brandingInfo){
		String primaryCommentBody = '';
		Integer indexOfLastComment = 1;
        for(NotificationHelper.EmailCommentWrapper comments : commentList) {
            if(indexOfLastComment == commentList.size()) {
		       	primaryCommentBody = getPrimaryCommentTemplate(comments, feedItemId, commentOwnerIdToExtPhotoUrlMap, brandingInfo);
            }
            indexOfLastComment = indexOfLastComment +1;
        }
        
		return primaryCommentBody;
	}
	
	@testVisible 
	private static String getPrimaryCommentTemplate(NotificationHelper.EmailCommentWrapper comment, String feedItemId, Map<String,String> commentOwnerIdToExtPhotoUrlMap, NotificationHelper.BrandingInfo brandingInfo){
		
		List<String> formatterList = new List<String>();
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
		
		formatterList.add(viewLink(feedItemId));
		formatterList.add(viewLink(feedItemId));
		formatterList.add(brandingInfo.general_primaryColor);
		formatterList.add(VIEW_LABEL_PLACEHOLDER);

		String viewLink = EmailUtility.format(EmailTemplateService.templatePartMap.get('viewLink'),formatterList);
		
		formatterList.clear();  
		
		//0=profileImage 1=title 2=body 3=view
		formatterList.add(profileDisplayIcon);
		formatterList.add(EmailUtility.htmlBold(comment.title));
		formatterList.add(comment.body+comment.contentBody);
		formatterList.add(viewLink);
		String primaryCommentSection = EmailUtility.format(EmailTemplateService.templatePartMap.get('primaryCommentSection'),formatterList);
		formatterList.clear();
		return primaryCommentSection;
		
	}
	
	@testVisible 
	private static String getPrimaryLikedCommentBody(List<NotificationHelper.EmailCommentWrapper> commentList, String feedItemId, Map<String,String> commentOwnerIdToExtPhotoUrlMap, String likedReplyId, NotificationHelper.BrandingInfo brandingInfo){
		String primaryCommentBody = '';
		Map<String, Object> soqlParamMap = new  Map<String, Object>();
		soqlParamMap.put('soqlParam1', likedReplyId);
		String query = 'select Feed_Data__c from Feed_Cache__c where Feed_Comment_Id__c =:soqlParam1 AND Is_Deleted__c = false';
		SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.WITHOUT);
		List<Feed_Cache__c> feedCacheRecord = (List<Feed_Cache__c>)SIMPESAPI.accessController().queryAsUser(query, soqlParamMap);
        JSONFeedElementWrapper feedElementWrapperObj = new JSONFeedElementWrapper();
        if(String.isNotBlank(feedCacheRecord[0].Feed_Data__c)){
        	feedElementWrapperObj = JSONFeedElementWrapper.parse(feedCacheRecord[0].Feed_Data__c);
        }

		String feedCommentBody = commentList[0].body;

	    if(feedElementWrapperObj.capabilities.comments.page.total>0){
	   		List<JSONFeedElementWrapper.Items_Z> commentItemsList = feedElementWrapperObj.capabilities.comments.page.items;
        	for(JSONFeedElementWrapper.Items_Z  items : commentItemsList) {
        		if(items.id == likedReplyId || Test.isRunningTest()){
       				primaryCommentBody = getPrimaryLikedCommentTemplate(items, feedItemId, feedCommentBody, commentOwnerIdToExtPhotoUrlMap, brandingInfo);
       				break;
        		}
        	}
	    }
	    return String.isBlank(primaryCommentBody) ? '' : primaryCommentBody.unescapeHtml4();
	}
	
	@testVisible 
	private static String getPrimaryLikedCommentTemplate(JSONFeedElementWrapper.Items_Z  items, String feedItemId, String feedCommentBody, Map<String,String> commentOwnerIdToExtPhotoUrlMap, NotificationHelper.BrandingInfo brandingInfo){
		
		List<String> formatterList = new List<String>();

		String profileDisplayIcon = getProfileDisplayIcon(commentOwnerIdToExtPhotoUrlMap.get(items.user.id));
		
		formatterList.add(viewLink(feedItemId));
		formatterList.add(viewLink(feedItemId));
		formatterList.add(brandingInfo.general_primaryColor);
		formatterList.add(VIEW_LABEL_PLACEHOLDER);

		String viewLink = EmailUtility.format(EmailTemplateService.templatePartMap.get('viewLink'),formatterList);
		
		formatterList.clear();
		
		//0=profileImage 1=title 2=body 3=view
		formatterList.add(profileDisplayIcon);
		//formatterList.add(comment.title);
		formatterList.add(EmailUtility.htmlBold((SimpplrContext.isFeatureEnabled('Full_External_Search') && FeedDataAdapter.mapUserIdToPeople.containsKey(items.user.id) ? FeedDataAdapter.mapUserIdToPeople.get(items.user.id).Full_Name__c : items.user.Name)));
		String body = '';
        List<String> feedBodyTokenList = new List<String>();
        Boolean externalAppLinks = false;
		for( JSONFeedElementWrapper.MessageSegments_Y bodySegments: items.body.messageSegments) {
            if(bodySegments.type =='Text') {
             	//text segment
                String tempFeedBody = bodySegments.text;
                if('\n'.equalsIgnoreCase(tempFeedBody) || String.isBlank(feedCommentBody)) {
                	tempFeedBody = '';
                }

                if(String.isNotBlank(tempFeedBody) && tempFeedBody.containsIgnoreCase(ServiceConstants.FEED_EXT_FILE_SEPRATOR)){
	            	externalAppLinks = true;
	            	tempFeedBody = tempFeedBody.remove(ServiceConstants.FEED_EXT_FILE_SEPRATOR);	            	
                }
                                
                if(String.isNotBlank(tempFeedBody)) {
                    feedBodyTokenList.add(tempFeedBody);
                }

            } else if(bodySegments.type =='Link'){
                //link segment                
                if(externalAppLinks && bodySegments.url.containsIgnoreCase('provider=')){
					PageReference externalAppPageRefLink = new PageReference(bodySegments.url);
                	String externalAppLinkBody = '';
                	List<String> formatterListForContent = new List<String>();
                	
					formatterListForContent.add(bodySegments.url.trim());
					formatterListForContent.add(externalAppPageRefLink.getParameters().get('fileName'));
					if(externalAppPageRefLink.getParameters().get('size') != null){
						formatterListForContent.add(Utility.byteToHumanReadableFormate(Decimal.valueOf(externalAppPageRefLink.getParameters().get('size'))));
					} else{
						formatterListForContent.add('');	
					}
					
					formatterListForContent.add(bodySegments.url.trim());
					formatterListForContent.add(brandingInfo.general_primaryColor);
					externalAppLinkBody = EmailUtility.format(externalAppLinkBody, formatterListForContent);
					if(String.isNotBlank(externalAppLinkBody)){
						feedBodyTokenList.add(externalAppLinkBody);	
					}		
               
                } else{                
	                String tempFeedBody = '<a style="color: #'+brandingInfo.general_primaryColor+'; text-decoration: none; word-break: break-word;" target="_blank" href=\"' + EmailUtility.getLinkWithFromEmail(bodySegments.url) + '\">' + bodySegments.text + ' </a>';
	                feedBodyTokenList.add(tempFeedBody); 
                }         
            } else if(bodySegments.type =='Mention') {
                 //If the segment is a mention
                //mention segment for user
                if(bodySegments.record.type == 'User') {
                    feedBodyTokenList.add('<a style="color: #'+brandingInfo.general_primaryColor+'; text-decoration: none; word-break: break-word;" href=\"' + baseUrl + Page.PageRedirector.getUrl() + '?userId=' + bodySegments.record.id +'&pageToRedirect='+Pages.ProfileAbout+ '&origin=ne\">@' + (SimpplrContext.isFeatureEnabled('Full_External_Search') && FeedDataAdapter.mapUserIdToPeople.containsKey(bodySegments.record.id) ? FeedDataAdapter.mapUserIdToPeople.get(bodySegments.record.id).Full_Name__c : bodySegments.record.displayName) + ' </a>');
                } else if(bodySegments.record.type == 'CollaborationGroup') {
                    //mention segment for groups
                    feedBodyTokenList.add('<a style="color: #'+brandingInfo.general_primaryColor+'; text-decoration: none; word-break: break-word;" target="_blank" href=\"'+baseUrl + Page.PageRedirector.getUrl() + '?chatterGroupId=' + bodySegments.record.id + '&pageToRedirect='+ServiceConstants.SITE_LANDING_PAGE_STRING+'&origin=ne\">@'+bodySegments.record.name+' </a>');
                    if(bodySegments.record.additionalLabel != null){
                    	if('Archived'.equalsIgnoreCase(bodySegments.record.additionalLabel)){
                    		feedBodyTokenList.add('<span style="color:#999999;"> (Inactive)</span>');
                    	}else if('Private'.equalsIgnoreCase(bodySegments.record.additionalLabel)){
                    		feedBodyTokenList.add('<span style="color:#999999;"> ('+bodySegments.record.additionalLabel+')</span>');
                    	}else if('Unlisted'.equalsIgnoreCase(bodySegments.record.additionalLabel)){
                    		feedBodyTokenList.add('<span style="color:#999999;"> ('+bodySegments.record.additionalLabel+')</span>');
                    	}
                    } 
                }
           } else if(bodySegments.type == 'HashTag') {
                //mention segment for topics
                String tempFeedBody='';
                tempFeedBody = '<a style="color:#'+brandingInfo.general_primaryColor+';text-decoration:none;word-break:break-word;font-size:15px" target="_blank" href=\"' + baseUrl+Page.PageRedirector.getUrl() + '?topicName=' + EncodingUtil.urlEncode(bodySegments.tag, 'utf-8')+ '&pageToRedirect='+Pages.TopicFeed+'&origin=de\">#' + bodySegments.tag + ' </a>';
                feedBodyTokenList.add(tempFeedBody);
            
			} else if(bodySegments.type == 'MarkupBegin'){
		        //html mark up begin                       
		        feedBodyTokenList.add('<'+bodySegments.htmlTag+'>');
		        
		    } else if(bodySegments.type == 'MarkupEnd'){
		        //html mark up end
		        feedBodyTokenList.add('</'+bodySegments.htmlTag+'>');
		    }
		} 
		if(items.capabilities.content != null) {
			feedBodyTokenList.add(NotificationHelper.getEmailContentBodyForAttachedFile());
		}  
		for(String bodyTokens: feedBodyTokenList) {
			body = body + bodyTokens;
		}

		formatterList.add(body);
		formatterList.add(viewLink);
		String primaryCommentSection = EmailUtility.format(EmailTemplateService.templatePartMap.get('primaryCommentSection'),formatterList);
		formatterList.clear();
		return primaryCommentSection;
		
	}
	
	@testVisible
	private static string viewLink(String feedItemId){
		string viewLink = '';
		viewLink = baseUrl + Page.PageRedirector.getUrl() + '?feedId=' + feedItemId +'&pageToRedirect='+Pages.HomeFeedSinglePost+'&origin=ne';
		return viewLink;
	}
	
	

	
/* ****************************************************************************************************************************************************** */	
	@testvisible
	private static Simpplr_Site__c getParentSiteObj(String feedParentId){
		Simpplr_Site__c siteObj = new Simpplr_Site__c();
		List<Simpplr_Site__c> siteList = [Select Id, Show_In_Simpplr__c from Simpplr_Site__c where Chatter_Group_Id__c =: feedParentId limit 1];
		if(!siteList.isEmpty()){
			siteObj = siteList[0];
		}
		return siteObj;
	} 
	
	
	public static void sendFeedItemNotificationsAndEmail(List<FeedItem> feedItemList, String source) {
		try {
			FeedItem feedItemObj = feedItemList[0];
			Boolean isSimpplrQuestionPost = String.isNotBlank(feedItemObj.Body) && feedItemObj.Body.contains(ServiceConstants.QNA_QUESTION_SEPERATOR);
			if(isSimpplrQuestionPost) {
				return;
			}
			if(!feedItemObj.type.equalsIgnoreCase('PollPost') || (feedItemObj.type.equalsIgnoreCase('PollPost') && String.isNotBlank(source))){
				Map<String, String> mapOfSegmentIdAndBody = new Map<String, String>();
				String feedParentId = feedItemObj.parentId;
				String parentSiteId;
				Map<String, NotificationDao.Notification> notificationObjMap = new Map<String, NotificationDao.Notification>();

				Map<String,NotificationHelper.NotificationMetadata> targetIdToSubjectMap = new Map<String,NotificationHelper.NotificationMetadata>();
				List<People_Preference__c> peoplePrefList = new List<People_Preference__c>();
				
				String contentId;
				if(feedParentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix)){
					contentId = feedParentId;
				} 
				
				Map<String,Simpplr_Content__c> simpplrContentMap = new Map<String,Simpplr_Content__c>();
				if(String.isNotBlank(contentId)) {
					simpplrContentMap = new Map<String,Simpplr_Content__c>([select id,Name, type__c, title__c,Primary_Author__c,Primary_Author__r.User__c, createdById,Site__c, Site__r.Chatter_Group_Id__c, Site__r.Show_In_Simpplr__c, Display_Excerpt__c from Simpplr_Content__c where id = :contentId]);
				}

				Boolean isSiteAvailableInSimpplr = true;
				if(!simpplrContentMap.isEmpty() && String.isNotBlank(simpplrContentMap.get(contentId).Site__c)) {
					parentSiteId = simpplrContentMap.get(contentId).Site__c;
					isSiteAvailableInSimpplr = simpplrContentMap.get(contentId).Site__r.Show_In_Simpplr__c;
				} else if('0F9'.equals(feedParentId.subString(0,3))){
					Simpplr_Site__c siteObj = getParentSiteObj(feedParentId);
					parentSiteId = siteObj.Id;
					isSiteAvailableInSimpplr = siteObj.Show_In_Simpplr__c;
				}
				
				if(isSiteAvailableInSimpplr) {
					String postParentId = feedItemObj.parentId;
					Boolean isPostOnContent = postParentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix);
					List<Simpplr_Content__c> simpplrContentList = new List<Simpplr_Content__c>();
					if(!simpplrContentMap.isEmpty()){
						simpplrContentList = simpplrContentMap.values();
					}
					
					ConnectApi.FeedElement feedObject = null;

					Integer filesCount = 0;

					if((!isPostOnContent) || (isPostOnContent && SimpplrContext.isCommentsAllowed)) {
						feedObject = NotificationHelper.getFeedElementObject(new List<FeedItem>{feedItemObj},source);
						if(SimpplrContext.isFeatureEnabled('Full_External_Search')) {
							FeedDataAdapter.getUserIdsToConvert(feedObject);
							FeedDataAdapter.getPeopleFromUserIds();
						}
						filesCount = getFilesCountForFeedPost(feedObject);
						
						NotificationHelper.NotificationMetadata emailMetaDataObj = NotificationHelper.getNotificationInfo(feedItemObj, feedObject);
						Set<String> targetUserIdSet = getTargetUserIdSet(emailMetaDataObj,simpplrContentMap);
						if(String.isNotBlank(contentId)) {
							targetUserIdSet.addAll(NotificationDao.getUserIdsWithContentNotificationsEnabled(contentId));
						}

						Map<String, String> userIdToPeopleIdMap =new Map<String,String>();
						List<People__c> peopleList = [select id, user__c from people__c where user__c IN:targetUserIdSet];
						for(People__c people: peopleList) {
							userIdToPeopleIdMap.put(people.user__c, people.id);
						}
						Map<String, Object> soqlParamMap = new  Map<String, Object>();
						soqlParamMap.put('soqlParam1', targetUserIdSet);
						String query = '';

						if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
							soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
							query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, '
										+ ' Email_Endorses_Me__c, Email_Follows_Me__c, Email_Like_My_Post_Or_Comment__c, Email_Posts_To_Me__c, ' 
										+ ' Email_My_Content_Like_Or_Share__c, Email_My_Content_Post__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey, '
										+ ' Email_Shares_My_Post__c, People__c FROM People_Preference__c Where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__r.User__c IN :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
						} else {
							query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, ' 
										+ ' Email_Endorses_Me__c, Email_Follows_Me__c, Email_Like_My_Post_Or_Comment__c, Email_Posts_To_Me__c, ' 
										+ ' Email_My_Content_Like_Or_Share__c, Email_My_Content_Post__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey, '
										+ ' Email_Shares_My_Post__c, People__c FROM People_Preference__c Where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__r.User__c IN :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
						}
						SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
						peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
						initLangKeyValueMap(peoplePrefList);
						
						Map<String, NotificationHelper.BrandingInfo> brandingInfoMap = new Map<String, NotificationHelper.BrandingInfo>();
						Map<String, People_Preference__c> peoplePreferMap = new Map<String, People_Preference__c>();
						for(People_Preference__c peoplePreferObj : peoplePrefList){
							peoplePreferMap.put(peoplePreferObj.people__r.user__c, peoplePreferObj);
							
							if(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled) {
								if(brandingInfoMap.containsKey(peoplePreferObj.People__r.Segment__r.Id) == false) {
									brandingInfoMap.put(peoplePreferObj.People__r.Segment__r.Id, EmailUtility.getBrandingInfo4People(peoplePreferObj.People__r));
								}
							}
						}
						
						if( !(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled)) {
							brandingInfoMap.put('APP_CONTEXT', EmailUtility.getBrandingInfo4People(null));
						}
						String userLanguage;
						for(String targetUserId: targetUserIdSet) {
							if(!targetUserId.equalsIgnoreCase(UserContext.id)) {
								userLanguage = null;
								if(peoplePreferMap.get(targetUserId) != null) {
									userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePreferMap.get(targetUserId).User__r.languagelocalekey);
								}
								NotificationDao.Notification notificationObj = new NotificationDao.Notification();

								emailMetaDataObj.isRecognition = false;
								String feedItemMsgTempStr = emailMetaDataObj.snippet;
								FeedElementWrapper.RecognitionResponseInfo recognitionResponseObj;
								if (feedItemMsgTempStr.indexOf(ServiceConstants.RECOGNITION_FILE_SEPRATOR) >= 0) { // Recognition Post identify elements by us using \u2063\uFEFF\uFEFF\u200b\uFEFF\uFEFF\u2063 
									ConnectAPI.FeedItem feedItemCastedObj = (ConnectApi.FeedItem)feedObject;
									String feedId = feedItemCastedObj.originalFeedItem != null ? feedItemCastedObj.originalFeedItem.Id : feedItemObj.Id;
									recognitionResponseObj = NotificationHelper.getRecognition(feedId);
									emailMetaDataObj.isRecognition = true;
									emailMetaDataObj.snippet = recognitionResponseObj.recognitionAwardName;
								}

								NotificationHelper.NotificationMetadata notiMetaObject = getNotificationDetails(emailMetaDataObj, simpplrContentMap, targetUserId, userLanguage, feedItemObj);
								NotificationHelper.NotificationMetadata notiEmailMetaObject = getEmailNotificationDetails(emailMetaDataObj,simpplrContentMap,targetUserId, feedItemObj, peoplePreferMap);

								if(!simpplrContentMap.isEmpty()){
									notificationObj.contentId = postParentId;
									notificationObj.siteId = SimpplrContentMap.get(postParentId).Site__c;
								} else if(String.isNotBlank(parentSiteId)){
									notificationObj.siteId = parentSiteId;
								}

								if('MENTIONS ME IN POST'.equalsIgnoreCase(notiMetaObject.prefSettingType)){
									notificationObj.snippet = Utility.chompString(notiMetaObject.snippet,255);
								} else if(!simpplrContentList.isEmpty()) {
									notificationObj.snippet = Utility.chompString(simpplrContentList[0].Title__c,255);
								} else {
									notificationObj.snippet = Utility.chompString(notiMetaObject.snippet,255);
								}
								
								notificationObj.type = notiMetaObject.type;
								notificationObj.status = notiMetaObject.status;
								notificationObj.subType = notiMetaObject.subType;
								
								notificationObj.objectID = feedItemObj.id;
								notificationObj.objectType = notiMetaObject.objectType;

								if('SHARES A POST I MADE'.equalsIgnoreCase(notiMetaObject.prefSettingType)){
									notificationObj.categoryStr = notiMetaObject.isRecognition ? 'Shares_My_Recognition' : 'Shares_My_Post';

									NotificationHelper.JSONConvertor feedElementActor = (NotificationHelper.JSONConvertor)JSON.deserialize(JSON.serialize(feedObject),NotificationHelper.JSONConvertor.class);
									if(feedElementActor.originalFeedItem != null){
										notificationObj.parentObjectID = feedElementActor.originalFeedItem.id;
									}
									
								} else if('POSTS ON CONTENT I PUBLISHED'.equalsIgnoreCase(notiMetaObject.prefSettingType)
										|| 'POSTS ON CONTENT I MANAGE'.equalsIgnoreCase(notiMetaObject.prefSettingType)){
									if(filesCount != null && filesCount > 0) {
										notificationObj.categoryStr = 'My_Content_File_Post';
									} else {
										if(targetUserId.equalsIgnoreCase(simpplrContentList[0].Primary_Author__r.User__c)) {
											notificationObj.categoryStr = 'My_Content_Post';
										} else {
											notificationObj.categoryStr = 'Content_Post';
										}
									}

								} else if('POSTS ON MY PROFILE'.equalsIgnoreCase(notiMetaObject.prefSettingType)){
									if(filesCount != null && filesCount > 0) {
										notificationObj.categoryStr = 'Posts_On_My_Profile_With_File';
									} else if(feedItemObj.type.equalsIgnoreCase('PollPost')) {
										notificationObj.categoryStr = 'Posts_A_Poll_On_My_Profile';
									} else {
										notificationObj.categoryStr = 'Posts_On_My_Profile';
									}
								} else if('MENTIONS ME IN POST'.equalsIgnoreCase(notiMetaObject.prefSettingType)){
									notificationObj.categoryStr = notiMetaObject.isRecognition ? 'Mentions_Me_In_Recognition' : 'Mentions_Me_In_Post';
								}
								
								if(!userIdToPeopleIdMap.isEmpty() && userIdToPeopleIdMap.get(targetUserId) != null){
									notificationObj.toUser = userIdToPeopleIdMap.get(targetUserId);
								}
								
								notificationObjMap.put(targetUserId, notificationObj);
								targetIdToSubjectMap.put(targetUserId,notiEmailMetaObject);
							}
						}
						
						logger.logDebug('NotificationDispatcher.sendItemNotificationAndEmail() ------------- feedObject :: ' + feedObject);
						Map<String, NotificationHelper.EmailWrapper> segmentIdAndEmailWrapperMap = NotificationHelper.createSegmentIdAndEmailWrapperMap(brandingInfoMap, new List<FeedItem>{feedItemObj}, feedObject, null, emailMetaDataObj , source, simpplrContentList, 'Post', null, false);
						
						if(SimpplrContext.enableEmail) {
							mapOfSegmentIdAndBody = getEmailHtmlBodyWithTemplate(segmentIdAndEmailWrapperMap, brandingInfoMap, feedItemObj.id, userLanguage);
						}
					}
					
					Map<String, Integer> localisationCountsMap = new Map<String, Integer>();
					localisationCountsMap.put('filesCount', filesCount);

					logger.logDebug('NotificationDispatcher.sendItemNotificationAndEmail() ------------- filesCount :: ' + filesCount);
					
					if((targetIdToSubjectMap.size() + notificationObjMap.size())> 50){
						BatchCheckAccessAndSendNotification batchToSendEmail = new BatchCheckAccessAndSendNotification(feedObject,simpplrContentList,notificationObjMap,targetIdToSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, false, localisationCountsMap);
						Database.executeBatch(batchToSendEmail, 50);
					} 
					else{
						checkAccessAndSendEmail(feedObject,simpplrContentList,notificationObjMap, targetIdToSubjectMap, mapOfSegmentIdAndBody, peoplePrefList, false, localisationCountsMap);	
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send FeedItemNotificationsAndEmail',e);
		}
		
	}

	public static void sendRecognitionNotificationsAndEmail(ConnectApi.FeedElement feedObject, String source) {
		try {
			Map<String, String> mapOfSegmentIdAndBody = new Map<String, String>();
			Map<String, NotificationDao.Notification> notificationObjMap = new Map<String, NotificationDao.Notification>();
			Map<String,NotificationHelper.NotificationMetadata> targetIdToSubjectMap = new Map<String,NotificationHelper.NotificationMetadata>();
			List<People_Preference__c> peoplePrefList = new List<People_Preference__c>();

			Integer filesCount = 0;

			if(SimpplrContext.isFeatureEnabled('Full_External_Search')) {
				FeedDataAdapter.getUserIdsToConvert(feedObject);
				FeedDataAdapter.getPeopleFromUserIds();
			}
			filesCount = getFilesCountForFeedPost(feedObject);
			
			Map<String, Object> soqlParamMapFI = new  Map<String, Object>();
			soqlParamMapFI.put('soqlParam1', feedObject.id);
			
			String feedItemQuery = 'SELECT Id, parent.name, ParentId, Type, Title, Body, LinkUrl FROM FeedItem WHERE Id =:soqlParam1';
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			List<FeedItem> feedItemObjList = (List<FeedItem>)SIMPESAPI.accessController().queryAsUSer(feedItemQuery, soqlParamMapFI);
			FeedItem feedItemObj = feedItemObjList[0];

			NotificationHelper.NotificationMetadata emailMetaDataObj = NotificationHelper.getNotificationInfo(feedItemObj, feedObject);
			FeedElementWrapper.RecognitionResponseInfo recognitionResponseObj = NotificationHelper.getRecognition(feedObject.Id);
			Set<String> targetUserIdSet = new Set<String>();
			for(PeopleLiteWrapper.PeopleMinWrapper people:recognitionResponseObj.recognitionAwardedTo){
				targetUserIdSet.add(people.sfUserId);
			}

			Map<String, String> userIdToPeopleIdMap =new Map<String,String>();
			List<People__c> peopleList = [select id, user__c from people__c where user__c IN:targetUserIdSet];
			for(People__c people: peopleList) {
				userIdToPeopleIdMap.put(people.user__c, people.id);
			}
			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', targetUserIdSet);
			String query = '';

			if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
				soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
				query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, '
							+ ' Email_Endorses_Me__c, Email_Follows_Me__c, Email_Like_My_Post_Or_Comment__c, Email_Posts_To_Me__c, ' 
							+ ' Email_My_Content_Like_Or_Share__c, Email_My_Content_Post__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey, '
							+ ' Email_Shares_My_Post__c, People__c FROM People_Preference__c Where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__r.User__c IN :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
			} else {
				query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, ' 
							+ ' Email_Endorses_Me__c, Email_Follows_Me__c, Email_Like_My_Post_Or_Comment__c, Email_Posts_To_Me__c, ' 
							+ ' Email_My_Content_Like_Or_Share__c, Email_My_Content_Post__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey, '
							+ ' Email_Shares_My_Post__c, People__c FROM People_Preference__c Where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__r.User__c IN :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
			}
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
			initLangKeyValueMap(peoplePrefList);
			
			Map<String, NotificationHelper.BrandingInfo> brandingInfoMap = new Map<String, NotificationHelper.BrandingInfo>();
			Map<String, People_Preference__c> peoplePreferMap = new Map<String, People_Preference__c>();
			for(People_Preference__c peoplePreferObj : peoplePrefList){
				peoplePreferMap.put(peoplePreferObj.people__r.user__c, peoplePreferObj);
				
				if(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled) {
					if(brandingInfoMap.containsKey(peoplePreferObj.People__r.Segment__r.Id) == false) {
						brandingInfoMap.put(peoplePreferObj.People__r.Segment__r.Id, EmailUtility.getBrandingInfo4People(peoplePreferObj.People__r));
					}
				}
			}
			
			if( !(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled)) {
				brandingInfoMap.put('APP_CONTEXT', EmailUtility.getBrandingInfo4People(null));
			}
			String userLanguage;
			for(String targetUserId: targetUserIdSet) {
				if(!targetUserId.equalsIgnoreCase(UserContext.id)) {
					userLanguage = null;
					if(peoplePreferMap.get(targetUserId) != null) {
						userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePreferMap.get(targetUserId).User__r.languagelocalekey);
					}
					NotificationDao.Notification notificationObj = new NotificationDao.Notification();

					emailMetaDataObj.isRecognition = true;
					emailMetaDataObj.prefSettingType = 'recognized'; //Set email type
					emailMetaDataObj.snippet = recognitionResponseObj.recognitionAwardName;
					NotificationHelper.NotificationMetadata notiMetaObject = getNotificationDetails(emailMetaDataObj, new  Map<String, Simpplr_Content__c>(), targetUserId, userLanguage, feedItemObj);
					NotificationHelper.NotificationMetadata notiEmailMetaObject = getEmailNotificationDetails(emailMetaDataObj,new  Map<String, Simpplr_Content__c>(),targetUserId, feedItemObj, peoplePreferMap);
					notiEmailMetaObject.prefSettingType = emailMetaDataObj.prefSettingType;

					notificationObj.snippet = Utility.chompString(notiMetaObject.snippet,255);
					notificationObj.type = notiMetaObject.type;
					notificationObj.status = notiMetaObject.status;
					notificationObj.subType = notiMetaObject.subType;
					notificationObj.objectID = feedItemObj.id;
					notificationObj.objectType = notiMetaObject.objectType;
					notificationObj.categoryStr = 'Recognition';
					
					if(!userIdToPeopleIdMap.isEmpty() && userIdToPeopleIdMap.get(targetUserId) != null){
						notificationObj.toUser = userIdToPeopleIdMap.get(targetUserId);
					}
					notificationObjMap.put(targetUserId, notificationObj);
					targetIdToSubjectMap.put(targetUserId,notiEmailMetaObject);
				}
			}
			Map<String, NotificationHelper.EmailWrapper> segmentIdAndEmailWrapperMap = NotificationHelper.createSegmentIdAndEmailWrapperMap(brandingInfoMap, new List<FeedItem>{feedItemObj}, feedObject, null, emailMetaDataObj , source, null, 'Post', null, false);
			if(SimpplrContext.enableEmail) {
				mapOfSegmentIdAndBody = getEmailHtmlBodyWithTemplate(segmentIdAndEmailWrapperMap, brandingInfoMap, feedItemObj.id, userLanguage);
			}
			Map<String, Integer> localisationCountsMap = new Map<String, Integer>();
			localisationCountsMap.put('filesCount', filesCount);
			if((targetIdToSubjectMap.size() + notificationObjMap.size())> 50){
				BatchCheckAccessAndSendNotification batchToSendEmail = new BatchCheckAccessAndSendNotification(feedObject,new List<Simpplr_Content__c>(),notificationObjMap,targetIdToSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, false, localisationCountsMap);
				Database.executeBatch(batchToSendEmail, 50);
			} 
			else{
				checkAccessAndSendEmail(feedObject,new List<Simpplr_Content__c>(),notificationObjMap, targetIdToSubjectMap, mapOfSegmentIdAndBody, peoplePrefList, false, localisationCountsMap);	
			}

	}catch(Exception e){
			logger.logError('Unable to send sendRecognitionNotificationsAndEmail',e);
		}
		
	}
	
	public static void sendFeedItemNotificationsAndEmailOnUpdate(Id postId, Set<String>targetMentionUserIdSet) {
		try {
			list<FeedItem> feedItemList = [Select id,body,title, parentId,Parent.type,parent.name, createdById,createdBy.Name, createdDate, type from feeditem where Id =: postId limit 1];
			FeedItem feedItemObj = feedItemList[0];
			ConnectApi.FeedElement feedObject = null;
			
			if(!feedItemObj.type.equalsIgnoreCase('PollPost')){
				String body = '';
				String feedParentId = feedItemObj.parentId;
				String parentSiteId;
				Map<String, String> mapOfSegmentIdAndBody = new Map<String, String>();
				
				Map<String, NotificationDao.Notification> notificationObjMap = new Map<String, NotificationDao.Notification>();
				Map<String,NotificationHelper.NotificationMetadata> targetIdToSubjectMap = new Map<String,NotificationHelper.NotificationMetadata>();
				List<People_Preference__c> peoplePrefList = new List<People_Preference__c>();
				
				String contentId;
				if(feedParentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix)){
					contentId = feedParentId;
				} 
				
				Map<String,Simpplr_Content__c> simpplrContentMap = new Map<String,Simpplr_Content__c>();
				if(String.isNotBlank(contentId)) {
					simpplrContentMap = new Map<String,Simpplr_Content__c>([select id,Name, type__c, title__c,Primary_Author__c,Primary_Author__r.User__c, createdById,Site__c, Site__r.Chatter_Group_Id__c, Site__r.Show_In_Simpplr__c, Display_Excerpt__c from Simpplr_Content__c where id = :contentId]);
				}

				Boolean isSiteAvailableInSimpplr = true;
				if(!simpplrContentMap.isEmpty() && String.isNotBlank(simpplrContentMap.get(contentId).Site__c)) {
					parentSiteId = simpplrContentMap.get(contentId).Site__c;
					isSiteAvailableInSimpplr = simpplrContentMap.get(contentId).Site__r.Show_In_Simpplr__c;
				} else if('0F9'.equals(feedParentId.subString(0,3))){
					Simpplr_Site__c siteObj = getParentSiteObj(feedParentId);
					parentSiteId = siteObj.Id;
					isSiteAvailableInSimpplr = siteObj.Show_In_Simpplr__c;
				}
				
				if(isSiteAvailableInSimpplr) {
					String postParentId = feedItemObj.parentId;
					Boolean isPostOnContent = postParentId.subString(0,3).equalsIgnoreCase(contentKeyPrefix);
					List<Simpplr_Content__c> simpplrContentList = new List<Simpplr_Content__c>();
					if(!simpplrContentMap.isEmpty()){
						simpplrContentList = simpplrContentMap.values();
					}
					
					if((!isPostOnContent) || (isPostOnContent && SimpplrContext.isCommentsAllowed)) {
						feedObject = NotificationHelper.getFeedElementObject(new List<FeedItem>{feedItemObj},null);
						if(SimpplrContext.isFeatureEnabled('Full_External_Search')) {
							FeedDataAdapter.getUserIdsToConvert(feedObject);
							FeedDataAdapter.getPeopleFromUserIds();
						}
						NotificationHelper.NotificationMetadata emailMetaDataObj = NotificationHelper.getNotificationInfo(feedItemObj, feedObject);
						
						Set<String> targetUserIdSet = getTargetUserIdSet(emailMetaDataObj,simpplrContentMap);
						if(String.isNotBlank(contentId)) {
							targetUserIdSet.addAll(NotificationDao.getUserIdsWithContentNotificationsEnabled(contentId));
						}

						Map<String, String> userIdToPeopleIdMap =new Map<String,String>();
						List<People__c> peopleList = [select id, user__c from people__c where user__c IN:targetUserIdSet];
						for(People__c people: peopleList) {
							userIdToPeopleIdMap.put(people.user__c, people.id);
						}
						Map<String, Object> soqlParamMap = new  Map<String, Object>();
						soqlParamMap.put('soqlParam1', targetUserIdSet);
						String query = '';
						
						if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
							soqlParamMap.put('soqlParam2', SimpplrContext.packageName);
							query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, '
										+ ' Email_Endorses_Me__c, Email_Follows_Me__c, Email_Like_My_Post_Or_Comment__c, Email_Posts_To_Me__c, '
										+ ' Email_My_Content_Like_Or_Share__c, Email_My_Content_Post__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey, '
										+ ' Email_Shares_My_Post__c, People__c FROM People_Preference__c Where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__r.User__c IN :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
						} else {
							query = 'SELECT Id,people__r.user__c,people__r.user__r.userName, People__r.First_Name__c,People__r.Last_Name__c, People__r.Full_Name__c,People__r.About__c, Allow_Simpplr_Emails__c,  Email_Comments_After_Me__c, Email_Comments_On_My_Post__c, Email_Comments_On_Post_I_Like__c, ' 
										+ ' Email_Endorses_Me__c, Email_Follows_Me__c, Email_Like_My_Post_Or_Comment__c, Email_Posts_To_Me__c, ' 
										+ ' Email_My_Content_Like_Or_Share__c, Email_My_Content_Post__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey, '
										+ ' Email_Shares_My_Post__c, People__c FROM People_Preference__c Where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and people__r.User__c IN :soqlParam1 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
						}
						SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
						peoplePrefList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
						initLangKeyValueMap(peoplePrefList);
						
						Map<String, NotificationHelper.BrandingInfo> brandingInfoMap = new Map<String, NotificationHelper.BrandingInfo>();
						Map<String, People_Preference__c> peoplePreferMap = new Map<String, People_Preference__c>();
						for(People_Preference__c peoplePreferObj : peoplePrefList){
							peoplePreferMap.put(peoplePreferObj.people__r.user__c, peoplePreferObj);
							
							if(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled) {
								if(brandingInfoMap.containsKey(peoplePreferObj.People__r.Segment__r.Id) == false) {
									brandingInfoMap.put(peoplePreferObj.People__r.Segment__r.Id, EmailUtility.getBrandingInfo4People(peoplePreferObj.People__r));
								}
							}
						}
						
						if( !(SimpplrContext.isSegmentsEnabled && SimpplrContext.isSegmentBrandingEnabled)) {
							brandingInfoMap.put('APP_CONTEXT', EmailUtility.getBrandingInfo4People(null));
						}
						
						targetUserIdSet.remove(UserContext.id);
						String userLanguage;
						for(String targetUserId: targetUserIdSet) {
							
							if(targetMentionUserIdSet.contains(targetUserId)) {
								userLanguage = null;
								if(peoplePreferMap.get(targetUserId) != null) {
									userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePreferMap.get(targetUserId).User__r.languagelocalekey);
								}
								NotificationDao.Notification notificationObj = new NotificationDao.Notification();
								NotificationHelper.NotificationMetadata notiMetaObject = getNotificationDetails(emailMetaDataObj, simpplrContentMap, targetUserId, userLanguage, feedItemObj);
								NotificationHelper.NotificationMetadata notiEmailMetaObject = getEmailNotificationDetails(emailMetaDataObj,simpplrContentMap,targetUserId, feedItemObj, peoplePreferMap);
								
								if(!simpplrContentMap.isEmpty()){
									notificationObj.contentId = postParentId;
									notificationObj.siteId = SimpplrContentMap.get(postParentId).Site__c;
								} else if(String.isNotBlank(parentSiteId)){
									notificationObj.siteId = parentSiteId;
								}
								notificationObj.categoryStr = 'Mentions_Me_In_Post';
								notificationObj.snippet = notiMetaObject.snippet;
								notificationObj.type = notiMetaObject.type;
								notificationObj.status = notiMetaObject.status;
								notificationObj.subType = notiMetaObject.subType;
								notificationObj.objectType = notiMetaObject.objectType;
								
								if(!userIdToPeopleIdMap.isEmpty() && userIdToPeopleIdMap.get(targetUserId) != null){
									notificationObj.toUser = userIdToPeopleIdMap.get(targetUserId);
								}
								notificationObj.objectID = feedItemObj.id;
								
								notificationObjMap.put(targetUserId, notificationObj);
								targetIdToSubjectMap.put(targetUserId,notiEmailMetaObject);
							}
						}
			 			
						logger.logDebug('NotificationDispatcher.sendItemNotificationAndEmailOnUpdate() ------------- feedObject :: ' + feedObject);
			 			Map<String, NotificationHelper.EmailWrapper> segmentIdAndEmailWrapperMap = NotificationHelper.createSegmentIdAndEmailWrapperMap(brandingInfoMap, new List<FeedItem>{feedItemObj},feedObject, null, emailMetaDataObj , null, simpplrContentList, 'Post', null, false);
						if(SimpplrContext.enableEmail) {
							mapOfSegmentIdAndBody = getEmailHtmlBodyWithTemplate(segmentIdAndEmailWrapperMap, brandingInfoMap, feedItemObj.id, userLanguage);
						}
					}

					Map<String, Integer> localisationCountsMap = new Map<String, Integer>();

					if((targetIdToSubjectMap.size() + notificationObjMap.size())> 50){
						BatchCheckAccessAndSendNotification batchToSendEmail = new BatchCheckAccessAndSendNotification(feedObject,simpplrContentList,notificationObjMap,targetIdToSubjectMap,mapOfSegmentIdAndBody,peoplePrefList, false, null);
						Database.executeBatch(batchToSendEmail, 50);
					} 
					else{
						checkAccessAndSendEmail(feedObject,simpplrContentList,notificationObjMap, targetIdToSubjectMap, mapOfSegmentIdAndBody, peoplePrefList, false, null);
					}
				}
			}
		} catch(Exception e){
			logger.logError('Unable to send FeedItemNotificationsAndEmail',e);
		}
		
	}
	
	@testVisible 
	private static Set<String> getTargetUserIdSet(NotificationHelper.NotificationMetadata emailMetaDataObj,Map<String,Simpplr_Content__c> simpplrContentMap){
		Set<String> targetIdSet = new Set<String>();
		
		if(emailMetaDataObj.profileIdMap !=null && !emailMetaDataObj.profileIdMap.isEmpty()) {
			String targetPeopleKeyPrefix =Utility.getPeoplePrefix();
			String targetConetntKeyPrefix =contentKeyPrefix;
			for(String target : emailMetaDataObj.profileIdMap.keySet()){
				if(target.subString(0,3).equalsIgnorecase('005')) {
					targetIdSet.add(target);	
				} else if(target.subString(0,3).equalsIgnorecase(targetConetntKeyPrefix)) {
					if(simpplrContentMap!=null && !simpplrContentMap.isEmpty()) {
						if(simpplrContentMap.get(target) != null){
							targetIdSet.add(simpplrContentMap.get(target).Primary_Author__r.User__c);
						}
					}
				} 
			}
		}
		
		if(emailMetaDataObj.sharedPostOwnerMap!=null && !emailMetaDataObj.sharedPostOwnerMap.isEmpty()){
			String originalPostOwnerId = ' ';
			for(String originalPostOwnId : emailMetaDataObj.sharedPostOwnerMap.keySet()){
				originalPostOwnerId = originalPostOwnId;
			}
			targetIdSet.addAll(emailMetaDataObj.sharedPostOwnerMap.keySet());
		} else if(emailMetaDataObj.mentionedUserMap != null && !emailMetaDataObj.mentionedUserMap.isEmpty()){
			for(String targetUserId: emailMetaDataObj.mentionedUserMap.keySet()) {
				if(!targetIdSet.contains(targetUserId)) {
					targetIdSet.add(targetUserId);
				}
			}
		}
		return targetIdSet;
	}
	
	
	@testVisible
	private static void sendEmails(List<Messaging.SingleEmailMessage> emailList) {
		if(SimpplrContext.enableEmail && emailList.size()>0) {
			List<Messaging.SendEmailResult> results = new List<Messaging.SendEmailResult>();	
			results = Messaging.sendEmail(emailList);
			emailList.clear();
		}
	}
	
	
	@testVisible 
	public static void sendNotifications(List<NotificationDao.Notification> notificationObjList){
		NotificationDao notificationDaoObj = new NotificationDao();

		if(notificationObjList != null && notificationObjList.isEmpty() == false) {
			notificationDaoObj.createAndSendPushNotifications(UserContext.peopleId, notificationObjList);
		}
	}
	
	
	@testVisible 
	private static String getPostLikeEmailWithTemplate(NotificationHelper.EmailWrapper emailWrapperObj, String feedItemId, List<People_Preference__c> peoplePrefList, NotificationHelper.BrandingInfo brandingInfo) {
		List<String> formatterList = new List<String>();
		
		String profileDisplayIcon = getProfileDisplayIcon(peoplePrefList[0].People__r.External_Photo_URL__c, peoplePrefList[0].People__r.External_Photo_URL_Expiry_Date__c);
		
		//0=link 1=link
		formatterList.add(viewLink(feedItemId));
		formatterList.add(viewLink(feedItemId));
		formatterList.add(brandingInfo.general_primaryColor);
		formatterList.add(VIEW_LABEL_PLACEHOLDER);

		String viewLink = EmailUtility.format(EmailTemplateService.templatePartMap.get('viewLink'),formatterList);
		
		formatterList.clear();
		
		//0=profileImage 1=title 2=body 3=date 4=view
		formatterList.add(profileDisplayIcon);
		formatterList.add(emailWrapperObj.title);
		if(String.isNotBlank(emailWrapperObj.pollBody)){
			formatterList.add(emailWrapperObj.pollBody);
		} else {
			formatterList.add(emailWrapperObj.body+emailWrapperObj.contentBody+emailWrapperObj.linkBody);
		}
		
		formatterList.add(emailWrapperObj.createdDate.format(ServiceConstants.EMAIL_DATETIME_FORMAT,peoplePrefList[0].User__r.timeZonesidkey));
		formatterList.add(viewLink);
		String postLikeBody  = EmailTemplateService.templatePartMap.get('postLikeBody');
		postLikeBody = EmailUtility.format(postLikeBody, formatterList);
		formatterList.clear();
		
		return postLikeBody;
	}
	
	@testVisible 
	private static NotificationHelper.NotificationMetadata getNotificationDetails(NotificationHelper.NotificationMetadata emailMetaDataObj, Map<String, Simpplr_Content__c> simpplrContentMap, String targetUserId, String userLanguage, FeedItem feedItemObj) {
		NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata(); 
		notiMetaObj.isRecognition = emailMetaDataObj.isRecognition;

		String profileOwnerId;
		String contentId;
		String feedItemMessage = '';
		Boolean isExternalFilePost = false;
		if(String.isNotBlank(emailMetaDataObj.snippet) && emailMetaDataObj.snippet.containsIgnoreCase(ServiceConstants.FEED_EXT_FILE_SEPRATOR)) {
			isExternalFilePost = true;
		}

		String messageString = String.isNotBlank(emailMetaDataObj.snippet) ? emailMetaDataObj.snippet.subStringBefore(ServiceConstants.FEED_EXT_FILE_SEPRATOR) : '';
		notiMetaObj.snippet = messageString;
		
		if(String.isNotBlank(messageString)){
			 messageString = Utility.chompString(messageString, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH);
		}

		if(!simpplrContentMap.isEmpty()) {
			contentId = (new List<String>(emailMetaDataObj.profileIdMap.keySet())[0]);//getting details using contentId(profileId) as key to get details	
			if(String.isNotBlank(contentId)) {
				profileOwnerId  = simpplrContentMap.get(contentId).Primary_Author__r.User__c;
			}
		} else {
			if(emailMetaDataObj != null){
				profileOwnerId  = (new List<String>(emailMetaDataObj.profileIdMap.keySet())[0]);
			}
		}
		
		String postOwnerId  = (new List<String>(emailMetaDataObj.postOwnerMap.keySet())[0]);
		Set<String> mentionedUserIdSet = new Set<String>();
		if(emailMetaDataObj.mentionedUserMap != null && !emailMetaDataObj.mentionedUserMap.isEmpty()) {
			 mentionedUserIdSet.addAll(emailMetaDataObj.mentionedUserMap.keySet());
		}

		if(emailMetaDataObj.sharedPostOwnerMap!=null) {
			if(!emailMetaDataObj.sharedPostOwnerMap.isEmpty()) {
				
				String orginalPostOwner  = (new List<String>(emailMetaDataObj.sharedPostOwnerMap.keySet())[0]);
				
				if(targetUserId.equalsIgnorecase(orginalPostOwner)) { 
					
					notiMetaObj.subject =  POST_SHARE_SUBJECT;
					notiMetaObj.appNotificationSubject = POST_SHARE_SUBJECT;
					notiMetaObj.prefSettingType = 'SHARES A POST I MADE';
					notiMetaObj.subType = SUB_TYPE_SHARE;
					if (String.isNotBlank(feedItemObj.body)){
						notiMetaObj.snippet = messageString;
					} else{
						notiMetaObj.snippet = '';
					}
					if(!mentionedUserIdSet.isEmpty()){
						mentionedUserIdSet.remove(targetUserId);
					}
				}
			}
		} else if(!profileOwnerId.equalsIgnoreCase(postOwnerId) && !targetUserId.equalsIgnoreCase(postOwnerId) && targetUserId.equalsIgnoreCase(profileOwnerId)) {
			if(String.isNotBlank(contentId)) {
				if(String.isNotBlank(userLanguage)) {
					String contentTitle = simpplrContentMap.get(contentId).title__c;
					String contentType = simpplrContentMap.get(contentId).type__c;
					String localizedContentType = LocaleContext.getLocalisedContentTypeLabel(userLanguage, contentType.toLowerCase());

					if(isExternalFilePost || feedItemObj.Type.equalsIgnoreCase('ContentPost')) {
						String KEY_CONTENT_FILE_POST = 'email.notification.content.file_post';
						notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_FILE_POST + KEY_SUBJECT)
														.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{contentTitle}}', contentTitle)
														.replace('{{contentType}}', localizedContentType)
														.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());
					} else if(feedItemObj.Type.equalsIgnoreCase('LinkPost')){
						String KEY_CONTENT_LINK_POST = 'email.notification.content.link_post';
						notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_LINK_POST + KEY_SUBJECT)
														.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{contentTitle}}', contentTitle);
					} else if(feedItemObj.Type.equalsIgnoreCase('PollPost')){
						if('album'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_ALBUM_POLL_NEW + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('blogpost'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_BLOGPOST_POLL_NEW + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('event'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_EVENT_POLL_NEW + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('page'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_PAGE_POLL_NEW + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						}
					} else {
						if('album'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_ALBUM_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_ALBUM_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('blogpost'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_BLOGPOST_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_BLOGPOST_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('event'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_EVENT_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{eventTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_EVENT_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('page'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_PAGE_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_PAGE_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						}
					}
				}
				
				notiMetaObj.subType = SUB_TYPE_POST;
				notiMetaObj.siteId = SimpplrContentMap.get(contentId).Site__c;
				notiMetaObj.prefSettingType = 'POSTS ON CONTENT I PUBLISHED';
				if(!mentionedUserIdSet.isEmpty()){
					mentionedUserIdSet.remove(targetUserId);
				}
			} else if(targetUserId.subString(0,3).equalsIgnoreCase('005')) {
				String contentSubject = '';
				if(String.isNotBlank(userLanguage)) {
					if(isExternalFilePost || feedItemObj.Type.equalsIgnoreCase('ContentPost')) {
						String KEY_FILE_POSTED_TO_YOU = 'email.notification.feed.posted_to_you.file';
						if(String.isBlank(messageString)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FILE_POSTED_TO_YOU + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FILE_POSTED_TO_YOU + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FILE_POSTED_TO_YOU + KEY_WITH_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', messageString);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FILE_POSTED_TO_YOU + KEY_WITH_TEXT_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', messageString);
						}
					} else if(feedItemObj.Type.equalsIgnoreCase('LinkPost')) {
						if(String.isBlank(messageString)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', messageString);
						}
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					} else if(feedItemObj.Type.equalsIgnoreCase('PollPost')) {
						notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_POLL_POST_TO_YOU + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', messageString);
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_POLL_POST_TO_YOU + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					} else {
						if(String.isBlank(messageString)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', messageString);
						}
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					}
				}
				notiMetaObj.appNotificationSubject = notiMetaObj.subject;
				notiMetaObj.subType = SUB_TYPE_POST;
				notiMetaObj.prefSettingType = 'POSTS ON MY PROFILE';
				if(!mentionedUserIdSet.isEmpty()){
					mentionedUserIdSet.remove(targetUserId);
				}
			}
			
		} else if(!mentionedUserIdSet.isEmpty() && mentionedUserIdSet.contains(targetUserId)) {
			if(String.isNotBlank(userLanguage)) {
				notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_MENTION + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
				notiMetaObj.subject = (notiMetaObj.subject).replace('{{mentionSnippet}}', messageString);
				notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_MENTION + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
			}	
			notiMetaObj.subType = SUB_TYPE_MENTION;
			notiMetaObj.prefSettingType = 'MENTIONS ME IN POST';

		} else if(!targetUserId.equalsIgnoreCase(postOwnerId) && !targetUserId.equalsIgnoreCase(profileOwnerId)) {	
			if(String.isNotBlank(contentId)) {
				if(String.isNotBlank(userLanguage)) {
					String contentTitle = simpplrContentMap.get(contentId).title__c;
					String contentType = simpplrContentMap.get(contentId).type__c;
					
					if(!simpplrContentMap.isEmpty() && targetUserId.equalsIgnoreCase(simpplrContentMap.get(contentId).Primary_Author__r.User__c)) {
						
						if('album'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_ALBUM_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_MANAGE_ALBUM_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('blogpost'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_BLOGPOST_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_MANAGE_BLOGPOST_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('event'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_EVENT_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{eventTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_MANAGE_EVENT_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('page'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_PAGE_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_MANAGE_PAGE_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						}
					}
				}
				
				notiMetaObj.subType = SUB_TYPE_POST;
				notiMetaObj.siteId = SimpplrContentMap.get(contentId).Site__c;
				notiMetaObj.prefSettingType = 'POSTS ON CONTENT I MANAGE';
				if(!mentionedUserIdSet.isEmpty()){
					mentionedUserIdSet.remove(targetUserId);
				}
			}
			
		} else {
			notiMetaObj.subject =  'No Subject';
			notiMetaObj.subType = 'Unknown';
			notiMetaObj.prefSettingType = 'NOT APPLICABLE';
		}
		notiMetaObj.status = NOTIFICATION_STATUS;
		notiMetaObj.type = TYPE_INFORMATION;
		notiMetaObj.objectType = String.isNotBlank(contentId) ? OBJECT_TYPE_CONTENT_FEEDITEM : OBJECT_TYPE_FEEDITEM;
		return notiMetaObj;
		
	}
	
	@testVisible 
	private static NotificationHelper.NotificationMetadata getEmailNotificationDetails(NotificationHelper.NotificationMetadata emailMetaDataObj, Map<String, Simpplr_Content__c> simpplrContentMap,String targetUserId, FeedItem feedItemObj,Map<String,People_Preference__c> peoplePreferMap) {
		NotificationHelper.NotificationMetadata notiMetaObj = new NotificationHelper.NotificationMetadata(); 
		notiMetaObj.isRecognition = emailMetaDataObj.isRecognition;
		String profileOwnerId;
		String contentId;
		String feedItemMessage = '';
		String bodySnippet = '';
		Boolean isExternalFilePost = false;

		if(String.isNotBlank(emailMetaDataObj.snippet) && emailMetaDataObj.snippet.containsIgnoreCase(ServiceConstants.FEED_EXT_FILE_SEPRATOR)) {
			isExternalFilePost = true;
		}
		
		if (String.isNotBlank(emailMetaDataObj.snippet)){
			feedItemMessage = emailMetaDataObj.snippet.subStringBefore(ServiceConstants.FEED_EXT_FILE_SEPRATOR);
			bodySnippet = String.isNotBlank(feedItemMessage) ? Utility.chompString(feedItemMessage, ServiceConstants.SNIPPET_IN_NOTIFICATION_MAX_LENGTH) : '';
		}
		if(!simpplrContentMap.isEmpty()) {
			contentId = (new List<String>(emailMetaDataObj.profileIdMap.keySet())[0]);//getting details using contentId(profileId) as key to get details	
			if(String.isNotBlank(contentId)) {
				profileOwnerId  = simpplrContentMap.get(contentId).Primary_Author__r.User__c;
			} 
		} else {
			profileOwnerId  = (new List<String>(emailMetaDataObj.profileIdMap.keySet())[0]);
		}
		String postOwnerId  = (new List<String>(emailMetaDataObj.postOwnerMap.keySet())[0]);
		Set<String> mentionedUserIdSet = emailMetaDataObj.mentionedUserMap != null && !emailMetaDataObj.mentionedUserMap.isEmpty() ? emailMetaDataObj.mentionedUserMap.keySet() : (new Set<String>());
		Boolean isPostShare = false;
		if(peoplePreferMap.get(targetUserId) != null){
			String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePreferMap.get(targetUserId).User__r.languagelocalekey);
			
			if(peoplePreferMap.get(targetUserId).Email_Shares_My_Post__c){
				if(emailMetaDataObj.sharedPostOwnerMap!=null) {
					if(!emailMetaDataObj.sharedPostOwnerMap.isEmpty()) {
						notiMetaObj.snippet = bodySnippet;
						String orginalPostOwner  = (new List<String>(emailMetaDataObj.sharedPostOwnerMap.keySet())[0]);
						if(targetUserId.equalsIgnorecase(orginalPostOwner)) {
							if(String.isBlank(notiMetaObj.snippet)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_SHARE + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else if(notiMetaObj.isRecognition) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_SHARE + KEY_RECOGNITION + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', notiMetaObj.snippet);
							} else {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POST_SHARE + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', notiMetaObj.snippet);
							}

							if(notiMetaObj.isRecognition){
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POST_SHARE + KEY_RECOGNITION + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else {
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POST_SHARE + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							}
							
							
							notiMetaObj.appNotificationSubject = notiMetaObj.heading;
							
							notiMetaObj.prefSettingType = 'SHARES A POST I MADE';
							notiMetaObj.subType = SUB_TYPE_SHARE;

							if(!mentionedUserIdSet.isEmpty()){
								mentionedUserIdSet.remove(targetUserId);
							}
							isPostShare = true;
						}
					}
				}
			}
			
			if(peoplePreferMap.get(targetUserId).Email_My_Content_Post__c){
				if(!postOwnerId.equalsIgnoreCase(profileOwnerId) && !targetUserId.equalsIgnoreCase(postOwnerId) && targetUserId.equalsIgnoreCase(profileOwnerId)) {
					if(String.isNotBlank(contentId) && isPostShare == false) {
						String contentType = simpplrContentMap.get(contentId).type__c;
						String localizedContentType = LocaleContext.getLocalisedContentTypeLabel(userLanguage, contentType.toLowerCase());
						if(isExternalFilePost || feedItemObj.Type.equalsIgnoreCase('ContentPost')) {
							String KEY_CONTENT_FILE_POST = 'email.notification.content.file_post';

							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_FILE_POST + KEY_SUBJECT)
													.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
													.replace('{{contentTitle}}', simpplrContentMap.get(contentId).Title__c)
													.replace('{{contentType}}', localizedContentType)
													.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_CONTENT_FILE_POST + KEY_INTRO)
													.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
													.replace('{{contentType}}', localizedContentType)
													.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());
							
							notiMetaObj.appNotificationSubject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_FILE_POST + KEY_SUBJECT)
													.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
													.replace('{{contentTitle}}', Utility.chompString(simpplrContentMap.get(contentId).title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH))
													.replace('{{contentType}}', localizedContentType)
													.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());
						} else if(feedItemObj.Type.equalsIgnoreCase('LinkPost')){
							String KEY_CONTENT_LINK_POST = 'email.notification.content.link_post';
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_LINK_POST + KEY_SUBJECT)
													.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
													.replace('{{contentTitle}}', simpplrContentMap.get(contentId).Title__c);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_CONTENT_LINK_POST + KEY_INTRO)
													.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
													.replace('{{contentType}}', localizedContentType)
													.replace('{{contentType, lowercase}}', localizedContentType.toLowerCase());
							
							notiMetaObj.appNotificationSubject = LocaleContext.getLabel(userLanguage, KEY_CONTENT_LINK_POST + KEY_SUBJECT)
													.replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
													.replace('{{contentTitle}}', Utility.chompString(simpplrContentMap.get(contentId).title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH));
						} else if(feedItemObj.Type.equalsIgnoreCase('PollPost')){
							String contentTitle = Utility.chompString(simpplrContentMap.get(contentId).title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH);
							if('album'.equalsIgnoreCase(contentType)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_ALBUM_POLL_NEW + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_ALBUM_POLL_NEW + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else if('blogpost'.equalsIgnoreCase(contentType)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_BLOGPOST_POLL_NEW + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_BLOGPOST_POLL_NEW + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else if('event'.equalsIgnoreCase(contentType)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_EVENT_POLL_NEW + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_EVENT_POLL_NEW + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else if('page'.equalsIgnoreCase(contentType)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_PAGE_POLL_NEW + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_PAGE_POLL_NEW + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							}
							notiMetaObj.appNotificationSubject = notiMetaObj.subject;
						} else {
							String contentTitle = simpplrContentMap.get(contentId).title__c;

							if('album'.equalsIgnoreCase(contentType)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_ALBUM_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_ALBUM_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else if('blogpost'.equalsIgnoreCase(contentType)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_BLOGPOST_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_BLOGPOST_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else if('event'.equalsIgnoreCase(contentType)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_EVENT_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{eventTitle}}', contentTitle);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_EVENT_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else if('page'.equalsIgnoreCase(contentType)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_PAGE_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_PAGE_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							}
							
							notiMetaObj.appNotificationSubject = notiMetaObj.subject;
						}
						
						notiMetaObj.subType = SUB_TYPE_POST;
						notiMetaObj.siteId = SimpplrContentMap.get(contentId).Site__c;
						notiMetaObj.prefSettingType = 'POSTS ON CONTENT I PUBLISHED';
						if(!mentionedUserIdSet.isEmpty()){
							mentionedUserIdSet.remove(targetUserId);
						}
					}
				} else if(!targetUserId.equalsIgnoreCase(postOwnerId) && !targetUserId.equalsIgnoreCase(profileOwnerId)) {
					if(String.isNotBlank(contentId) && isPostShare == false) {
						String contentType = simpplrContentMap.get(contentId).type__c;
						String contentTitle = simpplrContentMap.get(contentId).title__c;
						
						if('album'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_ALBUM_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_MANAGE_ALBUM_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('blogpost'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_BLOGPOST_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_MANAGE_BLOGPOST_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('event'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_EVENT_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{eventTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_MANAGE_EVENT_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if('page'.equalsIgnoreCase(contentType)) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_MANAGE_PAGE_COMMENT + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{contentTitle}}', contentTitle);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_MANAGE_PAGE_COMMENT + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						}
						
						notiMetaObj.appNotificationSubject = notiMetaObj.subject;
						
						notiMetaObj.subType = SUB_TYPE_POST;
						notiMetaObj.siteId = SimpplrContentMap.get(contentId).Site__c;
						notiMetaObj.prefSettingType = 'POSTS ON CONTENT I MANAGE';
						if(!mentionedUserIdSet.isEmpty()){
							mentionedUserIdSet.remove(targetUserId);
						}
					}
				}
			} 
			
			if(peoplePreferMap.get(targetUserId).Email_Posts_To_Me__c){
				if(!profileOwnerId.equalsIgnoreCase(postOwnerId) &&
				 !targetUserId.equalsIgnoreCase(postOwnerId) && targetUserId.equalsIgnoreCase(profileOwnerId)) {
					if(targetUserId.subString(0,3).equalsIgnoreCase('005') &&
					 String.isBlank(contentId) && isPostShare == false &&
					  !'0F9'.equals(profileOwnerId.substring(0,3))) {
						if(isExternalFilePost || feedItemObj.Type.equalsIgnoreCase('ContentPost')) {
							String KEY_FILE_POSTED_TO_YOU = 'email.notification.feed.posted_to_you.file';
							if(String.isBlank(bodySnippet)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FILE_POSTED_TO_YOU + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FILE_POSTED_TO_YOU + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FILE_POSTED_TO_YOU + KEY_WITH_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', bodySnippet);
								notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FILE_POSTED_TO_YOU + KEY_WITH_TEXT_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', bodySnippet);
							}
						} else if(feedItemObj.Type.equalsIgnoreCase('LinkPost')) {
							if(String.isBlank(bodySnippet)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', bodySnippet);
							}
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else if(feedItemObj.Type.equalsIgnoreCase('PollPost')) {
							notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_POLL_POST_TO_YOU + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', bodySnippet);
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_POLL_POST_TO_YOU + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						} else {
							if(String.isBlank(bodySnippet)) {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_NO_TEXT_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
							} else {
								notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c).replace('{{postSnippet}}', bodySnippet);
							}
							notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_POSTED_TO_YOU + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						}
						
						
						notiMetaObj.appNotificationSubject = notiMetaObj.subject;
						notiMetaObj.subType = SUB_TYPE_POST;
						notiMetaObj.prefSettingType = 'POSTS ON MY PROFILE';
						if(!mentionedUserIdSet.isEmpty()){
							mentionedUserIdSet.remove(targetUserId);
						}
					}
				}
			}
			if(peoplePreferMap.get(targetUserId).Email_Posts_To_Me__c){
				if(!mentionedUserIdSet.isEmpty() && mentionedUserIdSet.contains(targetUserId) && isPostShare == false) {
					if(notiMetaObj.isRecognition){
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_MENTION + KEY_RECOGNITION + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_MENTION + KEY_RECOGNITION + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					} else{
						notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_FEED_MENTION + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
						notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_FEED_MENTION + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
					}
					notiMetaObj.subject = (notiMetaObj.subject).replace('{{mentionSnippet}}', bodySnippet);
					notiMetaObj.appNotificationSubject = notiMetaObj.subject;
					notiMetaObj.subType = SUB_TYPE_MENTION;
					notiMetaObj.prefSettingType = 'MENTIONS ME IN POST';
				}
			}
			if(emailMetaDataObj.isRecognition && 'recognized'.equalsIgnoreCase(emailMetaDataObj.prefSettingType)){
				notiMetaObj.heading = LocaleContext.getLabel(userLanguage, KEY_RECOGNITION_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
				notiMetaObj.subject = LocaleContext.getLabel(userLanguage, KEY_RECOGNITION_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c);
			}
		} else {
			notiMetaObj.subject =  'No Subject';
			notiMetaObj.appNotificationSubject = 'No Subject';
			notiMetaObj.subType = 'Unknown';
			notiMetaObj.prefSettingType = 'NOT APPLICABLE';
		}
		notiMetaObj.status = NOTIFICATION_STATUS;
		notiMetaObj.type = TYPE_INFORMATION;
		notiMetaObj.objectType = String.isNotBlank(contentId) ? OBJECT_TYPE_CONTENT_FEEDITEM : OBJECT_TYPE_FEEDITEM;
		return notiMetaObj;
		
	}
	
	 public void sendOnBoardMustReadsEmail(People__c peopleObj){
		String KEY_MUST_READ_REQUIRES_ATTENTION_SINGULAR = 'email.notification.summary.must_reads.subject_singular';
		String KEY_MUST_READ_REQUIRES_ATTENTION_PLURAL = 'email.notification.summary.must_reads.subject_plural';

		String localeKey = Utility.getSimpplrLanguageLocaleKey(peopleObj.User__r.languagelocalekey);
		LocaleContext.getAllLabelMap('EmailNotifications', new List<String>{localeKey});

    	List<Messaging.SingleEmailMessage> onboardMustReadsEmailList = new List<Messaging.SingleEmailMessage>();
    	String peopleId = peopleObj.id;
		Set<Id> sitesIFollowIdSet = UserContext.sitesIFollowIdSet;
		DateTime currentDateTime = DateTime.now();
    	List<Simpplr_Content__c> contentTempList = new List<Simpplr_Content__c>();
		String contentQuery = 'select id,Popularity_Score__c, Title__c, Type__c,Text_Intro__c, Site__c, Site__r.Name, Site__r.Site_Type__c, Publish_Start_DateTime__c, Last_Edited_DateTime__c, Event_TimezoneSidKey__c, '+
							' Event_Start_Datetime__c,Event_End_Datetime__c,Event_Is_All_Day__c,Primary_Author__c,Primary_Author__r.Full_Name__c,Display_Excerpt__c, Site__r.Chatter_Group_Id__c,Primary_Author__r.External_Photo_URL__c, createdDate, ' + 
							'(SELECT Id,Content_Version__c,Thumbnail_URL__c,Is_Title_Image__c,Title_Image_Type__c FROM File_Simpplr_Content__r ' + 
							'  WHERE Is_Deleted__c = false AND Is_Title_Image__c=true ORDER BY Title_Image_Type__c )' + 
							' from Simpplr_Content__c where Is_Deleted__c = false And Id IN (SELECT Content__c FROM Must_Read_Audit__c WHERE Removed_DateTime__c = null  AND (Expiry_DateTime__c = null OR Expiry_DateTime__c >: currentDateTime) AND  ( Audience_Type__c=\'everyone\' OR Content__r.Site__c=:sitesIFollowIdSet))  ' +
							' AND Id NOT IN (Select content__c from Must_Read_Confirm_History__c where People__c=:peopleId AND Must_Read_Audit__r.Removed_DateTime__c = null) ' +
							' Order by CreatedDate desc';
		
		contentTempList.addAll((List<Simpplr_Content__c>)Database.query(contentQuery));
		if(contentTempList.size()>0 && peopleObj!=null){
			NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People(peopleObj);
			
    		String emailBody = getOnBoardMustReadsBody(peopleObj, contentTempList, localeKey);
    		String subject = '';
    		if(contentTempList.size() == 1){
    			subject = LocaleContext.getLabel(localeKey, KEY_MUST_READ_REQUIRES_ATTENTION_SINGULAR)
								.replace('{{count}}', String.valueOf(contentTempList.size()));
    		}else{
    			subject = LocaleContext.getLabel(localeKey, KEY_MUST_READ_REQUIRES_ATTENTION_PLURAL)
								.replace('{{count}}', String.valueOf(contentTempList.size()));
    		}
    		Messaging.SingleEmailMessage singleMail = new Messaging.SingleEmailMessage();
			singleMail.setTargetObjectId(peopleObj.User__c);
			singleMail.setSubject(subject);
			if(String.isNotBlank(SimpplrContext.SEDFromEmail)) {
				singleMail.setOrgWideEmailAddressId(SimpplrContext.SEDFromEmail);
			}
			if(SimpplrContext.DeeplinkingEnabled) {
				emailBody = EmailUtility.deeplinkedMailBody(emailBody);
			}
			
			singleMail.setHtmlBody(emailBody);
			singleMail.setCharset('UTF-8');
			singleMail.setUseSignature(false);
			singleMail.setSaveAsActivity(false);
			onboardMustReadsEmailList.add(singleMail);
	        if(onboardMustReadsEmailList.size() > 0) {
	        	List<Messaging.SendEmailResult> results = Messaging.sendEmail(onboardMustReadsEmailList);
	        }
		}
    }

	private String getOnBoardMustReadsBody(People__c peopleObj, List<Simpplr_Content__c> contentTempList, String localeKey){
		String KEY_YOU_HAVE_COUNT_MUST_READ_PLURAL = 'email.notification.summary.must_reads.intro_plural';
		String KEY_YOU_HAVE_COUNT_MUST_READ_SINGULAR = 'email.notification.summary.must_reads.intro_singular';
		String KEY_MUST_READ_LEAD_IN = 'email.notification.summary.must_reads.lead_in';
		String KEY_EMAIL_HI = 'email.common.salutation';

		String appConfigQuery = 'Select Branding_JSON__c,Branding_Logo__c,App_Name__c,Package_Name__c from App_Config__c Limit 1';
		SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.WITHOUT);
		App_Config__c appConfig = ((List<App_config__c>)SIMPESAPI.accessController().queryAsUser(appConfigQuery, null))[0];
		
    	String logoUrl;
    	if(String.isNotBlank(appConfig.Branding_Logo__c)){
        	logoUrl = appConfig.Branding_Logo__c;
        } else {
        	logoUrl = EmailTemplateService.simpplrDefaultLogoUrl;
        }
		NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(peopleObj);
    	String targetPeopleId = peopleObj.Id;
    	Map<String,String> partMap = EmailTemplateService.contentMustReadsPartMap;

		List<String> baseEmailBodyList = new List<String>();
    	baseEmailBodyList.add('' + SimpplrContext.salesforceBaseUrl  + Page.app.getUrl()); // 0-repeated with 11th
    	baseEmailBodyList.add(logoUrl); // 1
    	baseEmailBodyList.add(EmailUtility.getFormattedDate(DateTime.now(), peopleObj.User__r.timezonesidkey));//2

		String userName = peopleObj.Full_Name__c;
		if(String.isNotBlank(peopleObj.First_Name__c)){
			userName = peopleObj.First_Name__c;
		}
		baseEmailBodyList.add(LocaleContext.getLabel(localeKey, KEY_EMAIL_HI)
						.replace('{{firstName}}', userName)); //{3}

		String intro;
        if(contentTempList.size() == 1){
        	intro = LocaleContext.getLabel(localeKey, KEY_YOU_HAVE_COUNT_MUST_READ_SINGULAR); 
        }else{
        	intro = LocaleContext.getLabel(localeKey, KEY_YOU_HAVE_COUNT_MUST_READ_PLURAL); 
        }
		intro = intro.replace('{{count}}', String.valueOf(contentTempList.size()))
					 .replace('{{appName}}', SimpplrContext.applicationName);

		baseEmailBodyList.add(intro);//4
    	baseEmailBodyList.add(LocaleContext.getLabel(localeKey, KEY_MUST_READ_LEAD_IN)); // {5}
    	baseEmailBodyList.add(userName); // 6
		baseEmailBodyList.add(''); // 7
		baseEmailBodyList.add('https://www.simpplr.com'); //8
		baseEmailBodyList.add('Simpplr'); //9
		baseEmailBodyList.add(getOnBoardMustReadsContentBody(contentTempList, brandingInfo, localeKey, peopleObj));//10
		baseEmailBodyList.add('' + SimpplrContext.salesforceBaseUrl  + Page.PageRedirector.getUrl() + '?userId=' + peopleObj.user__c +'&pageToRedirect='+Pages.MySettingsEmail+'&origin=tse');//{11}
		// header background // 12
		if('dark'.equalsIgnoreCase(brandingInfo.header_preset)){
			baseEmailBodyList.add('000000');
		} else if('primary'.equalsIgnoreCase(brandingInfo.header_preset)) {
			baseEmailBodyList.add(brandingInfo.general_primaryColor);
		} else if('default'.equalsIgnoreCase(brandingInfo.header_preset)){
			baseEmailBodyList.add('ffffff');
		} else {
			baseEmailBodyList.add(brandingInfo.header_backgroundColor);
		}
		
		// footer background //13
		baseEmailBodyList.add('f8f8f8');
		baseEmailBodyList.add(brandingInfo.header_iconColor); // header text color Applicable for date only. // 14
		//baseEmailBodyList.add(brandingInfo.footer_textColor); // footer text color Applicable for footer text only. // 15
		baseEmailBodyList.add('333333'); // footer text color Applicable for footer text only. // 15
		baseEmailBodyList.add(brandingInfo.general_primaryColor); // Link color Applicable for all links in header and footer. // 16
		//17 CSS media rule
		baseEmailBodyList.add('<style type="text/css">/* MOBILE STYLES */@media screen and (max-width: 525px) {/* USE THESE CLASSES TO HIDE CONTENT ON MOBILE */td[class="mobile-hide"]{display:none;}}</style><!--[if(gte mso 9)|(IE)]><style type="text/css">table {border-collapse: collapse;}</style><![endif]-->');
		
		String languagelocalekey = Utility.getSimpplrLanguageLocaleKey(peopleObj.User__r.languagelocalekey);

		//18 app name
		baseEmailBodyList.add(LocaleContext.getLabel(languagelocalekey, EmailConstants.KEY_FOOTER_SETTINGS).replace('{{appName}}',SimpplrContext.applicationName));
		//19 app name
		baseEmailBodyList.add('');
		//20 copyright 
		baseEmailBodyList.add(LocaleContext.getLabel(languagelocalekey, EmailConstants.KEY_COPYRIGHT).replace('{{year}}', '' + DateTime.now().year()));
		//21 powered by 
		baseEmailBodyList.add(LocaleContext.getLabel(languagelocalekey, EmailConstants.KEY_POWERED_BY));
		//22 APPName 
		baseEmailBodyList.add(SimpplrContext.applicationName);
		// 23 mediaCSS
		baseEmailBodyList.add('<style>@media all {    .ExternalClass {      width: 100%;    }    .ExternalClass,    .ExternalClass p,    .ExternalClass span,    .ExternalClass font,    .ExternalClass td,    .ExternalClass div {      line-height: 100%;    }    .apple-link a {      color: inherit !important;      font-family: inherit !important;      font-size: inherit !important;      font-weight: inherit !important;      line-height: inherit !important;      text-decoration: none !important;    }  }@media only screen and (max-width:620px) {    table[class=body] .wrapper,    table[class=body] .header,    table[class=body] .article {      padding: 10px !important;    }    table[class=body] .content {      padding: 0 !important;    }    table[class=body] .container {      padding: 0 !important;      width: 100% !important;    }    table[class=body] .main {      border-left-width: 0 !important;      border-radius: 0 !important;      border-right-width: 0 !important;    }    table[class=body] .main {      border-left-width: 0 !important;      border-radius: 0 !important;      border-right-width: 0 !important;    }    table[class=body] .btn a {      width: 100% !important;    }    table[class=body] .img-responsive {      height: auto !important;      max-width: 100% !important;      width: auto !important;    }    td[class="mobile-hide"] {      display: none;    }    .mobile-hide {      display: none;    }    .newsletter-item .media {      width: 100px !important;    }    .newsletter-item .media .Calendar .CalendarMonth {      font-size: 14px !important;    }    .newsletter-item .media .Calendar .CalendarDay {      font-size: 33px !important;    }    .newsletter-item--showCase .media {      width: 100% !important;    }    .newsletter-item--showCase .media .Calendar .CalendarMonth {      font-size: 20px !important;    }    .newsletter-item--showCase .media .Calendar .CalendarDay {      font-size: 40px !important;    }    .wrapper,    .header,    .article {      padding: 10px !important;    }    .content {      padding: 0 !important;    }    .container {      padding: 0 !important;      width: 100% !important;    }    .main {      border-left-width: 0 !important;      border-radius: 0 !important;      border-right-width: 0 !important;    }    .btn table {      width: 100% !important;    }    .btn a {      width: 100% !important;    }    .img-responsive {      height: auto !important;      max-width: 100% !important;      width: auto !important;    }  }    a[x-apple-data-detectors] {        color: inherit !important;        text-decoration: none !important;        font-size: inherit !important;        font-family: inherit !important;        font-weight: inherit !important;        line-height: inherit !important;    }</style>');
		// 24 mobile promotion footer
		baseEmailBodyList.add(EmailUtility.getMobilePromotionFooterDiv(languagelocalekey, targetPeopleId));

		return EmailUtility.format(partMap.get('BaseEmailBody'), baseEmailBodyList);
	}	
	
	private String getOnBoardMustReadsContentBody(List<Simpplr_Content__c> contentTempList,
						 NotificationHelper.BrandingInfo brandingInfo, String localeKey, People__c peopleObj){
    	Map<String,String> partMap = EmailTemplateService.contentMustReadsPartMap;
    	String contentRowTemplate = partMap.get('ContentRow');
    	String thumbnailTitleImageTemplate = partMap.get('ThumbnailTitleImage');
    	
       	String allContentRows = '';
    	String viewURL = '';
    	Map<ID, Integer> contentIdOrderMap = new Map<ID, Integer>();
    	Map<Id, String> contentIdNPublicUrlMap = getcontentIdNPublicUrlMap(contentTempList);
    	for(Simpplr_Content__c contentObj : contentTempList){
    		String contentPart = contentRowTemplate;
    		
			if('Page'.equalsIgnoreCase(contentObj.Type__c)) {
				viewURL = PageContext.getPageURL(Pages.app)+'?u=/site/'+contentObj.site__c+'/page/'+contentObj.Id;
			} else if('Album'.equalsIgnoreCase(contentObj.Type__c)) {
				viewURL = PageContext.getPageURL(Pages.app)+'?u=/site/'+contentObj.site__c+'/album/'+contentObj.Id;
			} else if('Event'.equalsIgnoreCase(contentObj.Type__c)){
				viewURL = PageContext.getPageURL(Pages.app)+'?u=/site/'+contentObj.site__c+'/event/'+contentObj.Id;
			} else if('BlogPost'.equalsIgnoreCase(contentObj.Type__c)){
				viewURL = PageContext.getPageURL(Pages.app)+'?u=/people/'+contentObj.Primary_Author__c+'/blog/'+contentObj.Id;
			}
			
    		//Adding title Image 
			String thumbnailTitleImageHTML = '';
			if(String.isNotBlank(contentIdNPublicUrlMap.get(contentObj.Id))) {
				List<String> titleImageParts = new List<String>();  
				titleImageParts.add(viewURL);
				titleImageParts.add(contentIdNPublicUrlMap.get(contentObj.Id));
				thumbnailTitleImageHTML = EmailUtility.format(thumbnailTitleImageTemplate, titleImageParts);
			}
				    	
			List<String> contentTypePartList = new List<String>();
			String localizedContentType = LocaleContext.getLocalisedContentTypeLabel(localeKey, contentObj.type__c.toLowerCase()).capitalize();
			contentTypePartList.add(EmailUtility.format(partmap.get('ContentType'),//0
						new List<String>{
							localizedContentType
						}));
			
			contentTypePartList.add(viewURL);//1
			contentTypePartList.add(contentObj.Title__c.length()>100 ? contentObj.Title__c.substring(0,97)+'...' : contentObj.Title__c);//2
			
			//Promoted Stamp
			contentTypePartList.add('');
			
			// adding content body text
			if(String.isNotBlank(contentObj.Display_Excerpt__c)){//4
				contentTypePartList.add(contentObj.Display_Excerpt__c);
			} else {
				contentTypePartList.add('');
			}
			contentTypePartList.add(thumbnailTitleImageHTML);//5
			contentTypePartList.add(brandingInfo.general_primaryColor);//6
			if('Event'.equalsIgnoreCase(contentObj.type__c)){
				String badge = '';
				String dayForEvent = '';
				String startDay = LocaleContext.getLocalisedDateAsEEEEDMMMYYYY(contentObj.Event_Start_Datetime__c, localeKey, contentObj.Event_TimezoneSidKey__c);
				String endDay = LocaleContext.getLocalisedDateAsEEEEDMMMYYYY(contentObj.Event_End_DateTime__c, localeKey, contentObj.Event_TimezoneSidKey__c);
				String startTime = LocaleContext.getLocalisedDateAs12HourFormatTime(contentObj.Event_Start_DateTime__c, localeKey, contentObj.Event_TimezoneSidKey__c);
				String endTime = LocaleContext.getLocalisedDateAs12HourFormatTime(contentObj.Event_End_DateTime__c, localeKey, contentObj.Event_TimezoneSidKey__c);
				if('12:00 AM'.equalsIgnoreCase(contentObj.Event_Start_Datetime__c.format('h:mm a')) && contentObj.Event_Start_Datetime__c.addDays(1) == contentObj.Event_End_DateTime__c){
					dayForEvent = startDay;
					badge = LocaleContext.getLabel(localeKey, 'email.common.all_day.digest');
				}else if(contentObj.Event_Start_DateTime__c.isSameDay(contentObj.Event_End_DateTime__c)){
					dayForEvent = startDay;
					badge = startTime+' - '+endTime;
				}else if('12:00 AM'.equalsIgnoreCase(contentObj.Event_Start_Datetime__c.format('h:mm a')) && '12:00 AM'.equalsIgnoreCase(contentObj.Event_End_DateTime__c.format('h:mm a'))){
					String eventEndDateMinusOneMinute = LocaleContext.getLocalisedDateAsEEEEDMMMYYYY(contentObj.Event_End_DateTime__c.addMinutes(-1), localeKey, peopleObj.User__r.timezonesidkey);
					badge = startDay+' - '+ eventEndDateMinusOneMinute;
				}else{
					String atLocalizedStr = LocaleContext.getLabel(localeKey, 'email.common.at_time');
					badge = startDay + ' ' + atLocalizedStr + ' ' + startTime + ' - ' +endDay + ' ' + atLocalizedStr + ' ' + endTime;
				}
				contentTypePartList.add(EmailUtility.format(partmap.get('BadgeForEvent'),//7
						new List<String>{dayForEvent}));
				contentTypePartList.add(EmailUtility.format(partmap.get('BadgeForEvent'),//8
						new List<String>{badge}));
			}else{
				contentTypePartList.add('');
				contentTypePartList.add('');
			}
			allContentRows += EmailUtility.format(contentPart, contentTypePartList);
    	}
    	return allContentRows;
    }
    
    private Map<Id, String> getcontentIdNPublicUrlMap(List<Simpplr_Content__c> contentList) {
    	Map<Id, String> contentIdNPublicUrlMap = new Map<Id, String>();
    	Map<Id, Id> contentIdAndCVIdMap = new Map<Id, Id>();
    	
    	// Widescreen image is required for First content, Thumbnail image for the rest..
    	String desiredImageType = 'Thumbnail';
    	
    	for(Simpplr_Content__c contentObj : contentList) {
    		List<File__c> fileList = contentObj.File_Simpplr_Content__r;
    		// below 'for' loop will execute max 2 times per iteration
    		for(File__c fileObj : fileList) {
				if(fileObj.Is_Title_Image__c){
    				if(ServiceConstants.TYPE_ALBUM.equalsIgnoreCase(contentObj.Type__c)){
    					if(String.isNotBlank(fileObj.Content_Version__c)) {
    						contentIdAndCVIdMap.put(contentObj.Id, fileObj.Content_Version__c);
    					} else {
    						contentIdNPublicUrlMap.put(contentObj.id, fileObj.Thumbnail_URL__c);
    					}
    					break;
	    			} else if(desiredImageType.equalsIgnoreCase(fileObj.Title_Image_Type__c)) {
	    				contentIdAndCVIdMap.put(contentObj.Id, fileObj.Content_Version__c);
	    				break;
	    			}
				}
    		}
    	}
    	
    	Map<Id, String> cvIdNPublicUrlMap = FileContentProvider.generateEmbedPublicUrl(contentIdAndCVIdMap.values());
    	
    	for(Id contentId : contentIdAndCVIdMap.keySet()) {
    		contentIdNPublicUrlMap.put( contentId, cvIdNPublicUrlMap.get( contentIdAndCVIdMap.get(contentId) ) );
    	}
    	return contentIdNPublicUrlMap;
    }
	
	
	/**
	* 
	* Purpose:  [Check for the notifications to be sent to different users as per settings]
	* Parameters:
	*      parameter_name -- [Explanation of the purpose of this parameter to the method.
	*      
	* Returns:  [If this method sends back a value via the return mechanism, describe the purpose of that value here, otherwise state 'None.']
	*/
    public static void sendNotificationForContentFeedback(String objectId, String objectType, Boolean usefulStatus, String siteId,String comment, String contentTitle) {
		Set<String> setOfAdminUserIds=NotificationDao.getAllContentApprovers(objectId, 'appManagerUsefulContentNotifications', true); 
		List<NotificationDao.Notification> listOfNotification=new List<NotificationDao.Notification>();
		//Set<String> setOfAdminUserIds = new Set<String>(setOfAdminUserIds);
		String guid= NotificationDao.generateGUID(); // all user share same guid becuase later on we can process same guid's pending requests 
		
		for(String userId : setOfAdminUserIds) {
			if(!userId.equalsIgnoreCase(UserContext.peopleId)) {
				NotificationDao.Notification nt =new NotificationDao.Notification();
				nt.fromUser=UserContext.peopleId;
				nt.GUID=guid;
				nt.objectID=objectId;
				nt.objectType=objectType;
				nt.isRead=false; 
				nt.type=NotificationDao.TYPE_INFORMATION;
				nt.toUser=userId;
				nt.siteId=siteId;
				nt.status='Pending';
				nt.categoryStr = 'Content_Rated_Unuseful';
				nt.subType= NotificationDao.CONTENT_RATE_SUBTYPE_UNUSEFUL;
					
				nt.snippet = Utility.chompString(contentTitle,255);
				listOfNotification.add(nt);
			}
		}

		sendNotifications(listOfNotification);
		if(SimpplrContext.enableEmail) {
			sendNotificationEmailForContentFeedback(setOfAdminUserIds, listOfNotification, comment);
		}		
	}

	private static String getAlbumMediaActionEmailBody(People_Preference__c peoplePrefObj, 
					String introText, String body, String userComment, String viewLink) {
		
		String targetPeopleId = peoplePrefObj.People__c;
		String targetUserFirstName = peoplePrefObj.People__r.First_Name__c;
		String targetUserName = peoplePrefObj.People__r.user__r.userName;
		String targetUserLastName = peoplePrefObj.People__r.Last_Name__c;
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
		String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePrefObj.user__r.languagelocalekey);

		List<String> formatterList = new List<String>();
		String emailBodyContentActions = EmailTemplateService.templatePartMap.get('emailBodyContentActions');
		//0=Target User First Name 1=introText  2=profileImage 3=Logged in user Full Name 4=content LinkBody 5=Link to Content 6=Link to content
		String hiLocalizedString = LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_SALUTATION);
		if(String.isNotBlank(targetUserFirstName)){
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserFirstName));
		} else {
			formatterList.add(hiLocalizedString.replace('{{firstName}}', targetUserLastName));
		}
		formatterList.add(introText);
		formatterList.add(profileDisplayIcon);
		formatterList.add(UserContext.getCurrentUserInfo.Full_Name__c);
		formatterList.add(body);
		formatterList.add(viewLink);
		formatterList.add(viewLink);

		NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c) peoplePrefObj.People__r);
		formatterList.add(brandingInfo.general_primaryColor);
		if(String.isNotBlank(userComment)) {
			formatterList.add(userComment);
		} else {
			formatterList.add('');
		}

		formatterList.add(LocaleContext.getLabel(userLanguage, KEY_EMAIL_COMMON_VIEW_BUTTON)); // view button
		formatterList.add(LocaleContext.getLocalisedDateAsMMMMDDYYYY(DateTime.now(), userLanguage, peoplePrefObj.User__r.timeZonesidkey));// current date

		emailBodyContentActions = EmailUtility.format(emailBodyContentActions, formatterList);
		formatterList.clear();
		return getEmailTemplateWithNewHeaderFooter(peoplePrefObj, emailBodyContentActions, brandingInfo);
	}
	
	public static void sendEmailForMediaLike(File__c fileObj, Simpplr_Content__c simpplrContentObj) {
		try{
			String KEY_MEDIA_TYPE_PHOTO = 'common.media_type.photo';
			String KEY_MEDIA_TYPE_VIDEO = 'common.media_type.video';
			String KEY_ALBUM_MEDIA_LIKED = 'email.notification.content.album.media.liked';
			String KEY_ALBUM_MEDIA_CONTRIBUTED_LIKED = 'email.notification.content.album.media.liked.your';

			if(SimpplrContext.enableEmail){
				String targetUserId = fileObj.Author__r.User__c;
				List<People_Preference__c> peoplePreList;
				String fileAuthorId = fileObj.Author__r.user__c;
				String contentAuthorId = simpplrContentObj.Primary_Author__r.User__c;
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', fileObj.Author__c);
				soqlParamMap.put('soqlParam2', simpplrContentObj.Primary_Author__c);
				soqlParamMap.put('soqlParam3', UserContext.id);
				String query = '';

				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam4', SimpplrContext.packageName);
					query = 'Select id, People__r.First_Name__c,People__r.Last_Name__c, People__r.user__r.userName, People__r.About__c, Email_My_Content_Like_Or_Share__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_My_Content_Like_Or_Share__c=true and  (people__c=: soqlParam1 or people__c=: soqlParam2) and people__r.User__c !=:soqlParam3 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam4)';
				} else {
					query = 'Select id, People__r.First_Name__c, People__r.Last_Name__c,People__r.user__r.userName, People__r.About__c, Email_My_Content_Like_Or_Share__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_My_Content_Like_Or_Share__c=true and  (people__c=: soqlParam1 or people__c=: soqlParam2) and people__r.User__c !=:soqlParam3 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePreList);

				Map<String, People_Preference__c> peoplePrefMap = new Map<String, People_Preference__c>();
				for(People_Preference__c peoplePref : peoplePreList) {
					peoplePrefMap.put(peoplePref.people__r.user__c, peoplePref);
				}
				
				if(!peoplePrefMap.isEmpty()) {
					List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
					
					for(String targetuser: peoplePrefMap.keySet()) {
						NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)peoplePrefMap.get(targetuser).People__r);
						
						String subject='';
						String emailHeading='';	
						String media = '';
						
						String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePrefMap.get(targetuser).user__r.languagelocalekey);

						if (fileObj.Mime_Type__c.equalsIgnoreCase('image')) {
							media = LocaleContext.getLabel(userLanguage, KEY_MEDIA_TYPE_PHOTO);
						} else if (fileObj.Mime_Type__c.equalsIgnoreCase('video')) {
							media = LocaleContext.getLabel(userLanguage, KEY_MEDIA_TYPE_VIDEO);
						}
						
						String introText, body;
						String albumTitle = Utility.chompString(simpplrContentObj.title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH);
						if (contentAuthorId.equals(targetuser)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_LIKED + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase())
														.replace('{{albumName}}', albumTitle)
														.replace('{{contentTitle}}', albumTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_LIKED + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase());
							body = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_LIKED + KEY_BODY)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase())
														.replace('{{albumName}}', albumTitle)
														.replace('{{contentTitle}}', albumTitle);
						} else {
							subject = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_CONTRIBUTED_LIKED + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase())
														.replace('{{albumName}}', albumTitle)
														.replace('{{contentTitle}}', albumTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_CONTRIBUTED_LIKED + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase());
							body = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_CONTRIBUTED_LIKED + KEY_BODY)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase())
														.replace('{{albumName}}', albumTitle)
														.replace('{{contentTitle}}', albumTitle);
						}

						String viewLink = baseUrl + '/apex/app?u=/site/'+simpplrContentObj.site__c+
												'/'+simpplrContentObj.Type__c.toLowerCase()+'/'+simpplrContentObj.id+
												'/gallery/'+fileObj.Id+'&origin=ne';

						String emailBody = getAlbumMediaActionEmailBody(peoplePrefMap.get(targetUser), introText, body, null, viewLink);
						emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,targetuser, SimpplrContext.SEDFromEmail));
					}
					if(!emailObjList.isEmpty()) {
						sendEmails(emailObjList);
					}
				}
			}
		}catch(Exception e){
			logger.logError('Unable to send sendEmailForMediaLike email',e);
		}
	}
	
	public static void sendEmailForMediaShare(File__c fileObj, Simpplr_Content__c simpplrContentObj,String feedId) {
		try{
			String KEY_MEDIA_TYPE_PHOTO = 'common.media_type.photo';
			String KEY_MEDIA_TYPE_VIDEO = 'common.media_type.video';
			String KEY_ALBUM_MEDIA_SHARED = 'email.notification.content.album.media.shared';
			String KEY_ALBUM_MEDIA_CONTRIBUTED_SHARED = 'email.notification.content.album.media.shared.your';

			if(SimpplrContext.enableEmail){
				String targetUserId = fileObj.Author__r.User__c;
				List<People_Preference__c> peoplePreList;
				String fileAuthorId = fileObj.Author__r.user__c;
				String contentAuthorId = simpplrContentObj.Primary_Author__r.User__c;
				Map<String, Object> soqlParamMap = new  Map<String, Object>();
				soqlParamMap.put('soqlParam1', fileObj.Author__c);
				soqlParamMap.put('soqlParam2', simpplrContentObj.Primary_Author__c);
				soqlParamMap.put('soqlParam3', UserContext.id);
				String query = '';
				
				if(String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
					soqlParamMap.put('soqlParam4', UserContext.id);
					query = 'Select id, People__r.First_Name__c,People__r.Last_Name__c, People__r.user__r.userName, People__r.About__c, Email_My_Content_Like_Or_Share__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_My_Content_Like_Or_Share__c=true and  (people__c=: soqlParam1 or people__c=: soqlParam2) and people__r.User__c !=:soqlParam3 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\' and User__c IN (select userid from UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam4)';
				} else {
					query = 'Select id, People__r.First_Name__c, People__r.Last_Name__c,People__r.user__r.userName, People__r.About__c, Email_My_Content_Like_Or_Share__c,People__r.External_Photo_URL__c, People__r.External_Photo_URL_Expiry_Date__c, People__r.Segment__r.Id, People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, User__r.languagelocalekey, User__r.TimeZoneSidKey From People_Preference__c where Allow_Simpplr_Emails__c = true and Email_Notification_Digest_Frequency__c=\'Immediate\' and Email_My_Content_Like_Or_Share__c=true and  (people__c=: soqlParam1 or people__c=: soqlParam2) and people__r.User__c !=:soqlParam3 and people__r.User__r.IsActive=true and people__r.User__r.UserType=\'Standard\'';
				}
				SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
				peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
				initLangKeyValueMap(peoplePreList);
				
				Map<String, People_Preference__c> peoplePrefMap = new Map<String, People_Preference__c>();
				for(People_Preference__c peoplePref : peoplePreList) {
					peoplePrefMap.put(peoplePref.people__r.user__c, peoplePref);
				}
				
				if(!peoplePrefMap.isEmpty()) {
					List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
					
					for(String targetuser: peoplePrefMap.keySet()) {
						NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)peoplePrefMap.get(targetuser).People__r);
						
						String subject='';
						String emailHeading='';	
						String media = '';
						
						String userLanguage = Utility.getSimpplrLanguageLocaleKey(peoplePrefMap.get(targetuser).user__r.languagelocalekey);

						if (fileObj.Mime_Type__c.equalsIgnoreCase('image')) {
							media = LocaleContext.getLabel(userLanguage, KEY_MEDIA_TYPE_PHOTO);
						} else if (fileObj.Mime_Type__c.equalsIgnoreCase('video')) {
							media = LocaleContext.getLabel(userLanguage, KEY_MEDIA_TYPE_VIDEO);
						}

						String introText, body;
						String albumTitle = Utility.chompString(simpplrContentObj.title__c,ServiceConstants.CONTENT_TITLE_IN_NOTIFICATION_MAX_LENGTH);
						if (contentAuthorId.equals(targetuser)) {
							subject = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_SHARED + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase())
														.replace('{{albumName}}', albumTitle)
														.replace('{{contentTitle}}', albumTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_SHARED + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase());
							body = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_SHARED + KEY_BODY)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase())
														.replace('{{albumName}}', albumTitle)
														.replace('{{contentTitle}}', albumTitle);
						} else {
							subject = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_CONTRIBUTED_SHARED + KEY_SUBJECT).replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase())
														.replace('{{albumName}}', albumTitle)
														.replace('{{contentTitle}}', albumTitle);
							introText = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_CONTRIBUTED_SHARED + KEY_INTRO).replace('{{fullName}}', loggedInUserInfo.Full_Name__c)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase());
							body = LocaleContext.getLabel(userLanguage, KEY_ALBUM_MEDIA_CONTRIBUTED_SHARED + KEY_BODY)
														.replace('{{mediaType}}', media.toLowerCase())
														.replace('{{mediaType, lowercase}}', media.toLowerCase())
														.replace('{{albumName}}', albumTitle)
														.replace('{{contentTitle}}', albumTitle);
						}

						String viewLink = viewLink(feedId);

						String emailBody = getAlbumMediaActionEmailBody(peoplePrefMap.get(targetUser), introText, body, null, viewLink);
						emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody,targetuser, SimpplrContext.SEDFromEmail));
					}
					if(!emailObjList.isEmpty()) {
						sendEmails(emailObjList);
					}
				}
			}
		}catch(Exception e){
			logger.logError('Unable to send sendEmailForMediaShare email',e);
		}
	}
	
	public static void sendNotificationForMediaLike(File__c fileObj, Simpplr_Content__c simpplrContentObj) {
		try {
			Set<String> targetUserSet = new Set<String>();
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			String contentType = simpplrContentObj.Type__c;
			targetUserSet.add(simpplrContentObj.Primary_Author__c);
			targetUserSet.add(fileObj.Author__c);
				
			for (String toUser : targetUserSet) {
				NotificationDao.Notification notificationObj = new NotificationDao.Notification();
				
				if (toUser.equals(simpplrContentObj.Primary_Author__c) ){
					if (fileObj.Mime_Type__c.equalsIgnoreCase('image')) {
						notificationObj.categoryStr = 'Album_Photo_Like';
					} else if (fileObj.Mime_Type__c.equalsIgnoreCase('video')) {
						notificationObj.categoryStr = 'Album_Video_Like';
					}
				} else {
					if (fileObj.Mime_Type__c.equalsIgnoreCase('image')) {
						notificationObj.categoryStr = 'Album_Your_Photo_Like';
					} else if (fileObj.Mime_Type__c.equalsIgnoreCase('video')) {
						notificationObj.categoryStr = 'Album_Your_Video_Like';
					}
				}
				notificationObj.snippet = Utility.chompString(simpplrContentObj.Title__c,255);
				notificationObj.type = TYPE_INFORMATION;
				notificationObj.subType = SUB_TYPE_LIKE;
				notificationObj.status = NOTIFICATION_STATUS;
				notificationObj.objectType = simpplrContentObj.Type__c;
				notificationObj.toUser = toUser;
				notificationObj.parentObjectID = simpplrContentObj.id;
				notificationObj.contentId = simpplrContentObj.id;
				notificationObj.objectId = fileObj.id;
				notificationObj.siteId = simpplrContentObj.site__c;
				notificationObjList.add(notificationObj);
			}
			
			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}
	
	public static void sendNotificationForMediaShare(File__c fileObj, Simpplr_Content__c simpplrContentObj, String feedId) {
		try {
			Set<String> targetUserSet = new Set<String>();
			List<NotificationDao.Notification> notificationObjList = new List<NotificationDao.Notification>();
			String contentType = simpplrContentObj.Type__c;
			targetUserSet.add(simpplrContentObj.Primary_Author__c);
			targetUserSet.add(fileObj.Author__c);
				
			
			for (String toUser : targetUserSet) {
				NotificationDao.Notification notificationObj = new NotificationDao.Notification();
				
				if (toUser.equals(simpplrContentObj.Primary_Author__c) ){
					if (fileObj.Mime_Type__c.equalsIgnoreCase('image')) {
						notificationObj.categoryStr = 'Album_Photo_Share';
					} else if (fileObj.Mime_Type__c.equalsIgnoreCase('video')) {
						notificationObj.categoryStr = 'Album_Video_Share';
					}
				} else {
					if (fileObj.Mime_Type__c.equalsIgnoreCase('image')) {
						notificationObj.categoryStr = 'Album_Your_Photo_Share';
					} else if (fileObj.Mime_Type__c.equalsIgnoreCase('video')) {
						notificationObj.categoryStr = 'Album_Your_Video_Share';
					}
				}
				notificationObj.snippet = Utility.chompString(simpplrContentObj.Title__c,255);
				notificationObj.type = TYPE_INFORMATION;
				notificationObj.subType = SUB_TYPE_SHARE;
				notificationObj.status = NOTIFICATION_STATUS;
				notificationObj.objectType = OBJECT_TYPE_CONTENT_FEEDITEM;
				notificationObj.toUser = toUser;
				notificationObj.parentObjectID = simpplrContentObj.id;
				notificationObj.contentId = simpplrContentObj.id;
				notificationObj.objectId = feedId;
				notificationObj.siteId = simpplrContentObj.site__c;
				
				notificationObjList.add(notificationObj);
			}
			
			sendNotifications(notificationObjList);
		} catch(Exception e){
			logger.logError('Unable to send notification',e);
		}
	}

	private static Integer getFilesCountForComment(ConnectApi.Comment commentObj) {
		Integer fileCount = 0;

		if(commentObj != null) {
			ConnectApi.ContentCapability commentContent = commentObj.capabilities.content;
			if(commentContent != null && commentContent.id != null && commentContent.fileSize != null) {
				fileCount = 1;
			}
		}

		return fileCount;
	}

	private static Integer getFilesCountForFeedPost(ConnectApi.FeedElement feedObj) {
		Integer fileCount = 0;
		if(feedObj != null) {
			ConnectApi.FilesCapability files = feedObj.capabilities.files; 
			if(files != null && files.items != null) {
				for(ConnectApi.Content content : files.items){    
					if(content.id != null && content.fileSize != null) {
						fileCount++;
					}
				}
			}
		}

		return fileCount;
	}

	public static String getBodyWithLocalizedDateTime(String body, String targetUserTimeZone, String targetUserlanguagelocalekey, List<DateTime> toBeReplaceGMTDateTime) {
    	String updatedBody = body;
    	Integer index = 0;
    	for(DateTime gmtDate:toBeReplaceGMTDateTime) {
    		String formatedDateTime =  LocaleContext.getLocalisedDateWithTime(gmtDate, targetUserlanguagelocalekey, targetUserTimeZone);
    		updatedBody = updatedBody.replace('(ToBeReplacedDate' + index + ')', formatedDateTime);
    		index++;
    	}
    	return updatedBody;
    }

    public void addContactToSendInBlue() {
        ResponseWrapper responseWrapperObj = new ResponseWrapper();
        HttpRequest reqObj = new HttpRequest();
        reqObj.setEndpoint(SimpplrContext.simpplrIntegrationServiceEndpoint+'?action=addcontacttosendinblue');
        reqObj.setHeader('content-type','application/json');
        reqObj.setHeader('accept', 'application/json');
        reqObj.setMethod('POST');
        List<People__c> listOfPeople = [SELECT id, Email__c, Last_Name__c, 
                First_Name__c,Mobile_Phone__c, Full_Name__c, Company_Name__c, Title__c, 
                App_Moderation_Permission__c 
				FROM People__c WHERE id=:UserContext.peopleId limit 1];
				
        List<Simpplr_Content__c> listOfSimpCont = [SELECT id, Primary_Author__c 
                FROM Simpplr_Content__c 
                WHERE Primary_Author__c=:UserContext.peopleId limit 1];
        Boolean isContentAuthor = false; 

        if (!listOfSimpCont.isEmpty()) {
            isContentAuthor = true;
        }

        Integer totalLoginLastNintyDay = 0;
        Date lastNintyDay = System.today() - 90; 
		Map<String, Object> soqlParamMap = new  Map<String, Object>();
		soqlParamMap.put('soqlParam1', UserContext.peopleId);
		soqlParamMap.put('soqlParam2', lastNintyDay);
        String query = 'SELECT count(Id) totalLogin, ' 
                			+ ' People__c ' 
               				+ ' FROM Analytics_Adoption__c  ' 
                			+ ' WHERE People__c=:soqlParam1 AND Date__c>:soqlParam2 ' 
                			+ ' group by People__c';
		SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
		List<AggregateResult> aggregateResultList  = (List<AggregateResult>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
        
        if (!aggregateResultList.isEmpty()) {
            totalLoginLastNintyDay = Integer.valueOf(aggregateResultList[0].get('totalLogin')); 
        }

		NotificationWrapper.SendInBlueWrapper requestBody = new NotificationWrapper.SendInBlueWrapper();		
		requestBody.contact = new NotificationWrapper.ContactWrapper();
		requestBody.contact.Email = listOfPeople[0].Email__c;
		requestBody.contact.FIRSTNAME = listOfPeople[0].First_Name__c;
		requestBody.contact.LASTNAME = listOfPeople[0].Last_Name__c;
		requestBody.contact.ORG_ID = UserInfo.getOrganizationId() ;
		requestBody.contact.ORG_NAME = UserInfo.getOrganizationName();
		requestBody.contact.JOB_TITLE = listOfPeople[0].Title__c;
		requestBody.contact.APP_MANAGER = UserContext.isUserAppModerator;
		requestBody.contact.SITE_MANAGER = UserContext.isUserSiteManager;
		requestBody.contact.CONTENT_AUTHOR = isContentAuthor;
		requestBody.contact.NUM_DAYS_OF_LOGIN_LAST_NINETY_DAYS = totalLoginLastNintyDay;
		requestBody.contact.ALERT_CONTROL = UserContext.canSendAlerts;
		requestBody.contact.ANALYTICS_CONTROL = UserContext.isUserAppModerator || UserContext.canAccessAnalytics;
		requestBody.contact.NEWSLETTER_CONTROL = UserContext.canSendSiteNewsletter;
		requestBody.contact.SOCIAL_CAMPAIGN_CONTROL = SimpplrContext.isFeatureEnabled('Employee_Advocacy') ? UserContext.hasManageCampaignAccess : false;

		requestBody.recipient = new NotificationWrapper.RecipientWrapper();
		requestBody.recipient.name = listOfPeople[0].Full_Name__c;
		requestBody.recipient.email = listOfPeople[0].Email__c;

		requestBody.emailParams = new NotificationWrapper.WelcomeEmailParamsWrapper();
		requestBody.emailParams.appName = SimpplrContext.applicationName;
		requestBody.emailParams.settingLink = baseUrl + Page.PageRedirector.getUrl() + '?userId=' + UserContext.peopleId + '&pageToRedirect=' + 
												Pages.MySettingsEmail + '&origin=ne';

        reqObj.setBody(Json.serialize(requestBody));
        Http httpObj = new Http();
        logger.logDebug('NotificationDispatcher.addContactToSendInBlue()----Request Body----' + reqObj.getBody());
        HTTPResponse resObj = httpObj.send(reqObj);
        
        if (resObj.getStatusCode() == 200) { 
            String resBodyJSON = resObj.getBody();
        } 
        
    }

    public void removeContactFromSendInBlue() {
        ResponseWrapper responseWrapperObj = new ResponseWrapper();
        HttpRequest reqObj = new HttpRequest();
        reqObj.setEndpoint(SimpplrContext.simpplrIntegrationServiceEndpoint+'?action=removecontactfromsendinblue');
        reqObj.setHeader('content-type','application/json');
        reqObj.setHeader('accept', 'application/json');
        reqObj.setMethod('POST');
        String reqBodyString = '{"email":"' + UserContext.getCurrentUserInfo.email__c + '"}';
        reqObj.setBody(reqBodyString);
        Http httpObj = new Http();
        logger.logDebug('NotificationDispatcher.removeContactFromSendInBlue()----Request Body----' + reqObj.getBody());
        HTTPResponse resObj = httpObj.send(reqObj);
        
        if (resObj.getStatusCode()== 200) { 
            String resBodyJSON = resObj.getBody();
            
        } 
       
    }
	
	/**
     * @description This method is used to send Email For Csv Download
     * @param csvDownloadRedirectUrl
	 * @param requestDataMap
    */
	public static void sendEmailForCsvDownload(String csvDownloadRedirectUrl, Map<String, Object> requestDataMap) {
		String widgetTab = requestDataMap != null && requestDataMap.containsKey('widgetTab') && requestDataMap.get('widgetTab') != null ? (String) requestDataMap.get('widgetTab') : null;
		String widgetTitle = requestDataMap != null && requestDataMap.containsKey('widgetTitle') && requestDataMap.get('widgetTitle') != null ? (String) requestDataMap.get('widgetTitle') : null;
		String targetUserId = requestDataMap != null && requestDataMap.containsKey('userId') && requestDataMap.get('userId') != null ? (String) requestDataMap.get('userId') : null;
		try {
			List<People_Preference__c> peoplePreList;
			Map<String, Object> soqlParamMap = new  Map<String, Object>();
			soqlParamMap.put('soqlParam1', targetUserId);
			String query = 'SELECT id, people__r.user__c, people__r.user__r.username, People__r.First_Name__c, ' 
							+ ' People__r.Last_Name__c, People__r.About__c, Email_Follows_Me__c, People__r.Segment__r.Id, ' 
							+ ' People__r.Segment__r.Branding_JSON__c, People__r.Segment__r.Branding_Logo__c, ' 
							+ ' User__r.languagelocalekey,User__r.TimezoneSIDKey '
							+ ' FROM People_Preference__c '
							+ ' WHERE Allow_Simpplr_Emails__c = true ' 
							+ ' and Email_Notification_Digest_Frequency__c=\'Immediate\' and '  
							+ ' people__r.user__c=: soqlParam1 and people__r.User__r.IsActive=true and '
							+ ' people__r.User__r.UserType=\'Standard\' ';
					
			if (String.isNotBlank(SimpplrContext.packageName) && SimpplrContext.isSandbox == false && !Test.isRunningTest()){
				soqlParamMap.put('soqlParam2', SimpplrContext.packageName);	
				query += ' and User__c IN (select userid from ' 
							+ ' UserPackageLicense where PackageLicense.NamespacePrefix =: soqlParam2)';
			
			}
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.Without);
			peoplePreList = (List<People_Preference__c>)SIMPESAPI.accessController().queryAsUSer(query, soqlParamMap);
			if (!peoplePreList.isEmpty()) {
				initLangKeyValueMap(peoplePreList);
				NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c)peoplePreList[0].People__r);
				List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
				String subject = '';
				String localizedWidgetTabStr = '';
				String localizedWidgetTitleStr = '';
				if('Must Read History'.equalsIgnoreCase(widgetTab)){
					localizedWidgetTabStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_MUST_READ_HISTORY);
					localizedWidgetTitleStr = widgetTitle;
					subject = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey),KEY_SUCCESS_CSV_FILE_AVAILABLE);
				} else if('Adoption'.equalsIgnoreCase(widgetTab) && 'Adoption behavior'.equalsIgnoreCase(widgetTitle)) {
					localizedWidgetTabStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_ADOPTION);
					localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_ADOPTION_BEHAVIOR);
					subject = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey),KEY_SUCCESS_ANALYTICS_CSV_FILE_AVAILABLE);
				} else if('People'.equalsIgnoreCase(widgetTab) || 'Site analytics'.equalsIgnoreCase(widgetTab)) {
					
					if('People'.equalsIgnoreCase(widgetTab)){
						localizedWidgetTabStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_PEOPLE);
					}else{
						localizedWidgetTabStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_SITE_ANALYTICS);
					}
					
					if('Favorites received'.equalsIgnoreCase(widgetTitle)){
						localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_FAVOURITES_RECEIVED);
					}else if('Likes made'.equalsIgnoreCase(widgetTitle)){
						localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_LIKES_MADE);
					}else if('Likes received'.equalsIgnoreCase(widgetTitle)){
						localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_LIKES_RECEIVED);
					}else if('Feed posts'.equalsIgnoreCase(widgetTitle)){
						localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_FEED_POSTS);
					}else if('Replies'.equalsIgnoreCase(widgetTitle)){
						localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_REPLIES);
					}else if('Replies from other users'.equalsIgnoreCase(widgetTitle)){
						localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_REPLIES_FROM);
					}else if('Shares received'.equalsIgnoreCase(widgetTitle)){
						localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_SHARES_RECEIVED);
					}else if('Profile views'.equalsIgnoreCase(widgetTitle)){
						localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_PROFILE_VIEWS);
					}else if('Content published'.equalsIgnoreCase(widgetTitle)){
						localizedWidgetTitleStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey), KEY_KEY_CONTENT_PUBLISHED);
					}
					
					subject = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(peoplePreList[0].User__r.languagelocalekey),KEY_SUCCESS_ANALYTICS_CSV_FILE_AVAILABLE);
				}
				subject = subject.replace('{{widgetTab}}', localizedWidgetTabStr);
				subject = subject.replace('{{widgetTitle}}', localizedWidgetTitleStr);
				requestDataMap.put('localizedWidgetTabStr', localizedWidgetTabStr);
				requestDataMap.put('localizedWidgetTitleStr', localizedWidgetTitleStr);
				String emailBody = getCsvHTMLEmailBody(peoplePreList[0], csvDownloadRedirectUrl, requestDataMap);
				emailObjList.add(EmailUtility.getSingleEmailElement(subject, emailBody, targetUserId, SimpplrContext.SEDFromEmail));
				
				if (!emailObjList.isEmpty()) {
					sendEmails(emailObjList);
				}
			}

		} catch (Exception e) {
			logger.logError('Unable to send EmailForFollow email',e);
		}

	}
	
	/**
     * @description This method is used to get Csv HTML Email Body
     * @param peoplePrefObj
	 * @param csvDownloadRedirectUrl
	 * @param requestDataMap
    */
	@testVisible 
	private static String getCsvHTMLEmailBody(People_Preference__c peoplePrefObj, String csvDownloadRedirectUrl, Map<String, Object> requestDataMap) {
		String widgetTab = requestDataMap != null && requestDataMap.containsKey('widgetTab') && requestDataMap.get('widgetTab') != null ? (String) requestDataMap.get('widgetTab') : null;
		String widgetTitle = requestDataMap != null && requestDataMap.containsKey('widgetTitle') && requestDataMap.get('widgetTitle') != null ? (String) requestDataMap.get('widgetTitle') : null;
		String localizedDateTimeStr = requestDataMap != null && requestDataMap.containsKey('localizedDateTime') && requestDataMap.get('localizedDateTime') != null ? (String)requestDataMap.get('localizedDateTime') : null;
		NotificationHelper.BrandingInfo brandingInfo =  EmailUtility.getBrandingInfo4People((People__c) peoplePrefObj.People__r);
		List<String> formatterList = new List<String>();
		String profileDisplayIcon = getProfileDisplayIcon(UserContext.externalPhotoUrl, UserContext.externalPhotoUrlExpiryDate);
		String languagelocalekey = Utility.getSimpplrLanguageLocaleKey(peoplePrefObj.User__r.languagelocalekey);
		String alreadyFollowedTable = '';
		
		if (String.isNotBlank(peoplePrefObj.People__r.First_Name__c)) {
			formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}',peoplePrefObj.People__r.First_Name__c));
		
		} else {
			formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_EMAIL_COMMON_SALUTATION).replace('{{firstName}}',peoplePrefObj.People__r.Last_Name__c));
		}//0
		String text1 = '';
		if('Must Read History'.equalsIgnoreCase(widgetTab)){
			text1 = LocaleContext.getLabel(languagelocalekey,KEY_CSV_FILE_AVAILABLE);
		} else{
			text1 = LocaleContext.getLabel(languagelocalekey,KEY_ANALYTICS_CSV_FILE_AVAILABLE);
		}
		text1 = text1.replace('{{widgetTab}}', ((String)requestDataMap.get('localizedWidgetTabStr')).escapeHtml4());
		text1 = text1.replace('{{widgetTitle}}', ((String)requestDataMap.get('localizedWidgetTitleStr')).escapeHtml4());
		text1 = text1.replace('{{date}}',localizedDateTimeStr.subString(0,localizedDateTimeStr.length() - 9));
		text1 = text1.replace('{{time}}',localizedDateTimeStr.subString(localizedDateTimeStr.length() - 8,localizedDateTimeStr.length()));
		text1 = text1.replace('{{urlLink}}',csvDownloadRedirectUrl);
		text1 = text1.replace('{{brandingColor}}',brandingInfo.general_primaryColor);
		formatterList.add(text1);//1
		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_CLICK_AND_LOGIN_TO_DOWNLOAD));//2
		formatterList.add(NotificationHelper.applyLinksFormatting(csvDownloadRedirectUrl, csvDownloadRedirectUrl, brandingInfo));//3  
		formatterList.add(LocaleContext.getLabel(languagelocalekey,KEY_FILE_WILL_BE_AVAILABLE_FOR_72_HOURS));//4
		
		String emailBodyCsvDownload = EmailTemplateService.templatePartMap.get('emailBodyCsvDownload');
		emailBodyCsvDownload = EmailUtility.format(emailBodyCsvDownload, formatterList);
		formatterList.clear();
		return getEmailTemplateWithNewHeaderFooter(peoplePrefObj, emailBodyCsvDownload, brandingInfo);
	}

	/**
     * @description This will send an in app notification for Csv Download
	 * @param csvDownloadObjectId
	 * @param requestDataMap
     */
    public static void sendInAppNotificationForCsvDownload( String csvDownloadObjectId, Map<String, Object> requestDataMap) {
		String targetUserId = requestDataMap != null && requestDataMap.containsKey('userId') && requestDataMap.get('userId') != null ? (String) requestDataMap.get('userId') : null;
		String peopleId = requestDataMap != null && requestDataMap.containsKey('peopleId') && requestDataMap.get('peopleId') != null ? (String) requestDataMap.get('peopleId') : null;
        String contentId = requestDataMap != null && requestDataMap.containsKey('contentId') && requestDataMap.get('contentId') != null ? (String) requestDataMap.get('contentId') : null;
		String guid = targetUserId + '-' + System.currentTimeMillis(); 
        App_Notification__c notificationObject = new App_Notification__c();
        notificationObject.GUID__c = guid;
        notificationObject.Status__c = 'Pending';
        notificationObject.Type__c = 'Actionable';
        notificationObject.Is_Read__c = false;
        notificationObject.Is_New__c = true;
        notificationObject.Category__c = 'Csv_Download_Request';
        notificationObject.Sent_to__c = peopleId;
        notificationObject.Content__c = contentId;
		notificationObject.Object_Type__c = 'CsvDownloadRequest';
		notificationObject.Csv_Download_Request__c = csvDownloadObjectId;
        notificationObject.Created_DateTime__c = DateTime.now();
        SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.WITHOUT);
        SIMPESAPI.accessController().insertAsUser(notificationObject, new List<Schema.SObjectField>{
            App_Notification__c.GUID__c, 
            App_Notification__c.Status__c, 
            App_Notification__c.Type__c, 
            App_Notification__c.Is_Read__c, 
            App_Notification__c.Is_New__c, 
            App_Notification__c.Category__c, 
            App_Notification__c.Sent_to__c, 
            App_Notification__c.Object_Type__c,
            App_Notification__c.Content__c, 
            App_Notification__c.Csv_Download_Request__c, 
            App_Notification__c.Created_DateTime__c});
    }

	/**
	 * @description: method to prepare email content and send to app managers when intergration needs to reconnect
	 * @param `String` integration name
	 * @param 'List<People__c>' app managers people record list
	 * @param `integer` no of days
	 * @return `List<Email_Log__c>` list of email records
	 */
	public static List<Email_Log__c> sendMailToReconnectIntegration(String integrationName, List<People__c> appManagersList, Integer noOfDays) {
		List<Email_Log__c> emailList = new List<Email_Log__c>();
		String appManagementLink = baseUrl + Page.app.getUrl() + '?u=/manage/app/integrations/files';
		List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
		String fromEmail = ''; 
		if(String.isNotBlank(SimpplrContext.SEDFromEmail)){
			fromEmail = NotificationDispatcher.getOrgWideEmailFromID(SimpplrContext.SEDFromEmail);
		}
		for (People__c appManager : appManagersList) {
			LocaleContext.getAllLabelMap('EmailNotifications', new List<String>{appManager.User__r.languageLocaleKey});
			LocaleContext.getAllLabelMap('AnalyticsDataServer', new List<String>{appManager.User__r.languageLocaleKey});
			NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(appManager);
			
			Email_Log__c email = new Email_Log__c();
			email.Received_By__c = appManager.User__r.Email;
			email.Type__c = 'Reconnect';
			email.Sent_By__c = fromEmail;
			email.Sent_At__c = DateTime.now();
			email.User__c = appManager.User__c;
			email.Source__c= 'BatchCheckAdminIntegrations ' + integrationName;
			email.Subject__c = getReconnectIntegrationEmailSubject(integrationName, appManager);
			email.Body__c = getReconnectIntegrationEmailBody(integrationName, noOfDays, appManager);
			emailList.add(email);

			String supportLinkInfo = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(appManager.User__r.languagelocalekey),KEY_SUPPORT_LINK_INFO);
			String supportLink = 'https://support.simpplr.com/';
			String manageAppStr = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(appManager.User__r.languagelocalekey),KEY_MANAGE_APP);
			String simpplrSupportStr = 'Simpplr support';

			String reconnectEmailBody = EmailTemplateService.templatePartMap.get('reconectIntegrationEmail');
			reconnectEmailBody = EmailUtility.format(reconnectEmailBody, new List<String>{email.Body__c, appManagementLink, manageAppStr, supportLinkInfo, supportLink, simpplrSupportStr});
			String finalBodyWithFooterandHeader = getEmailTemplateWithHeaderFooterNoDate(appManager.User__r.languageLocaleKey, reconnectEmailBody, brandingInfo);

			emailObjList.add(EmailUtility.getSingleEmailElement(email.Subject__c, finalBodyWithFooterandHeader, appManager.User__c, SimpplrContext.SEDFromEmail));
		}
		if (!emailObjList.isEmpty()) {
			sendEmails(emailObjList);
		}
		return emailList;
	}

	/**
	 * @description: method is used to prepare reconnect integration email subject
	 * @param `String` integration name
	 * @return `String` subject
	 */
	private static String getReconnectIntegrationEmailSubject(String integrationName, People__c appManager) {
		String subject = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(appManager.User__r.languagelocalekey),KEY_RECONNECT_INTEGRATION_EMAIL_SUBJECT);
		subject = subject.replace('{{integrationName}}', integrationName);
		subject = subject.replace('{{intranetName}}', SimpplrContext.applicationName);
		return subject;
	}

	/**
	 * @description: method is used to prepare reconnect integration email body
	 * @param `String` integration name
	 * @return `String` body
	 */
	private static  String getReconnectIntegrationEmailBody(String integrationName,Integer noOfDays, People__c appManager) {
		String emailBodyInfo = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(appManager.User__r.languagelocalekey),KEY_RECONNECT_INTEGRATION_EMAIL_BODY);
		emailBodyInfo = emailBodyInfo.replace('{{integrationName}}', integrationName);
		emailBodyInfo = emailBodyInfo.replace('{{intranetName}}', SimpplrContext.applicationName);
		emailBodyInfo = emailBodyInfo.replace('{{integrationName}}', integrationName);
		emailBodyInfo = emailBodyInfo.replace('{{numberOfDays}}', String.valueOf(noOfDays));
		return emailBodyInfo;
	}

	/**
	 * @description: method to prepare email content and send to app managers when intergration is disconnected
	 * @param `String` integration name
	 * @param 'List<People__c>' app managers people record list
	 * @return `List<Email_Log__c>` list of email records
	 */
	public static List<Email_Log__c> sendInterationDisconnectedEmail(String integrationName, List<People__c> appManagersList) {
		List<Email_Log__c> emailList = new List<Email_Log__c>();
		List<Messaging.SingleEmailMessage> emailObjList = new List<Messaging.SingleEmailMessage>();
		String fromEmail = ''; 
		if(String.isNotBlank(SimpplrContext.SEDFromEmail)){
			fromEmail = NotificationDispatcher.getOrgWideEmailFromID(SimpplrContext.SEDFromEmail);
		}
		for (People__c appManager : appManagersList) {
			LocaleContext.getAllLabelMap('EmailNotifications', new List<String>{appManager.User__r.languageLocaleKey});
			NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(appManager);

			Email_Log__c email = new Email_Log__c();
			email.Received_By__c = appManager.User__r.Email;
			email.Type__c = 'Disconnect';
			email.Sent_By__c = fromEmail;
			email.Sent_At__c = DateTime.now();
			email.User__c = appManager.User__c;
			email.Source__c= 'BatchCheckAdminIntegrations ' + integrationName;
			email.Subject__c = getIntegrationDisconnectedEmailSubject(integrationName, appManager);
			email.Body__c = getIntegrationDisconnectedEmailBody(integrationName, appManager);
			emailList.add(email);

			String supportLinkInfo = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(appManager.User__r.languagelocalekey),KEY_SUPPORT_LINK_INFO);
			String supportLink = 'https://support.simpplr.com/';
			String simpplrSupportStr = 'Simpplr support';

			String disconnectEmailBody = EmailTemplateService.templatePartMap.get('disconnectedIntegrationEmail');
			disconnectEmailBody = EmailUtility.format(disconnectEmailBody, new List<String>{email.Body__c, supportLinkInfo, supportLink, simpplrSupportStr});
			String finalBodyWithFooterandHeader = getEmailTemplateWithHeaderFooterNoDate(appManager.User__r.languageLocaleKey, disconnectEmailBody, brandingInfo);

			emailObjList.add(EmailUtility.getSingleEmailElement(email.Subject__c, finalBodyWithFooterandHeader, appManager.User__c, SimpplrContext.SEDFromEmail));
		}
		if (!emailObjList.isEmpty()) {
			sendEmails(emailObjList);
		}
		return emailList;
	}

	/**
	 * @description: method is used to prepare disconnect integration email subject
	 * @param `String` integration name
	 * @return `String` subject
	 */
	private static String getIntegrationDisconnectedEmailSubject(String integrationName, People__c appManager) {
		String subject = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(appManager.User__r.languagelocalekey),KEY_DISCONNECT_INTEGRATION_EMAIL_SUBJECT);
		subject = subject.replace('{{integrationName}}', integrationName);
		subject = subject.replace('{{intranetName}}', SimpplrContext.applicationName);
		return subject;
	}

	/**
	 * @description: method is used to prepare integration disconnected email body
	 * @param `String` integration name
	 * @return `String` body
	 */
	private static  String getIntegrationDisconnectedEmailBody(String integrationName, People__c appManager) {
		String emailBodyInfo = LocaleContext.getLabel(Utility.getSimpplrLanguageLocaleKey(appManager.User__r.languagelocalekey),KEY_DISONNECT_INTEGRATION_EMAIL_BODY);
		emailBodyInfo = emailBodyInfo.replace('{{integrationName}}', integrationName);
		emailBodyInfo = emailBodyInfo.replace('{{intranetName}}', SimpplrContext.applicationName);
		emailBodyInfo = emailBodyInfo.replace('{{integrationName}}', integrationName);
		emailBodyInfo = emailBodyInfo.replace('{{intranetName}}', SimpplrContext.applicationName);
		return emailBodyInfo;
	}
	
	/**
     * @description return branded email body to send to users
     * @param people people obj
	 * @param appName client app name
	 * @param integrationType integration type
     * @return Messaging.SingleEmailMessage
     */
	public static String createUserIntegrationEmailBody(People__c people,String appName,String integrationType){
		String localeKey = Utility.getSimpplrLanguageLocaleKey(people.User__r.languagelocalekey);
		LocaleContext.getAllLabelMap('EmailNotifications', new List<String>{localeKey});
		String emailbody = LocaleContext.getLabel(localeKey, USER_INTEGRATION_EMAIL_TEMPLATE+'.body');
		emailbody = emailbody.replace('{{appName}}', appName);
        emailbody = emailbody.replace('{{integrationType}}', integrationType);
		String hyperLinkName = LocaleContext.getLabel(localeKey, USER_INTEGRATION_EMAIL_TEMPLATE+'.linkName');
		String supportLinkBody = LocaleContext.getLabel(localeKey, USER_INTEGRATION_EMAIL_TEMPLATE+'.supportLinkBody');
		supportLinkBody = supportLinkBody.replace('{{appName}}', appName);
		List<String> formatterList = new List<String>();
        String integrationDisconnectedBody = EmailTemplateService.templatePartMap.get('userIntegrationDisconncted');
        formatterList.add(emailbody);
        formatterList.add(baseUrl + Page.app.getUrl() + '?u=/my-settings/external-apps');
        formatterList.add(hyperLinkName);
        formatterList.add(supportLinkBody);
        integrationDisconnectedBody = EmailUtility.format(integrationDisconnectedBody, formatterList);
        formatterList.clear();
        NotificationHelper.BrandingInfo brandingInfo = EmailUtility.getBrandingInfo4People(people);
        return getEmailTemplateWithHeaderFooterNoDate(localeKey, integrationDisconnectedBody, brandingInfo);
    }

	/**
     * @description return branded email subject in user language to send to users
     * @param people people obj
	 * @param appName client app name
	 * @param integrationType integration type
     * @return String
     */
	public static String createUserIntegrationEmailSubject(People__c people,String appName,String integrationType){
        String localeKey = Utility.getSimpplrLanguageLocaleKey(people.User__r.languagelocalekey);
		LocaleContext.getAllLabelMap('EmailNotifications', new List<String>{localeKey});
		String emailSubjectStr = LocaleContext.getLabel(localeKey, USER_INTEGRATION_EMAIL_TEMPLATE+'.subject');
        emailSubjectStr = emailSubjectStr.replace('{{appName}}', appName);
        emailSubjectStr = emailSubjectStr.replace('{{integrationType}}', integrationType);
        return emailSubjectStr;
    }

	/**
     * @description send email and save logs for user integration token check batch
     * @param people people obj
	 * @param integrationType integration type
     */
	public static void userIntegrationTokenExpireSendEmailSaveLogs(Set<Id> peopleIds,String integrationType){
		PeopleDao peopleDaoObj = new PeopleDao();
		Map<Id,People__c> peopleMap = peopleDaoObj.getPeopleMapforEmail(peopleIds);
		List<Messaging.SingleEmailMessage> listOfEmailsToSend = new List<Messaging.SingleEmailMessage>();
		List<Email_Log__c> emailLog = new List<Email_Log__c>();
		String appName  = SimpplrContext.applicationName;
		String fromEmail = ''; 
		if(String.isNotBlank(SimpplrContext.SEDFromEmail)){
			fromEmail = NotificationDispatcher.getOrgWideEmailFromID(SimpplrContext.SEDFromEmail);
		}
		String fromEmailId = SimpplrContext.SEDFromEmail;
		for(String peopleId : peopleIds){
			if(peopleMap.containsKey(peopleId)){
				People__c people = peopleMap.get(peopleId);
				String emailSubjectStr = NotificationDispatcher.createUserIntegrationEmailSubject(people,appName,integrationType);
				String emailBody = NotificationDispatcher.createUserIntegrationEmailBody(people,appName,integrationType);
				Messaging.SingleEmailMessage singleMailObj = EmailUtility.getSingleEmailElement(emailSubjectStr, emailBody, people.User__c, fromEmailId);
				Email_Log__c log = new Email_Log__c(Subject__c = emailSubjectStr,
													Body__c =emailBody,Sent_By__c=fromEmail,
													Sent_At__c = System.now(),Source__c= 'UserIntegrationBatches'+integrationType,
													Type__c ='Disconnect',User__c = people.User__c);
				emailLog.add(log);                                 
				listOfEmailsToSend.add(singleMailObj);
			}
		}
		if (listOfEmailsToSend.size() > 0) {
			Messaging.sendEmail(listOfEmailsToSend);
		}
		if(emailLog.size()>0){
			SIMPESAPI.accessController().setSharingMode(SIMPSFDCAccessController.SharingMode.WITHOUT);
			SIMPESAPI.accessController().insertAsUser(emailLog, new List<Schema.SObjectField>{
																				Email_Log__c.Subject__c,
																				Email_Log__c.Sent_By__c,
																				Email_Log__c.User__c,
																				Email_Log__c.Sent_At__c,
																				Email_Log__c.Body__c,
																				Email_Log__c.Type__c,
																				Email_Log__c.Source__c
																			});
		}		
	}

	/**
     * @description fetch OrgWideAddress Email Adress from Id
     * @param OrgWideEmailAdress Id
	 * @return String Email Address
     */
	public static String getOrgWideEmailFromID(Id owaID){
		String fromEmail = '';
		if(owaID <> null){
			List<OrgWideEmailAddress> owaList = new List<OrgWideEmailAddress>();
			owaList = [select id, Address, DisplayName from OrgWideEmailAddress where Id =:owaID];
			if(owaList<>NULL && owaList.size()>0){
				fromEmail = owaList[0].Address;
			}
		}
		return fromEmail;
	}


}